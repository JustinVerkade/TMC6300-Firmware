
TMC6300-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a94  08008cc8  08008cc8  00018cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a75c  0800a75c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a75c  0800a75c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a75c  0800a75c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a75c  0800a75c  0001a75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a760  0800a760  0001a760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001dc  0800a940  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800a940  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e45  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241c  00000000  00000000  00032051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178ca  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129c8  00000000  00000000  0004d9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009096b  00000000  00000000  0006038a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0cf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc8  00000000  00000000  000f0d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cb0 	.word	0x08008cb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008cb0 	.word	0x08008cb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <TMC6300_Init>:
		uint16_t commutation_channel_w,
		GPIO_TypeDef *standby_gpio,
		uint16_t standby_pin,
		GPIO_TypeDef *diag_gpio,
		uint16_t diag_pin)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	80fb      	strh	r3, [r7, #6]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	80bb      	strh	r3, [r7, #4]
	// sine commutation
	me->commutation_timer = commutation_timer;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	601a      	str	r2, [r3, #0]
	me->commutation_channel_u = commutation_channel_u;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	88fa      	ldrh	r2, [r7, #6]
 8000bc8:	809a      	strh	r2, [r3, #4]
	me->commutation_channel_v = commutation_channel_v;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	88ba      	ldrh	r2, [r7, #4]
 8000bce:	80da      	strh	r2, [r3, #6]
	me->commutation_channel_w = commutation_channel_w;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	8b3a      	ldrh	r2, [r7, #24]
 8000bd4:	811a      	strh	r2, [r3, #8]
	me->commutation_compare_u = 0;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	815a      	strh	r2, [r3, #10]
	me->commutation_compare_v = 0;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2200      	movs	r2, #0
 8000be0:	819a      	strh	r2, [r3, #12]
	me->commutation_compare_w = 0;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2200      	movs	r2, #0
 8000be6:	81da      	strh	r2, [r3, #14]
	me->commutation_arcseconds = 0;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]

	// io control
	me->standby_gpio = standby_gpio;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	615a      	str	r2, [r3, #20]
	me->diag_gpio = diag_gpio;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	619a      	str	r2, [r3, #24]
	me->standby_pin = standby_pin;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	8c3a      	ldrh	r2, [r7, #32]
 8000bfe:	839a      	strh	r2, [r3, #28]
	me->diag_pin = diag_pin;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c04:	83da      	strh	r2, [r3, #30]

	// driver state
	me->enabled = 0;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <TMC6300_Enable>:

// change state
void TMC6300_Enable(TMC6300_t *me)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
	// update state
	HAL_GPIO_WritePin(me->standby_gpio, me->standby_pin, GPIO_PIN_SET);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6958      	ldr	r0, [r3, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8b9b      	ldrh	r3, [r3, #28]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f001 ff89 	bl	8002b44 <HAL_GPIO_WritePin>

	// enable pwm channels
	me->commutation_timer->Instance->CR2 &= ~(TIM_CR2_CCPC);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(me->commutation_timer);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fbe4 	bl	8004418 <HAL_TIM_Base_Start>
//	HAL_TIM_PWM_Start(me->commutation_timer, me->commutation_channel_u);
//	HAL_TIMEx_PWMN_Start(me->commutation_timer, me->commutation_channel_u);
//	HAL_TIM_PWM_Start(me->commutation_timer, me->commutation_channel_v);
//	HAL_TIMEx_PWMN_Start(me->commutation_timer, me->commutation_channel_v);
	HAL_TIM_PWM_Start(me->commutation_timer, me->commutation_channel_w);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	891b      	ldrh	r3, [r3, #8]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f003 fcb0 	bl	80045c0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(me->commutation_timer, me->commutation_channel_w);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	891b      	ldrh	r3, [r3, #8]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f004 fd20 	bl	80056b0 <HAL_TIMEx_PWMN_Start>

	// update state
	me->enabled = 1;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <TMC6300_Disable>:

void TMC6300_Disable(TMC6300_t *me)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	// update state
	me->enabled = 0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
	// disable pwm channels
//	HAL_TIM_PWM_Stop(me->commutation_timer, me->commutation_channel_u);
//	HAL_TIMEx_PWMN_Stop(me->commutation_timer, me->commutation_channel_u);
//	HAL_TIM_PWM_Stop(me->commutation_timer, me->commutation_channel_v);
//	HAL_TIMEx_PWMN_Stop(me->commutation_timer, me->commutation_channel_v);
	HAL_TIM_PWM_Stop(me->commutation_timer, me->commutation_channel_w);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	891b      	ldrh	r3, [r3, #8]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f003 fd76 	bl	800478c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(me->commutation_timer, me->commutation_channel_w);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	891b      	ldrh	r3, [r3, #8]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4610      	mov	r0, r2
 8000cac:	f004 fd9e 	bl	80057ec <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_Base_Stop(me->commutation_timer);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fbfb 	bl	80044b0 <HAL_TIM_Base_Stop>

	// update state
	HAL_GPIO_WritePin(me->standby_gpio, me->standby_pin, GPIO_PIN_RESET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6958      	ldr	r0, [r3, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	8b9b      	ldrh	r3, [r3, #28]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f001 ff3d 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <TMC6300_SetPhaseAngle>:

// pwm control
void TMC6300_SetPhaseAngle(TMC6300_t *me, uint32_t commutation_angle, uint16_t power)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
	// convert to scalar indices
	int32_t angle = commutation_angle / 450;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4a3e      	ldr	r2, [pc, #248]	; (8000de0 <TMC6300_SetPhaseAngle+0x10c>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	61fb      	str	r3, [r7, #28]
	angle = angle < 0 ? 2880 - (-angle % 2880) : angle;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	da10      	bge.n	8000d16 <TMC6300_SetPhaseAngle+0x42>
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	; (8000de4 <TMC6300_SetPhaseAngle+0x110>)
 8000cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfe:	441a      	add	r2, r3
 8000d00:	12d1      	asrs	r1, r2, #11
 8000d02:	17da      	asrs	r2, r3, #31
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000d0a:	fb01 f202 	mul.w	r2, r1, r2
 8000d0e:	1a9a      	subs	r2, r3, r2
 8000d10:	f5c2 6334 	rsb	r3, r2, #2880	; 0xb40
 8000d14:	e000      	b.n	8000d18 <TMC6300_SetPhaseAngle+0x44>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	61fb      	str	r3, [r7, #28]

	// phases
	uint32_t sine_u = array[angle % 2880];
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <TMC6300_SetPhaseAngle+0x110>)
 8000d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d22:	441a      	add	r2, r3
 8000d24:	12d1      	asrs	r1, r2, #11
 8000d26:	17da      	asrs	r2, r3, #31
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000d2e:	fb01 f202 	mul.w	r2, r1, r2
 8000d32:	1a9a      	subs	r2, r3, r2
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <TMC6300_SetPhaseAngle+0x114>)
 8000d36:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d3a:	61bb      	str	r3, [r7, #24]
	uint32_t sine_v = array[(angle + 960) % 2880];
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <TMC6300_SetPhaseAngle+0x110>)
 8000d44:	fb82 1203 	smull	r1, r2, r2, r3
 8000d48:	441a      	add	r2, r3
 8000d4a:	12d1      	asrs	r1, r2, #11
 8000d4c:	17da      	asrs	r2, r3, #31
 8000d4e:	1a8a      	subs	r2, r1, r2
 8000d50:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000d54:	fb01 f202 	mul.w	r2, r1, r2
 8000d58:	1a9a      	subs	r2, r3, r2
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <TMC6300_SetPhaseAngle+0x114>)
 8000d5c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d60:	617b      	str	r3, [r7, #20]
	uint32_t sine_w = array[(angle + 1920) % 2880];
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <TMC6300_SetPhaseAngle+0x110>)
 8000d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6e:	441a      	add	r2, r3
 8000d70:	12d1      	asrs	r1, r2, #11
 8000d72:	17da      	asrs	r2, r3, #31
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000d7a:	fb01 f202 	mul.w	r2, r1, r2
 8000d7e:	1a9a      	subs	r2, r3, r2
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <TMC6300_SetPhaseAngle+0x114>)
 8000d82:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d86:	613b      	str	r3, [r7, #16]

	// pwm compare values
	me->commutation_compare_u = 200 * sine_u * power / 524288;
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	22c8      	movs	r2, #200	; 0xc8
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	0cdb      	lsrs	r3, r3, #19
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	815a      	strh	r2, [r3, #10]
	me->commutation_compare_v = 200 * sine_v * power / 524288;
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	22c8      	movs	r2, #200	; 0xc8
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	0cdb      	lsrs	r3, r3, #19
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	819a      	strh	r2, [r3, #12]
	me->commutation_compare_w = 200 * sine_w * power / 524288;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	22c8      	movs	r2, #200	; 0xc8
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	0cdb      	lsrs	r3, r3, #19
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	81da      	strh	r2, [r3, #14]

	// set compare values
//	me->commutation_timer->Instance->CCR1 = me->commutation_compare_u;
//	me->commutation_timer->Instance->CCR2 = me->commutation_compare_v;
	me->commutation_timer->Instance->CCR3 = power;//me->commutation_compare_w;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dd4:	bf00      	nop
 8000dd6:	3724      	adds	r7, #36	; 0x24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	91a2b3c5 	.word	0x91a2b3c5
 8000de4:	b60b60b7 	.word	0xb60b60b7
 8000de8:	08008cc8 	.word	0x08008cc8

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f000 fdd5 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f8c3 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 faad 	bl	8001358 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfe:	f000 fa8d 	bl	800131c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e02:	f000 f91b 	bl	800103c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e06:	f000 f9ad 	bl	8001164 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000e0a:	f000 fa57 	bl	80012bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(500);
 8000e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e12:	f000 fe2b 	bl	8001a6c <HAL_Delay>

	// bldc init
	TMC6300_Init(&bldc,
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	9304      	str	r3, [sp, #16]
 8000e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	2308      	movs	r3, #8
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2304      	movs	r3, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	494f      	ldr	r1, [pc, #316]	; (8000f74 <main+0x188>)
 8000e38:	484f      	ldr	r0, [pc, #316]	; (8000f78 <main+0x18c>)
 8000e3a:	f7ff feb5 	bl	8000ba8 <TMC6300_Init>
			BLDC_VIO_STBY_GPIO_Port,
			BLDC_VIO_STBY_Pin,
			BLDC_DIAG_GPIO_Port,
			BLDC_DIAG_Pin);

	TMC6300_Enable(&bldc);
 8000e3e:	484e      	ldr	r0, [pc, #312]	; (8000f78 <main+0x18c>)
 8000e40:	f7ff feeb 	bl	8000c1a <TMC6300_Enable>

	HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f000 fe11 	bl	8001a6c <HAL_Delay>

	uint16_t power = 25;
 8000e4a:	2319      	movs	r3, #25
 8000e4c:	81fb      	strh	r3, [r7, #14]
	for(; power<2000; power++)
 8000e4e:	e01c      	b.n	8000e8a <main+0x9e>
	{
		TMC6300_SetPhaseAngle(&bldc, 0, power);
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	461a      	mov	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	4848      	ldr	r0, [pc, #288]	; (8000f78 <main+0x18c>)
 8000e58:	f7ff ff3c 	bl	8000cd4 <TMC6300_SetPhaseAngle>
		if(HAL_GPIO_ReadPin(BLDC_DIAG_GPIO_Port, BLDC_DIAG_Pin))
 8000e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f001 fe56 	bl	8002b14 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <main+0x90>
		{
			HAL_GPIO_WritePin(BLDC_ACTIVE_LED_GPIO_Port, BLDC_ACTIVE_LED_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4841      	ldr	r0, [pc, #260]	; (8000f7c <main+0x190>)
 8000e76:	f001 fe65 	bl	8002b44 <HAL_GPIO_WritePin>
			break;
 8000e7a:	e00a      	b.n	8000e92 <main+0xa6>
		}
		HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e80:	f000 fdf4 	bl	8001a6c <HAL_Delay>
	for(; power<2000; power++)
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	3301      	adds	r3, #1
 8000e88:	81fb      	strh	r3, [r7, #14]
 8000e8a:	89fb      	ldrh	r3, [r7, #14]
 8000e8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e90:	d3de      	bcc.n	8000e50 <main+0x64>
	}

	power -= 10;
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	3b0a      	subs	r3, #10
 8000e96:	81fb      	strh	r3, [r7, #14]
	TMC6300_SetPhaseAngle(&bldc, 0, power);
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4836      	ldr	r0, [pc, #216]	; (8000f78 <main+0x18c>)
 8000ea0:	f7ff ff18 	bl	8000cd4 <TMC6300_SetPhaseAngle>

	// reset
	TMC6300_Disable(&bldc);
 8000ea4:	4834      	ldr	r0, [pc, #208]	; (8000f78 <main+0x18c>)
 8000ea6:	f7ff feeb 	bl	8000c80 <TMC6300_Disable>
	HAL_Delay(1000);
 8000eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eae:	f000 fddd 	bl	8001a6c <HAL_Delay>
	TMC6300_Enable(&bldc);
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <main+0x18c>)
 8000eb4:	f7ff feb1 	bl	8000c1a <TMC6300_Enable>
	HAL_Delay(200);
 8000eb8:	20c8      	movs	r0, #200	; 0xc8
 8000eba:	f000 fdd7 	bl	8001a6c <HAL_Delay>
	HAL_GPIO_WritePin(BLDC_ACTIVE_LED_GPIO_Port, BLDC_ACTIVE_LED_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec4:	482d      	ldr	r0, [pc, #180]	; (8000f7c <main+0x190>)
 8000ec6:	f001 fe3d 	bl	8002b44 <HAL_GPIO_WritePin>

	for(; power<200; power++)
 8000eca:	e01c      	b.n	8000f06 <main+0x11a>
	{
		TMC6300_SetPhaseAngle(&bldc, 0, power);
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <main+0x18c>)
 8000ed4:	f7ff fefe 	bl	8000cd4 <TMC6300_SetPhaseAngle>
		if(HAL_GPIO_ReadPin(BLDC_DIAG_GPIO_Port, BLDC_DIAG_Pin))
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f001 fe18 	bl	8002b14 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <main+0x10c>
		{
			HAL_GPIO_WritePin(BLDC_ACTIVE_LED_GPIO_Port, BLDC_ACTIVE_LED_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <main+0x190>)
 8000ef2:	f001 fe27 	bl	8002b44 <HAL_GPIO_WritePin>
			break;
 8000ef6:	e009      	b.n	8000f0c <main+0x120>
		}
		HAL_Delay(400);
 8000ef8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000efc:	f000 fdb6 	bl	8001a6c <HAL_Delay>
	for(; power<200; power++)
 8000f00:	89fb      	ldrh	r3, [r7, #14]
 8000f02:	3301      	adds	r3, #1
 8000f04:	81fb      	strh	r3, [r7, #14]
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	2bc7      	cmp	r3, #199	; 0xc7
 8000f0a:	d9df      	bls.n	8000ecc <main+0xe0>
	}

	power -= 20;
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	3b14      	subs	r3, #20
 8000f10:	81fb      	strh	r3, [r7, #14]
	TMC6300_SetPhaseAngle(&bldc, 0, power);
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	461a      	mov	r2, r3
 8000f16:	2100      	movs	r1, #0
 8000f18:	4817      	ldr	r0, [pc, #92]	; (8000f78 <main+0x18c>)
 8000f1a:	f7ff fedb 	bl	8000cd4 <TMC6300_SetPhaseAngle>

	// reset
	TMC6300_Disable(&bldc);
 8000f1e:	4816      	ldr	r0, [pc, #88]	; (8000f78 <main+0x18c>)
 8000f20:	f7ff feae 	bl	8000c80 <TMC6300_Disable>
	HAL_Delay(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f000 fda0 	bl	8001a6c <HAL_Delay>
	TMC6300_Enable(&bldc);
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <main+0x18c>)
 8000f2e:	f7ff fe74 	bl	8000c1a <TMC6300_Enable>
	HAL_Delay(400);
 8000f32:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f36:	f000 fd99 	bl	8001a6c <HAL_Delay>
	HAL_GPIO_WritePin(BLDC_ACTIVE_LED_GPIO_Port, BLDC_ACTIVE_LED_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <main+0x190>)
 8000f42:	f001 fdff 	bl	8002b44 <HAL_GPIO_WritePin>

	uint32_t arcsecond = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		TMC6300_SetPhaseAngle(&bldc, arcsecond, power);
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <main+0x18c>)
 8000f52:	f7ff febf 	bl	8000cd4 <TMC6300_SetPhaseAngle>
		arcsecond += 450;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8000f5c:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=0; i<125; i++);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e002      	b.n	8000f6a <main+0x17e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b7c      	cmp	r3, #124	; 0x7c
 8000f6e:	d9f9      	bls.n	8000f64 <main+0x178>
		TMC6300_SetPhaseAngle(&bldc, arcsecond, power);
 8000f70:	e7eb      	b.n	8000f4a <main+0x15e>
 8000f72:	bf00      	nop
 8000f74:	2000028c 	.word	0x2000028c
 8000f78:	20000360 	.word	0x20000360
 8000f7c:	48000400 	.word	0x48000400

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09c      	sub	sp, #112	; 0x70
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f8a:	2228      	movs	r2, #40	; 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 f970 	bl	8006274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 f962 	bl	8006274 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fdcd 	bl	8002b74 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000fe0:	f000 fa32 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ffe:	2102      	movs	r1, #2
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fdf5 	bl	8003bf0 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800100c:	f000 fa1c 	bl	8001448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 8001010:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8001014:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV16;
 800101a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4618      	mov	r0, r3
 8001024:	f003 f81c 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800102e:	f000 fa0b 	bl	8001448 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3770      	adds	r7, #112	; 0x70
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <MX_ADC1_Init+0x124>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <MX_ADC1_Init+0x124>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <MX_ADC1_Init+0x124>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <MX_ADC1_Init+0x124>)
 8001068:	2201      	movs	r2, #1
 800106a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800106c:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <MX_ADC1_Init+0x124>)
 800106e:	2201      	movs	r2, #1
 8001070:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <MX_ADC1_Init+0x124>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <MX_ADC1_Init+0x124>)
 800107c:	2200      	movs	r2, #0
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001080:	4b37      	ldr	r3, [pc, #220]	; (8001160 <MX_ADC1_Init+0x124>)
 8001082:	2201      	movs	r2, #1
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <MX_ADC1_Init+0x124>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800108c:	4b34      	ldr	r3, [pc, #208]	; (8001160 <MX_ADC1_Init+0x124>)
 800108e:	2205      	movs	r2, #5
 8001090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <MX_ADC1_Init+0x124>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <MX_ADC1_Init+0x124>)
 800109c:	2204      	movs	r2, #4
 800109e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <MX_ADC1_Init+0x124>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_ADC1_Init+0x124>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	482c      	ldr	r0, [pc, #176]	; (8001160 <MX_ADC1_Init+0x124>)
 80010ae:	f000 fd01 	bl	8001ab4 <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80010b8:	f000 f9c6 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010bc:	2303      	movs	r3, #3
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80010c8:	2304      	movs	r3, #4
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4821      	ldr	r0, [pc, #132]	; (8001160 <MX_ADC1_Init+0x124>)
 80010da:	f000 fe71 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010e4:	f000 f9b0 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <MX_ADC1_Init+0x124>)
 80010f6:	f000 fe63 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001100:	f000 f9a2 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001104:	2305      	movs	r3, #5
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001108:	2303      	movs	r3, #3
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	; (8001160 <MX_ADC1_Init+0x124>)
 8001112:	f000 fe55 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800111c:	f000 f994 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001120:	230a      	movs	r3, #10
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001124:	2304      	movs	r3, #4
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_ADC1_Init+0x124>)
 800112e:	f000 fe47 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001138:	f000 f986 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800113c:	230b      	movs	r3, #11
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001140:	2305      	movs	r3, #5
 8001142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_ADC1_Init+0x124>)
 800114a:	f000 fe39 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001154:	f000 f978 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001f8 	.word	0x200001f8

08001164 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b09a      	sub	sp, #104	; 0x68
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001184:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	222c      	movs	r2, #44	; 0x2c
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 f868 	bl	8006274 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a4:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011a6:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <MX_TIM1_Init+0x154>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250-1;
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011b8:	22f9      	movs	r2, #249	; 0xf9
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ce:	4839      	ldr	r0, [pc, #228]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011d0:	f003 f8ca 	bl	8004368 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011da:	f000 f935 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e8:	4619      	mov	r1, r3
 80011ea:	4832      	ldr	r0, [pc, #200]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011ec:	f003 fd90 	bl	8004d10 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011f6:	f000 f927 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fa:	482e      	ldr	r0, [pc, #184]	; (80012b4 <MX_TIM1_Init+0x150>)
 80011fc:	f003 f97f 	bl	80044fe <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001206:	f000 f91f 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001216:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800121a:	4619      	mov	r1, r3
 800121c:	4825      	ldr	r0, [pc, #148]	; (80012b4 <MX_TIM1_Init+0x150>)
 800121e:	f004 fb43 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001228:	f000 f90e 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124c:	2208      	movs	r2, #8
 800124e:	4619      	mov	r1, r3
 8001250:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_TIM1_Init+0x150>)
 8001252:	f003 fc49 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800125c:	f000 f8f4 	bl	8001448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM1_Init+0x150>)
 8001296:	f004 fb6d 	bl	8005974 <HAL_TIMEx_ConfigBreakDeadTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012a0:	f000 f8d2 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM1_Init+0x150>)
 80012a6:	f000 f9a1 	bl	80015ec <HAL_TIM_MspPostInit>

}
 80012aa:	bf00      	nop
 80012ac:	3768      	adds	r7, #104	; 0x68
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000028c 	.word	0x2000028c
 80012b8:	40012c00 	.word	0x40012c00

080012bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_USART3_UART_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART3_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART3_UART_Init+0x58>)
 8001300:	f004 fbf3 	bl	8005aea <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 f89d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002d8 	.word	0x200002d8
 8001318:	40004800 	.word	0x40004800

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_DMA_Init+0x38>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <MX_DMA_Init+0x38>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_DMA_Init+0x38>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	200b      	movs	r0, #11
 8001340:	f001 f935 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001344:	200b      	movs	r0, #11
 8001346:	f001 f94e 	bl	80025e6 <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <MX_GPIO_Init+0xe8>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a33      	ldr	r2, [pc, #204]	; (8001440 <MX_GPIO_Init+0xe8>)
 8001374:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <MX_GPIO_Init+0xe8>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <MX_GPIO_Init+0xe8>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <MX_GPIO_Init+0xe8>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_GPIO_Init+0xe8>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a27      	ldr	r2, [pc, #156]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6153      	str	r3, [r2, #20]
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLDC_ACTIVE_LED_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f241 0130 	movw	r1, #4144	; 0x1030
 80013bc:	4821      	ldr	r0, [pc, #132]	; (8001444 <MX_GPIO_Init+0xec>)
 80013be:	f001 fbc1 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLDC_WL_Pin|BLDC_VL_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013c8:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_GPIO_Init+0xec>)
 80013ca:	f001 fbbb 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLDC_WH_Pin|BLDC_VH_Pin|BLDC_VIO_STBY_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f001 fbb4 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLDC_ACTIVE_LED_Pin BLDC_WL_Pin BLDC_VL_Pin PB4
                           PB5 */
  GPIO_InitStruct.Pin = BLDC_ACTIVE_LED_Pin|BLDC_WL_Pin|BLDC_VL_Pin|GPIO_PIN_4
 80013dc:	f247 0330 	movw	r3, #28720	; 0x7030
 80013e0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_GPIO_Init+0xec>)
 80013f6:	f001 fa1b 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLDC_WH_Pin BLDC_VH_Pin BLDC_VIO_STBY_Pin */
  GPIO_InitStruct.Pin = BLDC_WH_Pin|BLDC_VH_Pin|BLDC_VIO_STBY_Pin;
 80013fa:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80013fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f001 fa0b 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLDC_DIAG_Pin */
  GPIO_InitStruct.Pin = BLDC_DIAG_Pin;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLDC_DIAG_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f001 f9fd 	bl	8002830 <HAL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_MspInit+0x44>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_MspInit+0x44>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_MspInit+0x44>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x44>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x44>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x44>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014bc:	d164      	bne.n	8001588 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a33      	ldr	r2, [pc, #204]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	6153      	str	r3, [r2, #20]
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_ADC_MspInit+0xf4>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN4
    PA4     ------> ADC1_IN5
    PA6     ------> ADC1_IN10
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = BLDC_CURRENT_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001506:	235c      	movs	r3, #92	; 0x5c
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	2303      	movs	r3, #3
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f001 f988 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4818      	ldr	r0, [pc, #96]	; (8001594 <HAL_ADC_MspInit+0xf8>)
 8001534:	f001 f97c 	bl	8002830 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_ADC_MspInit+0x100>)
 800153c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 800155a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800155e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001562:	2220      	movs	r2, #32
 8001564:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 800156e:	f001 f854 	bl	800261a <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001578:	f7ff ff66 	bl	8001448 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_ADC_MspInit+0xfc>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400
 8001598:	20000248 	.word	0x20000248
 800159c:	40020008 	.word	0x40020008

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_TIM_Base_MspInit+0x44>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d113      	bne.n	80015da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_TIM_Base_MspInit+0x48>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_TIM_Base_MspInit+0x48>)
 80015b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_TIM_Base_MspInit+0x48>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	201a      	movs	r0, #26
 80015d0:	f000 ffed 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80015d4:	201a      	movs	r0, #26
 80015d6:	f001 f806 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_TIM_MspPostInit+0xa0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d13a      	bne.n	8001684 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_TIM_MspPostInit+0xa4>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_TIM_MspPostInit+0xa4>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6153      	str	r3, [r2, #20]
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_TIM_MspPostInit+0xa4>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_MspPostInit+0xa4>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_TIM_MspPostInit+0xa4>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_MspPostInit+0xa4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB15     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = BLDC_UL_Pin;
 800163e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001650:	2304      	movs	r3, #4
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLDC_UL_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <HAL_TIM_MspPostInit+0xa8>)
 800165c:	f001 f8e8 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLDC_UH_Pin;
 8001660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800166e:	2301      	movs	r3, #1
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001672:	2306      	movs	r3, #6
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLDC_UH_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f001 f8d6 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40021000 	.word	0x40021000
 8001694:	48000400 	.word	0x48000400

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d128      	bne.n	800170c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB8     ------> USART3_RX
    PB9     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016fc:	2307      	movs	r3, #7
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0x84>)
 8001708:	f001 f892 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40004800 	.word	0x40004800
 8001718:	40021000 	.word	0x40021000
 800171c:	48000400 	.word	0x48000400

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f95e 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Channel1_IRQHandler+0x10>)
 800177a:	f000 ff95 	bl	80026a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000248 	.word	0x20000248

08001788 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800178e:	f003 f88b 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000028c 	.word	0x2000028c

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b6:	f004 fd33 	bl	8006220 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
	return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
	}

return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e009      	b.n	8001840 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf1      	blt.n	800182c <_write+0x12>
	}
	return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_close>:

int _close(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187a:	605a      	str	r2, [r3, #4]
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_isatty>:

int _isatty(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f004 fc98 	bl	8006220 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20004000 	.word	0x20004000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000384 	.word	0x20000384
 8001924:	200003a0 	.word	0x200003a0

08001928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <LoopForever+0x6>)
  ldr r1, =_edata
 8001952:	490e      	ldr	r1, [pc, #56]	; (800198c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <LoopForever+0xe>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001968:	4c0b      	ldr	r4, [pc, #44]	; (8001998 <LoopForever+0x16>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001976:	f7ff ffd7 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197a:	f004 fc57 	bl	800622c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197e:	f7ff fa35 	bl	8000dec <main>

08001982 <LoopForever>:

LoopForever:
    b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001984:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001990:	0800a764 	.word	0x0800a764
  ldr r2, =_sbss
 8001994:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001998:	2000039c 	.word	0x2000039c

0800199c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x28>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x28>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 fdf1 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2007      	movs	r0, #7
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fd4a 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fe09 	bl	8002602 <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 fdd1 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000388 	.word	0x20000388

08001a54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000388 	.word	0x20000388

08001a6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b09a      	sub	sp, #104	; 0x68
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e169      	b.n	8001da8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d176      	bne.n	8001bd4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d152      	bne.n	8001b94 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fcc7 	bl	800149c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13b      	bne.n	8001b94 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fc05 	bl	800232c <ADC_Disable>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d12f      	bne.n	8001b94 <HAL_ADC_Init+0xe0>
 8001b34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d12b      	bne.n	8001b94 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b44:	f023 0302 	bic.w	r3, r3, #2
 8001b48:	f043 0202 	orr.w	r2, r3, #2
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b5e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b70:	4b8f      	ldr	r3, [pc, #572]	; (8001db0 <HAL_ADC_Init+0x2fc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a8f      	ldr	r2, [pc, #572]	; (8001db4 <HAL_ADC_Init+0x300>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0c9a      	lsrs	r2, r3, #18
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b86:	e002      	b.n	8001b8e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f9      	bne.n	8001b88 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb0:	d110      	bne.n	8001bd4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f023 0312 	bic.w	r3, r3, #18
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 80d6 	bne.w	8001d8e <HAL_ADC_Init+0x2da>
 8001be2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 80d1 	bne.w	8001d8e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80c9 	bne.w	8001d8e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c04:	f043 0202 	orr.w	r2, r3, #2
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_ADC_Init+0x304>)
 8001c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_ADC_Init+0x180>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_Init+0x180>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_ADC_Init+0x182>
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11c      	bne.n	8001c74 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_Init+0x1a8>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_Init+0x1a8>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <HAL_ADC_Init+0x1aa>
 8001c5c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e5b      	ldrb	r3, [r3, #25]
 8001c78:	035b      	lsls	r3, r3, #13
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d002      	beq.n	8001c88 <HAL_ADC_Init+0x1d4>
 8001c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c86:	e000      	b.n	8001c8a <HAL_ADC_Init+0x1d6>
 8001c88:	2200      	movs	r2, #0
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e5b      	ldrb	r3, [r3, #25]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	045a      	lsls	r2, r3, #17
 8001cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8001cc2:	e00d      	b.n	8001ce0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d007      	beq.n	8001cf8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d114      	bne.n	8001d30 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d14:	f023 0302 	bic.w	r3, r3, #2
 8001d18:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7e1b      	ldrb	r3, [r3, #24]
 8001d1e:	039a      	lsls	r2, r3, #14
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_ADC_Init+0x308>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d40:	430b      	orrs	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f023 010f 	bic.w	r1, r3, #15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020f 	bic.w	r2, r2, #15
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f023 0303 	bic.w	r3, r3, #3
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d8c:	e00a      	b.n	8001da4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f023 0312 	bic.w	r3, r3, #18
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001da4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3768      	adds	r7, #104	; 0x68
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000000 	.word	0x20000000
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	50000300 	.word	0x50000300
 8001dbc:	fff0c007 	.word	0xfff0c007

08001dc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b09b      	sub	sp, #108	; 0x6c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x22>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e299      	b.n	8002316 <HAL_ADC_ConfigChannel+0x556>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 827d 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d81c      	bhi.n	8001e3c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	461a      	mov	r2, r3
 8001e16:	231f      	movs	r3, #31
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	4019      	ands	r1, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3a:	e063      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d81e      	bhi.n	8001e82 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	3b1e      	subs	r3, #30
 8001e58:	221f      	movs	r2, #31
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	4019      	ands	r1, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e80:	e040      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b0e      	cmp	r3, #14
 8001e88:	d81e      	bhi.n	8001ec8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	3b3c      	subs	r3, #60	; 0x3c
 8001e9e:	221f      	movs	r2, #31
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4019      	ands	r1, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	3b3c      	subs	r3, #60	; 0x3c
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec6:	e01d      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	3b5a      	subs	r3, #90	; 0x5a
 8001edc:	221f      	movs	r2, #31
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4019      	ands	r1, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	3b5a      	subs	r3, #90	; 0x5a
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 80e5 	bne.w	80020de <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d91c      	bls.n	8001f56 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6999      	ldr	r1, [r3, #24]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4019      	ands	r1, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	619a      	str	r2, [r3, #24]
 8001f54:	e019      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6959      	ldr	r1, [r3, #20]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6898      	ldr	r0, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d84f      	bhi.n	800204c <HAL_ADC_ConfigChannel+0x28c>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fe7 	.word	0x08001fe7
 8001fbc:	08002009 	.word	0x08002009
 8001fc0:	0800202b 	.word	0x0800202b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fca:	4b99      	ldr	r3, [pc, #612]	; (8002230 <HAL_ADC_ConfigChannel+0x470>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	0691      	lsls	r1, r2, #26
 8001fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fe4:	e07e      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fec:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_ADC_ConfigChannel+0x470>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	0691      	lsls	r1, r2, #26
 8001ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002004:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002006:	e06d      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800200e:	4b88      	ldr	r3, [pc, #544]	; (8002230 <HAL_ADC_ConfigChannel+0x470>)
 8002010:	4013      	ands	r3, r2
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	0691      	lsls	r1, r2, #26
 8002018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800201a:	430a      	orrs	r2, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002026:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002028:	e05c      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002030:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <HAL_ADC_ConfigChannel+0x470>)
 8002032:	4013      	ands	r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	0691      	lsls	r1, r2, #26
 800203a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800203c:	430a      	orrs	r2, r1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002048:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800204a:	e04b      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800206e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002092:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d10a      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020dc:	e001      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80020e2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x344>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x344>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_ADC_ConfigChannel+0x346>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80ff 	bne.w	800230a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d00f      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	400a      	ands	r2, r1
 800212e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002132:	e049      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b09      	cmp	r3, #9
 8002154:	d91c      	bls.n	8002190 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6999      	ldr	r1, [r3, #24]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	3b1b      	subs	r3, #27
 8002168:	2207      	movs	r2, #7
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	4019      	ands	r1, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6898      	ldr	r0, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3b1b      	subs	r3, #27
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	e01b      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6959      	ldr	r1, [r3, #20]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	2207      	movs	r2, #7
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6898      	ldr	r0, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	fa00 f203 	lsl.w	r2, r0, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_ADC_ConfigChannel+0x474>)
 80021ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d014      	beq.n	800220a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021e4:	2b11      	cmp	r3, #17
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021f8:	2b12      	cmp	r3, #18
 80021fa:	f040 8086 	bne.w	800230a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d17f      	bne.n	800230a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10d      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x478>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d106      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x478>
 800222a:	2301      	movs	r3, #1
 800222c:	e005      	b.n	800223a <HAL_ADC_ConfigChannel+0x47a>
 800222e:	bf00      	nop
 8002230:	83fff000 	.word	0x83fff000
 8002234:	50000300 	.word	0x50000300
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d150      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800223e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x4a0>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x4a0>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4a2>
 8002260:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002262:	2b00      	cmp	r3, #0
 8002264:	d13c      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b10      	cmp	r3, #16
 800226c:	d11d      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x4ea>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002276:	d118      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002282:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_ADC_ConfigChannel+0x564>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_ADC_ConfigChannel+0x568>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0c9a      	lsrs	r2, r3, #18
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229a:	e002      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3b01      	subs	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022a8:	e02e      	b.n	8002308 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d10b      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x50a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ba:	d106      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c8:	e01e      	b.n	8002308 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d11a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022de:	e013      	b.n	8002308 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022f2:	e00a      	b.n	800230a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002306:	e000      	b.n	800230a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002308:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002316:	4618      	mov	r0, r3
 8002318:	376c      	adds	r7, #108	; 0x6c
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000
 8002328:	431bde83 	.word	0x431bde83

0800232c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d108      	bne.n	8002358 <ADC_Disable+0x2c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <ADC_Disable+0x2c>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <ADC_Disable+0x2e>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d047      	beq.n	80023ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030d 	and.w	r3, r3, #13
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10f      	bne.n	800238c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0202 	orr.w	r2, r2, #2
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2203      	movs	r2, #3
 8002382:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002384:	f7ff fb66 	bl	8001a54 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800238a:	e029      	b.n	80023e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f043 0210 	orr.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e023      	b.n	80023f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023a8:	f7ff fb54 	bl	8001a54 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d914      	bls.n	80023e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10d      	bne.n	80023e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e007      	b.n	80023f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d0dc      	beq.n	80023a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff3e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff8e 	bl	80024ec <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff31 	bl	800245c <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa2 	bl	8002554 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e037      	b.n	80026a0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002646:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800264a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8b4 	bl	80027f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}  
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2204      	movs	r2, #4
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d024      	beq.n	800271a <HAL_DMA_IRQHandler+0x72>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01f      	beq.n	800271a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	2104      	movs	r1, #4
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d06a      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002718:	e065      	b.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2202      	movs	r2, #2
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02c      	beq.n	8002784 <HAL_DMA_IRQHandler+0xdc>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d027      	beq.n	8002784 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020a 	bic.w	r2, r2, #10
 8002750:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2102      	movs	r1, #2
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d035      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002782:	e030      	b.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2208      	movs	r2, #8
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d028      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d023      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 020e 	bic.w	r2, r2, #14
 80027ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
    }
  }
}  
 80027e4:	e7ff      	b.n	80027e6 <HAL_DMA_IRQHandler+0x13e>
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <DMA_CalcBaseAndBitshift+0x34>)
 8002800:	4413      	add	r3, r2
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <DMA_CalcBaseAndBitshift+0x38>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a06      	ldr	r2, [pc, #24]	; (800282c <DMA_CalcBaseAndBitshift+0x3c>)
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	bffdfff8 	.word	0xbffdfff8
 8002828:	cccccccd 	.word	0xcccccccd
 800282c:	40020000 	.word	0x40020000

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e14e      	b.n	8002ade <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8140 	beq.w	8002ad8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d005      	beq.n	8002870 <HAL_GPIO_Init+0x40>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d130      	bne.n	80028d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a6:	2201      	movs	r2, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0201 	and.w	r2, r3, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d017      	beq.n	800290e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d123      	bne.n	8002962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	6939      	ldr	r1, [r7, #16]
 800295e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0203 	and.w	r2, r3, #3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 809a 	beq.w	8002ad8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6193      	str	r3, [r2, #24]
 80029b0:	4b52      	ldr	r3, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029bc:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e6:	d013      	beq.n	8002a10 <HAL_GPIO_Init+0x1e0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <HAL_GPIO_Init+0x2d4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00d      	beq.n	8002a0c <HAL_GPIO_Init+0x1dc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <HAL_GPIO_Init+0x1d8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <HAL_GPIO_Init+0x2dc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_GPIO_Init+0x1d4>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e006      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a04:	2305      	movs	r3, #5
 8002a06:	e004      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a10:	2300      	movs	r3, #0
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	f002 0203 	and.w	r2, r2, #3
 8002a18:	0092      	lsls	r2, r2, #2
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a22:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a54:	4a2e      	ldr	r2, [pc, #184]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a7e:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aa8:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aae:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f aea9 	bne.w	8002840 <HAL_GPIO_Init+0x10>
  }
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010000 	.word	0x40010000
 8002b04:	48000400 	.word	0x48000400
 8002b08:	48000800 	.word	0x48000800
 8002b0c:	48000c00 	.word	0x48000c00
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e001      	b.n	8002b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f001 b823 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 817d 	beq.w	8002eaa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bb0:	4bbc      	ldr	r3, [pc, #752]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d00c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bbc:	4bb9      	ldr	r3, [pc, #740]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d15c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x10e>
 8002bc8:	4bb6      	ldr	r3, [pc, #728]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d155      	bne.n	8002c82 <HAL_RCC_OscConfig+0x10e>
 8002bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_RCC_OscConfig+0x94>
 8002c02:	4ba8      	ldr	r3, [pc, #672]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e015      	b.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c30:	4b9c      	ldr	r3, [pc, #624]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c40:	fa92 f2a2 	rbit	r2, r2
 8002c44:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c4c:	fab2 f282 	clz	r2, r2
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f002 021f 	and.w	r2, r2, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 811f 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8116 	bne.w	8002ea8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f000 bfaf 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
 8002c94:	4b83      	ldr	r3, [pc, #524]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a82      	ldr	r2, [pc, #520]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e036      	b.n	8002d10 <HAL_RCC_OscConfig+0x19c>
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x158>
 8002cb2:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7b      	ldr	r2, [pc, #492]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b79      	ldr	r3, [pc, #484]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a78      	ldr	r2, [pc, #480]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e021      	b.n	8002d10 <HAL_RCC_OscConfig+0x19c>
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x184>
 8002cde:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a70      	ldr	r2, [pc, #448]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6d      	ldr	r2, [pc, #436]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0x19c>
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a69      	ldr	r2, [pc, #420]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a66      	ldr	r2, [pc, #408]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d10:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f023 020f 	bic.w	r2, r3, #15
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	495f      	ldr	r1, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d059      	beq.n	8002dee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fe8b 	bl	8001a54 <HAL_GetTick>
 8002d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe fe86 	bl	8001a54 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b64      	cmp	r3, #100	; 0x64
 8002d52:	d902      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f000 bf43 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
 8002d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_OscConfig+0x218>
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e015      	b.n	8002db8 <HAL_RCC_OscConfig+0x244>
 8002d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d90:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002da8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dbc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002dc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002dc4:	fa92 f2a2 	rbit	r2, r2
 8002dc8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002dcc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002dd0:	fab2 f282 	clz	r2, r2
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f002 021f 	and.w	r2, r2, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ab      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1d0>
 8002dec:	e05d      	b.n	8002eaa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fe31 	bl	8001a54 <HAL_GetTick>
 8002df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fe2c 	bl	8001a54 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d902      	bls.n	8002e0e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	f000 bee9 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
 8002e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e12:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2cc>
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	e015      	b.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
 8002e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e44:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e58:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e70:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e74:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e78:	fa92 f2a2 	rbit	r2, r2
 8002e7c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e80:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e84:	fab2 f282 	clz	r2, r2
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f002 021f 	and.w	r2, r2, #31
 8002e94:	2101      	movs	r1, #1
 8002e96:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ab      	bne.n	8002df8 <HAL_RCC_OscConfig+0x284>
 8002ea0:	e003      	b.n	8002eaa <HAL_RCC_OscConfig+0x336>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 817d 	beq.w	80031ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ec0:	4ba6      	ldr	r3, [pc, #664]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ecc:	4ba3      	ldr	r3, [pc, #652]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d172      	bne.n	8002fbe <HAL_RCC_OscConfig+0x44a>
 8002ed8:	4ba0      	ldr	r3, [pc, #640]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d16c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x44a>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ef6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3a0>
 8002f0e:	4b93      	ldr	r3, [pc, #588]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f26:	2302      	movs	r3, #2
 8002f28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f38:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f46:	fa92 f2a2 	rbit	r2, r2
 8002f4a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCC_OscConfig+0x410>
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f000 be2e 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b75      	ldr	r3, [pc, #468]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	21f8      	movs	r1, #248	; 0xf8
 8002f9a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fa2:	fa91 f1a1 	rbit	r1, r1
 8002fa6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002faa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fae:	fab1 f181 	clz	r1, r1
 8002fb2:	b2c9      	uxtb	r1, r1
 8002fb4:	408b      	lsls	r3, r1
 8002fb6:	4969      	ldr	r1, [pc, #420]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbc:	e0fd      	b.n	80031ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8088 	beq.w	80030e0 <HAL_RCC_OscConfig+0x56c>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fe2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fd2a 	bl	8001a54 <HAL_GetTick>
 8003000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fd25 	bl	8001a54 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	f000 bde2 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800302e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_RCC_OscConfig+0x4d8>
 8003046:	4b45      	ldr	r3, [pc, #276]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e013      	b.n	8003074 <HAL_RCC_OscConfig+0x500>
 800304c:	2302      	movs	r3, #2
 800304e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800305e:	2302      	movs	r3, #2
 8003060:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003064:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003070:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2202      	movs	r2, #2
 8003076:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800307a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800307e:	fa92 f2a2 	rbit	r2, r2
 8003082:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003086:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800308a:	fab2 f282 	clz	r2, r2
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f042 0220 	orr.w	r2, r2, #32
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f002 021f 	and.w	r2, r2, #31
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0af      	beq.n	8003006 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	21f8      	movs	r1, #248	; 0xf8
 80030bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030c4:	fa91 f1a1 	rbit	r1, r1
 80030c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030d0:	fab1 f181 	clz	r1, r1
 80030d4:	b2c9      	uxtb	r1, r1
 80030d6:	408b      	lsls	r3, r1
 80030d8:	4920      	ldr	r1, [pc, #128]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
 80030de:	e06c      	b.n	80031ba <HAL_RCC_OscConfig+0x646>
 80030e0:	2301      	movs	r3, #1
 80030e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fca2 	bl	8001a54 <HAL_GetTick>
 8003110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe fc9d 	bl	8001a54 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d902      	bls.n	800312c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	f000 bd5a 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
 800312c:	2302      	movs	r3, #2
 800312e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800313e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d104      	bne.n	8003160 <HAL_RCC_OscConfig+0x5ec>
 8003156:	4b01      	ldr	r3, [pc, #4]	; (800315c <HAL_RCC_OscConfig+0x5e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e015      	b.n	8003188 <HAL_RCC_OscConfig+0x614>
 800315c:	40021000 	.word	0x40021000
 8003160:	2302      	movs	r3, #2
 8003162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003172:	2302      	movs	r3, #2
 8003174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003178:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003184:	4bc8      	ldr	r3, [pc, #800]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2202      	movs	r2, #2
 800318a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800318e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003192:	fa92 f2a2 	rbit	r2, r2
 8003196:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800319a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f002 021f 	and.w	r2, r2, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ad      	bne.n	8003116 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8110 	beq.w	80033f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d079      	beq.n	80032d4 <HAL_RCC_OscConfig+0x760>
 80031e0:	2301      	movs	r3, #1
 80031e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	4bab      	ldr	r3, [pc, #684]	; (80034ac <HAL_RCC_OscConfig+0x938>)
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	461a      	mov	r2, r3
 8003206:	2301      	movs	r3, #1
 8003208:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fc23 	bl	8001a54 <HAL_GetTick>
 800320e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003214:	f7fe fc1e 	bl	8001a54 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d902      	bls.n	800322a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	f000 bcdb 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
 800322a:	2302      	movs	r3, #2
 800322c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003244:	2202      	movs	r2, #2
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003268:	2202      	movs	r2, #2
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003282:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003284:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 8003286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003290:	2102      	movs	r1, #2
 8003292:	6019      	str	r1, [r3, #0]
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f1a3 	rbit	r1, r3
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032aa:	6019      	str	r1, [r3, #0]
  return result;
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0a0      	beq.n	8003214 <HAL_RCC_OscConfig+0x6a0>
 80032d2:	e08d      	b.n	80033f0 <HAL_RCC_OscConfig+0x87c>
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032f6:	601a      	str	r2, [r3, #0]
  return result;
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003300:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_OscConfig+0x938>)
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	461a      	mov	r2, r3
 8003312:	2300      	movs	r3, #0
 8003314:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fe fb9d 	bl	8001a54 <HAL_GetTick>
 800331a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fb98 	bl	8001a54 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d902      	bls.n	8003336 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	f000 bc55 	b.w	8003be0 <HAL_RCC_OscConfig+0x106c>
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003362:	2202      	movs	r2, #2
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003386:	2202      	movs	r2, #2
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033ae:	2102      	movs	r1, #2
 80033b0:	6019      	str	r1, [r3, #0]
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f1a3 	rbit	r1, r3
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033c8:	6019      	str	r1, [r3, #0]
  return result;
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d197      	bne.n	8003320 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 81a1 	beq.w	8003748 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340c:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	61d3      	str	r3, [r2, #28]
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800343e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_OscConfig+0x93c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_RCC_OscConfig+0x93c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_RCC_OscConfig+0x93c>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe faf9 	bl	8001a54 <HAL_GetTick>
 8003462:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	e009      	b.n	800347c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fe faf4 	bl	8001a54 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	; 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e3b1      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_OscConfig+0x93c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10d      	bne.n	80034b4 <HAL_RCC_OscConfig+0x940>
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4a02      	ldr	r2, [pc, #8]	; (80034a8 <HAL_RCC_OscConfig+0x934>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6213      	str	r3, [r2, #32]
 80034a4:	e03c      	b.n	8003520 <HAL_RCC_OscConfig+0x9ac>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	10908120 	.word	0x10908120
 80034b0:	40007000 	.word	0x40007000
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <HAL_RCC_OscConfig+0x96a>
 80034c4:	4bc1      	ldr	r3, [pc, #772]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4ac0      	ldr	r2, [pc, #768]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	4bbe      	ldr	r3, [pc, #760]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4abd      	ldr	r2, [pc, #756]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034d6:	f023 0304 	bic.w	r3, r3, #4
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e020      	b.n	8003520 <HAL_RCC_OscConfig+0x9ac>
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x994>
 80034ee:	4bb7      	ldr	r3, [pc, #732]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4ab6      	ldr	r2, [pc, #728]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	4bb4      	ldr	r3, [pc, #720]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4ab3      	ldr	r2, [pc, #716]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6213      	str	r3, [r2, #32]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x9ac>
 8003508:	4bb0      	ldr	r3, [pc, #704]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4aaf      	ldr	r2, [pc, #700]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	4bad      	ldr	r3, [pc, #692]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4aac      	ldr	r2, [pc, #688]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8081 	beq.w	8003634 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe fa8f 	bl	8001a54 <HAL_GetTick>
 8003536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353c:	f7fe fa8a 	bl	8001a54 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e345      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
 8003554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003558:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800355c:	2202      	movs	r2, #2
 800355e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003580:	2202      	movs	r2, #2
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800359a:	601a      	str	r2, [r3, #0]
  return result;
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d102      	bne.n	80035c0 <HAL_RCC_OscConfig+0xa4c>
 80035ba:	4b84      	ldr	r3, [pc, #528]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	e013      	b.n	80035e8 <HAL_RCC_OscConfig+0xa74>
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	4b79      	ldr	r3, [pc, #484]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035f0:	2102      	movs	r1, #2
 80035f2:	6011      	str	r1, [r2, #0]
 80035f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	fa92 f1a2 	rbit	r1, r2
 8003602:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003606:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800360a:	6011      	str	r1, [r2, #0]
  return result;
 800360c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003610:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d084      	beq.n	800353c <HAL_RCC_OscConfig+0x9c8>
 8003632:	e07f      	b.n	8003734 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003634:	f7fe fa0e 	bl	8001a54 <HAL_GetTick>
 8003638:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	e00b      	b.n	8003656 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fe fa09 	bl	8001a54 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e2c4      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800365e:	2202      	movs	r2, #2
 8003660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	fa93 f2a3 	rbit	r2, r3
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003682:	2202      	movs	r2, #2
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800369c:	601a      	str	r2, [r3, #0]
  return result;
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0xb4e>
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0xb76>
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036ca:	2202      	movs	r2, #2
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036f2:	2102      	movs	r1, #2
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fa92 f1a2 	rbit	r1, r2
 8003704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003708:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800370c:	6011      	str	r1, [r2, #0]
  return result;
 800370e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003712:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d184      	bne.n	800363e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003734:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373c:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8242 	beq.w	8003bde <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800375a:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCC_OscConfig+0xc58>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	f000 8213 	beq.w	8003b8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b02      	cmp	r3, #2
 8003776:	f040 8162 	bne.w	8003a3e <HAL_RCC_OscConfig+0xeca>
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	fa93 f2a3 	rbit	r2, r3
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800379e:	601a      	str	r2, [r3, #0]
  return result;
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	2300      	movs	r3, #0
 80037be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe f948 	bl	8001a54 <HAL_GetTick>
 80037c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c8:	e00c      	b.n	80037e4 <HAL_RCC_OscConfig+0xc70>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe f940 	bl	8001a54 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1fd      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003808:	601a      	str	r2, [r3, #0]
  return result;
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003812:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_RCC_OscConfig+0xcba>
 8003828:	4bb0      	ldr	r3, [pc, #704]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	e027      	b.n	800387e <HAL_RCC_OscConfig+0xd0a>
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800383a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	fa93 f2a3 	rbit	r2, r3
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800385c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	4b9c      	ldr	r3, [pc, #624]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003882:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003886:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800388a:	6011      	str	r1, [r2, #0]
 800388c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003890:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	fa92 f1a2 	rbit	r1, r2
 800389a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800389e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038a2:	6011      	str	r1, [r2, #0]
  return result;
 80038a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f042 0220 	orr.w	r2, r2, #32
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f002 021f 	and.w	r2, r2, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d182      	bne.n	80037d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	430b      	orrs	r3, r1
 80038ec:	497f      	ldr	r1, [pc, #508]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	fa93 f2a3 	rbit	r2, r3
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003916:	601a      	str	r2, [r3, #0]
  return result;
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003920:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800392c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	461a      	mov	r2, r3
 8003934:	2301      	movs	r3, #1
 8003936:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe f88c 	bl	8001a54 <HAL_GetTick>
 800393c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003940:	e009      	b.n	8003956 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe f887 	bl	8001a54 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e144      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
 8003956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800395e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f2a3 	rbit	r2, r3
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800397a:	601a      	str	r2, [r3, #0]
  return result;
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003984:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_OscConfig+0xe2c>
 800399a:	4b54      	ldr	r3, [pc, #336]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	e027      	b.n	80039f0 <HAL_RCC_OscConfig+0xe7c>
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	fa93 f2a3 	rbit	r2, r3
 80039bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	fa93 f2a3 	rbit	r2, r3
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039f4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a02:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	fa92 f1a2 	rbit	r1, r2
 8003a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a14:	6011      	str	r1, [r2, #0]
  return result;
 8003a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	fab2 f282 	clz	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f002 021f 	and.w	r2, r2, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d082      	beq.n	8003942 <HAL_RCC_OscConfig+0xdce>
 8003a3c:	e0cf      	b.n	8003bde <HAL_RCC_OscConfig+0x106a>
 8003a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a42:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a62:	601a      	str	r2, [r3, #0]
  return result;
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fd ffe6 	bl	8001a54 <HAL_GetTick>
 8003a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd ffe1 	bl	8001a54 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e09e      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f2a3 	rbit	r2, r3
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ac6:	601a      	str	r2, [r3, #0]
  return result;
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ad0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d104      	bne.n	8003af0 <HAL_RCC_OscConfig+0xf7c>
 8003ae6:	4b01      	ldr	r3, [pc, #4]	; (8003aec <HAL_RCC_OscConfig+0xf78>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	e029      	b.n	8003b40 <HAL_RCC_OscConfig+0xfcc>
 8003aec:	40021000 	.word	0x40021000
 8003af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b02:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	fa93 f2a3 	rbit	r2, r3
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	fa93 f2a3 	rbit	r2, r3
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_OscConfig+0x1078>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b44:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b52:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	fa92 f1a2 	rbit	r1, r2
 8003b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b64:	6011      	str	r1, [r2, #0]
  return result;
 8003b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	fab2 f282 	clz	r2, r2
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	f042 0220 	orr.w	r2, r2, #32
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	f002 021f 	and.w	r2, r2, #31
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f202 	lsl.w	r2, r1, r2
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d180      	bne.n	8003a8e <HAL_RCC_OscConfig+0xf1a>
 8003b8c:	e027      	b.n	8003bde <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e01e      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_OscConfig+0x1078>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003baa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b09e      	sub	sp, #120	; 0x78
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e162      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d910      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	498b      	ldr	r1, [pc, #556]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b89      	ldr	r3, [pc, #548]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e14a      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b82      	ldr	r3, [pc, #520]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	497f      	ldr	r1, [pc, #508]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80dc 	beq.w	8003e1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d13c      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xf6>
 8003c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xa6>
 8003c90:	4b6f      	ldr	r3, [pc, #444]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e00f      	b.n	8003cb6 <HAL_RCC_ClockConfig+0xc6>
 8003c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8003caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb2:	4b67      	ldr	r3, [pc, #412]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cba:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cbe:	fa92 f2a2 	rbit	r2, r2
 8003cc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f002 021f 	and.w	r2, r2, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d17b      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0f3      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d13c      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x178>
 8003cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x128>
 8003d12:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e00f      	b.n	8003d38 <HAL_RCC_ClockConfig+0x148>
 8003d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	647b      	str	r3, [r7, #68]	; 0x44
 8003d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f042 0220 	orr.w	r2, r2, #32
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f002 021f 	and.w	r2, r2, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d13a      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b2      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x1a0>
 8003d8a:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e00d      	b.n	8003dac <HAL_RCC_ClockConfig+0x1bc>
 8003d90:	2302      	movs	r3, #2
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2202      	movs	r2, #2
 8003dae:	61ba      	str	r2, [r7, #24]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	fa92 f2a2 	rbit	r2, r2
 8003db6:	617a      	str	r2, [r7, #20]
  return result;
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f042 0220 	orr.w	r2, r2, #32
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f002 021f 	and.w	r2, r2, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e079      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	491a      	ldr	r1, [pc, #104]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fd fe32 	bl	8001a54 <HAL_GetTick>
 8003df0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fd fe2e 	bl	8001a54 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e061      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d214      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0207 	bic.w	r2, r3, #7
 8003e32:	4906      	ldr	r1, [pc, #24]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e040      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	491a      	ldr	r1, [pc, #104]	; (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4912      	ldr	r1, [pc, #72]	; (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e92:	f000 f829 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003e96:	4601      	mov	r1, r0
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea0:	22f0      	movs	r2, #240	; 0xf0
 8003ea2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	fa92 f2a2 	rbit	r2, r2
 8003eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	fab2 f282 	clz	r2, r2
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	40d3      	lsrs	r3, r2
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x2ec>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	fa21 f303 	lsr.w	r3, r1, r3
 8003ebe:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fd80 	bl	80019cc <HAL_InitTick>
  
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3778      	adds	r7, #120	; 0x78
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	0800a348 	.word	0x0800a348
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b08b      	sub	sp, #44	; 0x2c
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x30>
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x36>
 8003f16:	e03c      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f1a:	623b      	str	r3, [r7, #32]
      break;
 8003f1c:	e03c      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	fa92 f2a2 	rbit	r2, r2
 8003f30:	607a      	str	r2, [r7, #4]
  return result;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	40d3      	lsrs	r3, r2
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	fa92 f2a2 	rbit	r2, r2
 8003f54:	60fa      	str	r2, [r7, #12]
  return result;
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	fab2 f282 	clz	r2, r2
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	40d3      	lsrs	r3, r2
 8003f60:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f70:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	e004      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	e002      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f94:	623b      	str	r3, [r7, #32]
      break;
 8003f96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f98:	6a3b      	ldr	r3, [r7, #32]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	372c      	adds	r7, #44	; 0x2c
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	0800a360 	.word	0x0800a360
 8003fb4:	0800a370 	.word	0x0800a370
 8003fb8:	003d0900 	.word	0x003d0900
 8003fbc:	007a1200 	.word	0x007a1200

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000000 	.word	0x20000000

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fde:	f7ff ffef 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	fa92 f2a2 	rbit	r2, r2
 8003ff8:	603a      	str	r2, [r7, #0]
  return result;
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	fab2 f282 	clz	r2, r2
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	40d3      	lsrs	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	0800a358 	.word	0x0800a358

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004022:	f7ff ffcd 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004026:	4601      	mov	r1, r0
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004030:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	fa92 f2a2 	rbit	r2, r2
 800403c:	603a      	str	r2, [r7, #0]
  return result;
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	40d3      	lsrs	r3, r2
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_RCC_GetPCLK2Freq+0x40>)
 800404a:	5cd3      	ldrb	r3, [r2, r3]
 800404c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	0800a358 	.word	0x0800a358

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b092      	sub	sp, #72	; 0x48
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80d4 	beq.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004084:	4b4e      	ldr	r3, [pc, #312]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10e      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a4a      	ldr	r2, [pc, #296]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409a:	61d3      	str	r3, [r2, #28]
 800409c:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fd fcc5 	bl	8001a54 <HAL_GetTick>
 80040ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fd fcc1 	bl	8001a54 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b64      	cmp	r3, #100	; 0x64
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e13c      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8084 	beq.w	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004108:	429a      	cmp	r2, r3
 800410a:	d07c      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	461a      	mov	r2, r3
 8004136:	2301      	movs	r3, #1
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004162:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd fc71 	bl	8001a54 <HAL_GetTick>
 8004172:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	e00a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fd fc6d 	bl	8001a54 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e0e6      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800418c:	2302      	movs	r3, #2
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
 8004198:	2302      	movs	r3, #2
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	61fb      	str	r3, [r7, #28]
  return result;
 80041a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d108      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041ba:	4b01      	ldr	r3, [pc, #4]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	e00d      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
 80041c8:	10908100 	.word	0x10908100
 80041cc:	2302      	movs	r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2202      	movs	r2, #2
 80041de:	613a      	str	r2, [r7, #16]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	fa92 f2a2 	rbit	r2, r2
 80041e6:	60fa      	str	r2, [r7, #12]
  return result;
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f002 021f 	and.w	r2, r2, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0b7      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004206:	4b57      	ldr	r3, [pc, #348]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4954      	ldr	r1, [pc, #336]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004214:	4313      	orrs	r3, r2
 8004216:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004218:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b50      	ldr	r3, [pc, #320]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4a4f      	ldr	r2, [pc, #316]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004238:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	f023 0203 	bic.w	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4947      	ldr	r1, [pc, #284]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004246:	4313      	orrs	r3, r2
 8004248:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4940      	ldr	r1, [pc, #256]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004264:	4313      	orrs	r3, r2
 8004266:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	f023 0220 	bic.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	4938      	ldr	r1, [pc, #224]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004282:	4313      	orrs	r3, r2
 8004284:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4931      	ldr	r1, [pc, #196]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042b0:	4b2c      	ldr	r3, [pc, #176]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4929      	ldr	r1, [pc, #164]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80042ce:	4b25      	ldr	r3, [pc, #148]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	491a      	ldr	r1, [pc, #104]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	4913      	ldr	r1, [pc, #76]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004318:	4313      	orrs	r3, r2
 800431a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	490b      	ldr	r1, [pc, #44]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004336:	4313      	orrs	r3, r2
 8004338:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004354:	4313      	orrs	r3, r2
 8004356:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3748      	adds	r7, #72	; 0x48
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e049      	b.n	800440e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd f906 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fdae 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e033      	b.n	8004498 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <HAL_TIM_Base_Start+0x8c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_TIM_Base_Start+0x3e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d004      	beq.n	8004456 <HAL_TIM_Base_Start+0x3e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <HAL_TIM_Base_Start+0x90>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d115      	bne.n	8004482 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_TIM_Base_Start+0x94>)
 800445e:	4013      	ands	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b06      	cmp	r3, #6
 8004466:	d015      	beq.n	8004494 <HAL_TIM_Base_Start+0x7c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d011      	beq.n	8004494 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	e008      	b.n	8004494 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e000      	b.n	8004496 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	00010007 	.word	0x00010007

080044b0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	f241 1311 	movw	r3, #4369	; 0x1111
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_TIM_Base_Stop+0x38>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	f240 4344 	movw	r3, #1092	; 0x444
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_Base_Stop+0x38>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e049      	b.n	80045a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f841 	bl	80045ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f000 fce3 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <HAL_TIM_PWM_Start+0x24>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e03c      	b.n	800465e <HAL_TIM_PWM_Start+0x9e>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d109      	bne.n	80045fe <HAL_TIM_PWM_Start+0x3e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	e02f      	b.n	800465e <HAL_TIM_PWM_Start+0x9e>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d109      	bne.n	8004618 <HAL_TIM_PWM_Start+0x58>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e022      	b.n	800465e <HAL_TIM_PWM_Start+0x9e>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d109      	bne.n	8004632 <HAL_TIM_PWM_Start+0x72>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	e015      	b.n	800465e <HAL_TIM_PWM_Start+0x9e>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b10      	cmp	r3, #16
 8004636:	d109      	bne.n	800464c <HAL_TIM_PWM_Start+0x8c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e008      	b.n	800465e <HAL_TIM_PWM_Start+0x9e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	bf14      	ite	ne
 8004658:	2301      	movne	r3, #1
 800465a:	2300      	moveq	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e083      	b.n	800476e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start+0xb6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004674:	e023      	b.n	80046be <HAL_TIM_PWM_Start+0xfe>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b04      	cmp	r3, #4
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start+0xc6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004684:	e01b      	b.n	80046be <HAL_TIM_PWM_Start+0xfe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xd6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004694:	e013      	b.n	80046be <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xe6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a4:	e00b      	b.n	80046be <HAL_TIM_PWM_Start+0xfe>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xf6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b4:	e003      	b.n	80046be <HAL_TIM_PWM_Start+0xfe>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 ffcc 	bl	8005664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a29      	ldr	r2, [pc, #164]	; (8004778 <HAL_TIM_PWM_Start+0x1b8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_TIM_PWM_Start+0x134>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a28      	ldr	r2, [pc, #160]	; (800477c <HAL_TIM_PWM_Start+0x1bc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_TIM_PWM_Start+0x134>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_TIM_PWM_Start+0x1c0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_PWM_Start+0x134>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <HAL_TIM_PWM_Start+0x1c4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x138>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <HAL_TIM_PWM_Start+0x13a>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_TIM_PWM_Start+0x1b8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_TIM_PWM_Start+0x16c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d004      	beq.n	800472c <HAL_TIM_PWM_Start+0x16c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_TIM_PWM_Start+0x1bc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d115      	bne.n	8004758 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <HAL_TIM_PWM_Start+0x1c8>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d015      	beq.n	800476a <HAL_TIM_PWM_Start+0x1aa>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d011      	beq.n	800476a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e000      	b.n	800476c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800
 8004788:	00010007 	.word	0x00010007

0800478c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 ff60 	bl	8005664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3b      	ldr	r2, [pc, #236]	; (8004898 <HAL_TIM_PWM_Stop+0x10c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_TIM_PWM_Stop+0x40>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3a      	ldr	r2, [pc, #232]	; (800489c <HAL_TIM_PWM_Stop+0x110>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIM_PWM_Stop+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a38      	ldr	r2, [pc, #224]	; (80048a0 <HAL_TIM_PWM_Stop+0x114>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_PWM_Stop+0x40>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a37      	ldr	r2, [pc, #220]	; (80048a4 <HAL_TIM_PWM_Stop+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_PWM_Stop+0x44>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_TIM_PWM_Stop+0x46>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d017      	beq.n	8004806 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_TIM_PWM_Stop+0x7a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	f240 4344 	movw	r3, #1092	; 0x444
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <HAL_TIM_PWM_Stop+0x7a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_TIM_PWM_Stop+0xaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	f240 4344 	movw	r3, #1092	; 0x444
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <HAL_TIM_PWM_Stop+0xaa>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Stop+0xba>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004844:	e023      	b.n	800488e <HAL_TIM_PWM_Stop+0x102>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Stop+0xca>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004854:	e01b      	b.n	800488e <HAL_TIM_PWM_Stop+0x102>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Stop+0xda>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004864:	e013      	b.n	800488e <HAL_TIM_PWM_Stop+0x102>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Stop+0xea>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004874:	e00b      	b.n	800488e <HAL_TIM_PWM_Stop+0x102>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Stop+0xfa>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004884:	e003      	b.n	800488e <HAL_TIM_PWM_Stop+0x102>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0202 	mvn.w	r2, #2
 80048d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 faed 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fadf 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 faf0 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0204 	mvn.w	r2, #4
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fac3 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fab5 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fac6 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b08      	cmp	r3, #8
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b08      	cmp	r3, #8
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0208 	mvn.w	r2, #8
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2204      	movs	r2, #4
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa99 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa8b 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa9c 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d122      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0210 	mvn.w	r2, #16
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2208      	movs	r2, #8
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa6f 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa61 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa72 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa3b 	bl	8004ea2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d10e      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 f810 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d10e      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d107      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 f803 	bl	8005a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d10e      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa20 	bl	8004ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d10e      	bne.n	8004ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0220 	mvn.w	r2, #32
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 ffc3 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ff      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b14      	cmp	r3, #20
 8004b12:	f200 80f0 	bhi.w	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004cf7 	.word	0x08004cf7
 8004b24:	08004cf7 	.word	0x08004cf7
 8004b28:	08004cf7 	.word	0x08004cf7
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004cf7 	.word	0x08004cf7
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004cf7 	.word	0x08004cf7
 8004b3c:	08004bf3 	.word	0x08004bf3
 8004b40:	08004cf7 	.word	0x08004cf7
 8004b44:	08004cf7 	.word	0x08004cf7
 8004b48:	08004cf7 	.word	0x08004cf7
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004cf7 	.word	0x08004cf7
 8004b54:	08004cf7 	.word	0x08004cf7
 8004b58:	08004cf7 	.word	0x08004cf7
 8004b5c:	08004c75 	.word	0x08004c75
 8004b60:	08004cf7 	.word	0x08004cf7
 8004b64:	08004cf7 	.word	0x08004cf7
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004cb5 	.word	0x08004cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa34 	bl	8004fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e0a5      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa9a 	bl	80050f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e084      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 faf9 	bl	80051f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e064      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fb57 	bl	80052ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e043      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb9a 	bl	80053b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0204 	bic.w	r2, r2, #4
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb2:	e023      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fbd8 	bl	8005470 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_ConfigClockSource+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0b6      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x18a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	d03e      	beq.n	8004de8 <HAL_TIM_ConfigClockSource+0xd8>
 8004d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6e:	f200 8087 	bhi.w	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	f000 8086 	beq.w	8004e86 <HAL_TIM_ConfigClockSource+0x176>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d87f      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d01a      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0xaa>
 8004d84:	2b70      	cmp	r3, #112	; 0x70
 8004d86:	d87b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d88:	2b60      	cmp	r3, #96	; 0x60
 8004d8a:	d050      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x11e>
 8004d8c:	2b60      	cmp	r3, #96	; 0x60
 8004d8e:	d877      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d90:	2b50      	cmp	r3, #80	; 0x50
 8004d92:	d03c      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0xfe>
 8004d94:	2b50      	cmp	r3, #80	; 0x50
 8004d96:	d873      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d058      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x13e>
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d86f      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004da0:	2b30      	cmp	r3, #48	; 0x30
 8004da2:	d064      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d86b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d060      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d867      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d05c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d05a      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004db8:	e062      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6899      	ldr	r1, [r3, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f000 fc2b 	bl	8005624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	609a      	str	r2, [r3, #8]
      break;
 8004de6:	e04f      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f000 fc14 	bl	8005624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0a:	609a      	str	r2, [r3, #8]
      break;
 8004e0c:	e03c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fb88 	bl	8005530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2150      	movs	r1, #80	; 0x50
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fbe1 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e02c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fba7 	bl	800558e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2160      	movs	r1, #96	; 0x60
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fbd1 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e01c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 fb68 	bl	8005530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fbc1 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e00c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 fbb8 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004e7e:	e003      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e000      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <TIM_Base_SetConfig+0xcc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x20>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d108      	bne.n	8004f3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <TIM_Base_SetConfig+0xcc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00f      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d00b      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <TIM_Base_SetConfig+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a21      	ldr	r2, [pc, #132]	; (8004fdc <TIM_Base_SetConfig+0xd4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <TIM_Base_SetConfig+0xd8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <TIM_Base_SetConfig+0xcc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0xb0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <TIM_Base_SetConfig+0xd0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <TIM_Base_SetConfig+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0xb0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0b      	ldr	r2, [pc, #44]	; (8004fe0 <TIM_Base_SetConfig+0xd8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d103      	bne.n	8004fc0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	615a      	str	r2, [r3, #20]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0302 	bic.w	r3, r3, #2
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <TIM_OC1_SetConfig+0xfc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_OC1_SetConfig+0x78>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <TIM_OC1_SetConfig+0x100>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_OC1_SetConfig+0x78>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <TIM_OC1_SetConfig+0x104>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC1_SetConfig+0x78>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a25      	ldr	r2, [pc, #148]	; (80050ec <TIM_OC1_SetConfig+0x108>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10c      	bne.n	8005076 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0308 	bic.w	r3, r3, #8
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <TIM_OC1_SetConfig+0xfc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_OC1_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <TIM_OC1_SetConfig+0x100>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC1_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <TIM_OC1_SetConfig+0x104>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC1_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a16      	ldr	r2, [pc, #88]	; (80050ec <TIM_OC1_SetConfig+0x108>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0210 	bic.w	r2, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0320 	bic.w	r3, r3, #32
 800513e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a24      	ldr	r2, [pc, #144]	; (80051e0 <TIM_OC2_SetConfig+0xf0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10d      	bne.n	8005170 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <TIM_OC2_SetConfig+0xf0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00b      	beq.n	8005190 <TIM_OC2_SetConfig+0xa0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <TIM_OC2_SetConfig+0xf4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d007      	beq.n	8005190 <TIM_OC2_SetConfig+0xa0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <TIM_OC2_SetConfig+0xf8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC2_SetConfig+0xa0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a18      	ldr	r2, [pc, #96]	; (80051ec <TIM_OC2_SetConfig+0xfc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d113      	bne.n	80051b8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005196:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <TIM_OC3_SetConfig+0xec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800526c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <TIM_OC3_SetConfig+0xec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_OC3_SetConfig+0x9e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <TIM_OC3_SetConfig+0xf0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC3_SetConfig+0x9e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_OC3_SetConfig+0xf4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC3_SetConfig+0x9e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <TIM_OC3_SetConfig+0xf8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <TIM_OC4_SetConfig+0xb8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_OC4_SetConfig+0x7c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <TIM_OC4_SetConfig+0xbc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_OC4_SetConfig+0x7c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a14      	ldr	r2, [pc, #80]	; (80053ac <TIM_OC4_SetConfig+0xc0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0x7c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <TIM_OC4_SetConfig+0xc4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d109      	bne.n	800537c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800

080053b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <TIM_OC5_SetConfig+0xac>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00b      	beq.n	8005426 <TIM_OC5_SetConfig+0x72>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <TIM_OC5_SetConfig+0xb0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_OC5_SetConfig+0x72>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <TIM_OC5_SetConfig+0xb4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC5_SetConfig+0x72>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <TIM_OC5_SetConfig+0xb8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d109      	bne.n	800543a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800

08005470 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	051b      	lsls	r3, r3, #20
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <TIM_OC6_SetConfig+0xb0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_OC6_SetConfig+0x74>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <TIM_OC6_SetConfig+0xb4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_OC6_SetConfig+0x74>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <TIM_OC6_SetConfig+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC6_SetConfig+0x74>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <TIM_OC6_SetConfig+0xbc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d109      	bne.n	80054f8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0201 	bic.w	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 030a 	bic.w	r3, r3, #10
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558e:	b480      	push	{r7}
 8005590:	b087      	sub	sp, #28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f023 0210 	bic.w	r2, r3, #16
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	031b      	lsls	r3, r3, #12
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	f043 0307 	orr.w	r3, r3, #7
 8005610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800563e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	431a      	orrs	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4313      	orrs	r3, r2
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2201      	movs	r2, #1
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	43db      	mvns	r3, r3
 8005686:	401a      	ands	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1a      	ldr	r2, [r3, #32]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_TIMEx_PWMN_Start+0x24>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e022      	b.n	800571a <HAL_TIMEx_PWMN_Start+0x6a>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d109      	bne.n	80056ee <HAL_TIMEx_PWMN_Start+0x3e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	bf14      	ite	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	2300      	moveq	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e015      	b.n	800571a <HAL_TIMEx_PWMN_Start+0x6a>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d109      	bne.n	8005708 <HAL_TIMEx_PWMN_Start+0x58>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e008      	b.n	800571a <HAL_TIMEx_PWMN_Start+0x6a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e05a      	b.n	80057d8 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <HAL_TIMEx_PWMN_Start+0x82>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	e013      	b.n	800575a <HAL_TIMEx_PWMN_Start+0xaa>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d104      	bne.n	8005742 <HAL_TIMEx_PWMN_Start+0x92>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005740:	e00b      	b.n	800575a <HAL_TIMEx_PWMN_Start+0xaa>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d104      	bne.n	8005752 <HAL_TIMEx_PWMN_Start+0xa2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005750:	e003      	b.n	800575a <HAL_TIMEx_PWMN_Start+0xaa>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2204      	movs	r2, #4
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f99c 	bl	8005aa0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005776:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <HAL_TIMEx_PWMN_Start+0x130>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_TIMEx_PWMN_Start+0xe6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d004      	beq.n	8005796 <HAL_TIMEx_PWMN_Start+0xe6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_TIMEx_PWMN_Start+0x134>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d115      	bne.n	80057c2 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HAL_TIMEx_PWMN_Start+0x138>)
 800579e:	4013      	ands	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b06      	cmp	r3, #6
 80057a6:	d015      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x124>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ae:	d011      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c0:	e008      	b.n	80057d4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e000      	b.n	80057d6 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40014000 	.word	0x40014000
 80057e8:	00010007 	.word	0x00010007

080057ec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f94e 	bl	8005aa0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1a      	ldr	r2, [r3, #32]
 800580a:	f241 1311 	movw	r3, #4369	; 0x1111
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10f      	bne.n	8005834 <HAL_TIMEx_PWMN_Stop+0x48>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	f240 4344 	movw	r3, #1092	; 0x444
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_TIMEx_PWMN_Stop+0x48>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005832:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	f241 1311 	movw	r3, #4369	; 0x1111
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10f      	bne.n	8005864 <HAL_TIMEx_PWMN_Stop+0x78>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	f240 4344 	movw	r3, #1092	; 0x444
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <HAL_TIMEx_PWMN_Stop+0x78>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <HAL_TIMEx_PWMN_Stop+0x88>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005872:	e013      	b.n	800589c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d104      	bne.n	8005884 <HAL_TIMEx_PWMN_Stop+0x98>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005882:	e00b      	b.n	800589c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d104      	bne.n	8005894 <HAL_TIMEx_PWMN_Stop+0xa8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005892:	e003      	b.n	800589c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e04f      	b.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a21      	ldr	r2, [pc, #132]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a14      	ldr	r2, [pc, #80]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005928:	d004      	beq.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10c      	bne.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	4313      	orrs	r3, r2
 8005944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40014000 	.word	0x40014000

08005974 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800598c:	2302      	movs	r3, #2
 800598e:	e060      	b.n	8005a52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d115      	bne.n	8005a40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	051b      	lsls	r3, r3, #20
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e040      	b.n	8005b7e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fb fdc3 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2224      	movs	r2, #36	; 0x24
 8005b16:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f82d 	bl	8005b88 <UART_SetConfig>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e022      	b.n	8005b7e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f957 	bl	8005df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9de 	bl	8005f38 <UART_CheckIdleState>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b8a      	ldr	r3, [pc, #552]	; (8005ddc <UART_SetConfig+0x254>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a78      	ldr	r2, [pc, #480]	; (8005de0 <UART_SetConfig+0x258>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d120      	bne.n	8005c46 <UART_SetConfig+0xbe>
 8005c04:	4b77      	ldr	r3, [pc, #476]	; (8005de4 <UART_SetConfig+0x25c>)
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d817      	bhi.n	8005c40 <UART_SetConfig+0xb8>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x90>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c3b 	.word	0x08005c3b
 8005c24:	08005c2f 	.word	0x08005c2f
 8005c28:	2300      	movs	r3, #0
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e01d      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e01a      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c34:	2304      	movs	r3, #4
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e017      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e014      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c40:	2310      	movs	r3, #16
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e011      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a67      	ldr	r2, [pc, #412]	; (8005de8 <UART_SetConfig+0x260>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d102      	bne.n	8005c56 <UART_SetConfig+0xce>
 8005c50:	2300      	movs	r3, #0
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e009      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a64      	ldr	r2, [pc, #400]	; (8005dec <UART_SetConfig+0x264>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d102      	bne.n	8005c66 <UART_SetConfig+0xde>
 8005c60:	2300      	movs	r3, #0
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e001      	b.n	8005c6a <UART_SetConfig+0xe2>
 8005c66:	2310      	movs	r3, #16
 8005c68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c72:	d15a      	bne.n	8005d2a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d827      	bhi.n	8005cca <UART_SetConfig+0x142>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0xf8>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005ccb 	.word	0x08005ccb
 8005c90:	08005cbb 	.word	0x08005cbb
 8005c94:	08005ccb 	.word	0x08005ccb
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005ccb 	.word	0x08005ccb
 8005ca0:	08005cc3 	.word	0x08005cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fe f998 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8005ca8:	61b8      	str	r0, [r7, #24]
        break;
 8005caa:	e013      	b.n	8005cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cac:	f7fe f9b6 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005cb0:	61b8      	str	r0, [r7, #24]
        break;
 8005cb2:	e00f      	b.n	8005cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb4:	4b4e      	ldr	r3, [pc, #312]	; (8005df0 <UART_SetConfig+0x268>)
 8005cb6:	61bb      	str	r3, [r7, #24]
        break;
 8005cb8:	e00c      	b.n	8005cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cba:	f7fe f915 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8005cbe:	61b8      	str	r0, [r7, #24]
        break;
 8005cc0:	e008      	b.n	8005cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc6:	61bb      	str	r3, [r7, #24]
        break;
 8005cc8:	e004      	b.n	8005cd4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d074      	beq.n	8005dc4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	005a      	lsls	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	441a      	add	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d916      	bls.n	8005d24 <UART_SetConfig+0x19c>
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d212      	bcs.n	8005d24 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f023 030f 	bic.w	r3, r3, #15
 8005d06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	89fb      	ldrh	r3, [r7, #14]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	89fa      	ldrh	r2, [r7, #14]
 8005d20:	60da      	str	r2, [r3, #12]
 8005d22:	e04f      	b.n	8005dc4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77bb      	strb	r3, [r7, #30]
 8005d28:	e04c      	b.n	8005dc4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d828      	bhi.n	8005d82 <UART_SetConfig+0x1fa>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x1b0>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	08005d83 	.word	0x08005d83
 8005d48:	08005d73 	.word	0x08005d73
 8005d4c:	08005d83 	.word	0x08005d83
 8005d50:	08005d83 	.word	0x08005d83
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005d7b 	.word	0x08005d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7fe f93c 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8005d60:	61b8      	str	r0, [r7, #24]
        break;
 8005d62:	e013      	b.n	8005d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d64:	f7fe f95a 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005d68:	61b8      	str	r0, [r7, #24]
        break;
 8005d6a:	e00f      	b.n	8005d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d6c:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <UART_SetConfig+0x268>)
 8005d6e:	61bb      	str	r3, [r7, #24]
        break;
 8005d70:	e00c      	b.n	8005d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d72:	f7fe f8b9 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8005d76:	61b8      	str	r0, [r7, #24]
        break;
 8005d78:	e008      	b.n	8005d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7e:	61bb      	str	r3, [r7, #24]
        break;
 8005d80:	e004      	b.n	8005d8c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	77bb      	strb	r3, [r7, #30]
        break;
 8005d8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d018      	beq.n	8005dc4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	085a      	lsrs	r2, r3, #1
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	441a      	add	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d909      	bls.n	8005dc0 <UART_SetConfig+0x238>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d205      	bcs.n	8005dc0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	e001      	b.n	8005dc4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005dd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	efff69f3 	.word	0xefff69f3
 8005de0:	40013800 	.word	0x40013800
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40004400 	.word	0x40004400
 8005dec:	40004800 	.word	0x40004800
 8005df0:	007a1200 	.word	0x007a1200

08005df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef2:	d10a      	bne.n	8005f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b098      	sub	sp, #96	; 0x60
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f48:	f7fb fd84 	bl	8001a54 <HAL_GetTick>
 8005f4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d12e      	bne.n	8005fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f88c 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d021      	beq.n	8005fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
 8005f96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e062      	b.n	8006080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d149      	bne.n	800605c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f856 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d03c      	beq.n	800605c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	633b      	str	r3, [r7, #48]	; 0x30
 8006002:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006034:	61fa      	str	r2, [r7, #28]
 8006036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	617b      	str	r3, [r7, #20]
   return(result);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e011      	b.n	8006080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3758      	adds	r7, #88	; 0x58
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006098:	e049      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d045      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fb fcd7 	bl	8001a54 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e048      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d031      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d110      	bne.n	80060fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2208      	movs	r2, #8
 80060de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f838 	bl	8006156 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2208      	movs	r2, #8
 80060ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e029      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006108:	d111      	bne.n	800612e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f81e 	bl	8006156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e00f      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	429a      	cmp	r2, r3
 800614a:	d0a6      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006156:	b480      	push	{r7}
 8006158:	b095      	sub	sp, #84	; 0x54
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617c:	643b      	str	r3, [r7, #64]	; 0x40
 800617e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e6      	bne.n	800615e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3308      	adds	r3, #8
 8006196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e5      	bne.n	8006190 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d118      	bne.n	80061fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 0310 	bic.w	r3, r3, #16
 80061e0:	647b      	str	r3, [r7, #68]	; 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6979      	ldr	r1, [r7, #20]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	613b      	str	r3, [r7, #16]
   return(result);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e6      	bne.n	80061cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006212:	bf00      	nop
 8006214:	3754      	adds	r7, #84	; 0x54
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <__errno>:
 8006220:	4b01      	ldr	r3, [pc, #4]	; (8006228 <__errno+0x8>)
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	2000000c 	.word	0x2000000c

0800622c <__libc_init_array>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4d0d      	ldr	r5, [pc, #52]	; (8006264 <__libc_init_array+0x38>)
 8006230:	4c0d      	ldr	r4, [pc, #52]	; (8006268 <__libc_init_array+0x3c>)
 8006232:	1b64      	subs	r4, r4, r5
 8006234:	10a4      	asrs	r4, r4, #2
 8006236:	2600      	movs	r6, #0
 8006238:	42a6      	cmp	r6, r4
 800623a:	d109      	bne.n	8006250 <__libc_init_array+0x24>
 800623c:	4d0b      	ldr	r5, [pc, #44]	; (800626c <__libc_init_array+0x40>)
 800623e:	4c0c      	ldr	r4, [pc, #48]	; (8006270 <__libc_init_array+0x44>)
 8006240:	f002 fd36 	bl	8008cb0 <_init>
 8006244:	1b64      	subs	r4, r4, r5
 8006246:	10a4      	asrs	r4, r4, #2
 8006248:	2600      	movs	r6, #0
 800624a:	42a6      	cmp	r6, r4
 800624c:	d105      	bne.n	800625a <__libc_init_array+0x2e>
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	f855 3b04 	ldr.w	r3, [r5], #4
 8006254:	4798      	blx	r3
 8006256:	3601      	adds	r6, #1
 8006258:	e7ee      	b.n	8006238 <__libc_init_array+0xc>
 800625a:	f855 3b04 	ldr.w	r3, [r5], #4
 800625e:	4798      	blx	r3
 8006260:	3601      	adds	r6, #1
 8006262:	e7f2      	b.n	800624a <__libc_init_array+0x1e>
 8006264:	0800a75c 	.word	0x0800a75c
 8006268:	0800a75c 	.word	0x0800a75c
 800626c:	0800a75c 	.word	0x0800a75c
 8006270:	0800a760 	.word	0x0800a760

08006274 <memset>:
 8006274:	4402      	add	r2, r0
 8006276:	4603      	mov	r3, r0
 8006278:	4293      	cmp	r3, r2
 800627a:	d100      	bne.n	800627e <memset+0xa>
 800627c:	4770      	bx	lr
 800627e:	f803 1b01 	strb.w	r1, [r3], #1
 8006282:	e7f9      	b.n	8006278 <memset+0x4>

08006284 <__cvt>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	ec55 4b10 	vmov	r4, r5, d0
 800628c:	2d00      	cmp	r5, #0
 800628e:	460e      	mov	r6, r1
 8006290:	4619      	mov	r1, r3
 8006292:	462b      	mov	r3, r5
 8006294:	bfbb      	ittet	lt
 8006296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800629a:	461d      	movlt	r5, r3
 800629c:	2300      	movge	r3, #0
 800629e:	232d      	movlt	r3, #45	; 0x2d
 80062a0:	700b      	strb	r3, [r1, #0]
 80062a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062a8:	4691      	mov	r9, r2
 80062aa:	f023 0820 	bic.w	r8, r3, #32
 80062ae:	bfbc      	itt	lt
 80062b0:	4622      	movlt	r2, r4
 80062b2:	4614      	movlt	r4, r2
 80062b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062b8:	d005      	beq.n	80062c6 <__cvt+0x42>
 80062ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062be:	d100      	bne.n	80062c2 <__cvt+0x3e>
 80062c0:	3601      	adds	r6, #1
 80062c2:	2102      	movs	r1, #2
 80062c4:	e000      	b.n	80062c8 <__cvt+0x44>
 80062c6:	2103      	movs	r1, #3
 80062c8:	ab03      	add	r3, sp, #12
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	ab02      	add	r3, sp, #8
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	ec45 4b10 	vmov	d0, r4, r5
 80062d4:	4653      	mov	r3, sl
 80062d6:	4632      	mov	r2, r6
 80062d8:	f000 fcca 	bl	8006c70 <_dtoa_r>
 80062dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062e0:	4607      	mov	r7, r0
 80062e2:	d102      	bne.n	80062ea <__cvt+0x66>
 80062e4:	f019 0f01 	tst.w	r9, #1
 80062e8:	d022      	beq.n	8006330 <__cvt+0xac>
 80062ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ee:	eb07 0906 	add.w	r9, r7, r6
 80062f2:	d110      	bne.n	8006316 <__cvt+0x92>
 80062f4:	783b      	ldrb	r3, [r7, #0]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d10a      	bne.n	8006310 <__cvt+0x8c>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006306:	b918      	cbnz	r0, 8006310 <__cvt+0x8c>
 8006308:	f1c6 0601 	rsb	r6, r6, #1
 800630c:	f8ca 6000 	str.w	r6, [sl]
 8006310:	f8da 3000 	ldr.w	r3, [sl]
 8006314:	4499      	add	r9, r3
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006322:	b108      	cbz	r0, 8006328 <__cvt+0xa4>
 8006324:	f8cd 900c 	str.w	r9, [sp, #12]
 8006328:	2230      	movs	r2, #48	; 0x30
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	454b      	cmp	r3, r9
 800632e:	d307      	bcc.n	8006340 <__cvt+0xbc>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006334:	1bdb      	subs	r3, r3, r7
 8006336:	4638      	mov	r0, r7
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	b004      	add	sp, #16
 800633c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	9103      	str	r1, [sp, #12]
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e7f0      	b.n	800632a <__cvt+0xa6>

08006348 <__exponent>:
 8006348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634a:	4603      	mov	r3, r0
 800634c:	2900      	cmp	r1, #0
 800634e:	bfb8      	it	lt
 8006350:	4249      	neglt	r1, r1
 8006352:	f803 2b02 	strb.w	r2, [r3], #2
 8006356:	bfb4      	ite	lt
 8006358:	222d      	movlt	r2, #45	; 0x2d
 800635a:	222b      	movge	r2, #43	; 0x2b
 800635c:	2909      	cmp	r1, #9
 800635e:	7042      	strb	r2, [r0, #1]
 8006360:	dd2a      	ble.n	80063b8 <__exponent+0x70>
 8006362:	f10d 0407 	add.w	r4, sp, #7
 8006366:	46a4      	mov	ip, r4
 8006368:	270a      	movs	r7, #10
 800636a:	46a6      	mov	lr, r4
 800636c:	460a      	mov	r2, r1
 800636e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006372:	fb07 1516 	mls	r5, r7, r6, r1
 8006376:	3530      	adds	r5, #48	; 0x30
 8006378:	2a63      	cmp	r2, #99	; 0x63
 800637a:	f104 34ff 	add.w	r4, r4, #4294967295
 800637e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006382:	4631      	mov	r1, r6
 8006384:	dcf1      	bgt.n	800636a <__exponent+0x22>
 8006386:	3130      	adds	r1, #48	; 0x30
 8006388:	f1ae 0502 	sub.w	r5, lr, #2
 800638c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006390:	1c44      	adds	r4, r0, #1
 8006392:	4629      	mov	r1, r5
 8006394:	4561      	cmp	r1, ip
 8006396:	d30a      	bcc.n	80063ae <__exponent+0x66>
 8006398:	f10d 0209 	add.w	r2, sp, #9
 800639c:	eba2 020e 	sub.w	r2, r2, lr
 80063a0:	4565      	cmp	r5, ip
 80063a2:	bf88      	it	hi
 80063a4:	2200      	movhi	r2, #0
 80063a6:	4413      	add	r3, r2
 80063a8:	1a18      	subs	r0, r3, r0
 80063aa:	b003      	add	sp, #12
 80063ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063b6:	e7ed      	b.n	8006394 <__exponent+0x4c>
 80063b8:	2330      	movs	r3, #48	; 0x30
 80063ba:	3130      	adds	r1, #48	; 0x30
 80063bc:	7083      	strb	r3, [r0, #2]
 80063be:	70c1      	strb	r1, [r0, #3]
 80063c0:	1d03      	adds	r3, r0, #4
 80063c2:	e7f1      	b.n	80063a8 <__exponent+0x60>

080063c4 <_printf_float>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	ed2d 8b02 	vpush	{d8}
 80063cc:	b08d      	sub	sp, #52	; 0x34
 80063ce:	460c      	mov	r4, r1
 80063d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063d4:	4616      	mov	r6, r2
 80063d6:	461f      	mov	r7, r3
 80063d8:	4605      	mov	r5, r0
 80063da:	f001 fa37 	bl	800784c <_localeconv_r>
 80063de:	f8d0 a000 	ldr.w	sl, [r0]
 80063e2:	4650      	mov	r0, sl
 80063e4:	f7f9 fef4 	bl	80001d0 <strlen>
 80063e8:	2300      	movs	r3, #0
 80063ea:	930a      	str	r3, [sp, #40]	; 0x28
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	f8d8 3000 	ldr.w	r3, [r8]
 80063f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063f8:	3307      	adds	r3, #7
 80063fa:	f023 0307 	bic.w	r3, r3, #7
 80063fe:	f103 0208 	add.w	r2, r3, #8
 8006402:	f8c8 2000 	str.w	r2, [r8]
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800640e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f8cd 8018 	str.w	r8, [sp, #24]
 800641c:	ee08 0a10 	vmov	s16, r0
 8006420:	4b9f      	ldr	r3, [pc, #636]	; (80066a0 <_printf_float+0x2dc>)
 8006422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	f7fa fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800642e:	bb88      	cbnz	r0, 8006494 <_printf_float+0xd0>
 8006430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006434:	4b9a      	ldr	r3, [pc, #616]	; (80066a0 <_printf_float+0x2dc>)
 8006436:	f04f 32ff 	mov.w	r2, #4294967295
 800643a:	f7fa fb59 	bl	8000af0 <__aeabi_dcmple>
 800643e:	bb48      	cbnz	r0, 8006494 <_printf_float+0xd0>
 8006440:	2200      	movs	r2, #0
 8006442:	2300      	movs	r3, #0
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7fa fb48 	bl	8000adc <__aeabi_dcmplt>
 800644c:	b110      	cbz	r0, 8006454 <_printf_float+0x90>
 800644e:	232d      	movs	r3, #45	; 0x2d
 8006450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006454:	4b93      	ldr	r3, [pc, #588]	; (80066a4 <_printf_float+0x2e0>)
 8006456:	4894      	ldr	r0, [pc, #592]	; (80066a8 <_printf_float+0x2e4>)
 8006458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800645c:	bf94      	ite	ls
 800645e:	4698      	movls	r8, r3
 8006460:	4680      	movhi	r8, r0
 8006462:	2303      	movs	r3, #3
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	9b05      	ldr	r3, [sp, #20]
 8006468:	f023 0204 	bic.w	r2, r3, #4
 800646c:	6022      	str	r2, [r4, #0]
 800646e:	f04f 0900 	mov.w	r9, #0
 8006472:	9700      	str	r7, [sp, #0]
 8006474:	4633      	mov	r3, r6
 8006476:	aa0b      	add	r2, sp, #44	; 0x2c
 8006478:	4621      	mov	r1, r4
 800647a:	4628      	mov	r0, r5
 800647c:	f000 f9d8 	bl	8006830 <_printf_common>
 8006480:	3001      	adds	r0, #1
 8006482:	f040 8090 	bne.w	80065a6 <_printf_float+0x1e2>
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	b00d      	add	sp, #52	; 0x34
 800648c:	ecbd 8b02 	vpop	{d8}
 8006490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	4640      	mov	r0, r8
 800649a:	4649      	mov	r1, r9
 800649c:	f7fa fb46 	bl	8000b2c <__aeabi_dcmpun>
 80064a0:	b140      	cbz	r0, 80064b4 <_printf_float+0xf0>
 80064a2:	464b      	mov	r3, r9
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfbc      	itt	lt
 80064a8:	232d      	movlt	r3, #45	; 0x2d
 80064aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ae:	487f      	ldr	r0, [pc, #508]	; (80066ac <_printf_float+0x2e8>)
 80064b0:	4b7f      	ldr	r3, [pc, #508]	; (80066b0 <_printf_float+0x2ec>)
 80064b2:	e7d1      	b.n	8006458 <_printf_float+0x94>
 80064b4:	6863      	ldr	r3, [r4, #4]
 80064b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064ba:	9206      	str	r2, [sp, #24]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	d13f      	bne.n	8006540 <_printf_float+0x17c>
 80064c0:	2306      	movs	r3, #6
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	9b05      	ldr	r3, [sp, #20]
 80064c6:	6861      	ldr	r1, [r4, #4]
 80064c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064cc:	2300      	movs	r3, #0
 80064ce:	9303      	str	r3, [sp, #12]
 80064d0:	ab0a      	add	r3, sp, #40	; 0x28
 80064d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064d6:	ab09      	add	r3, sp, #36	; 0x24
 80064d8:	ec49 8b10 	vmov	d0, r8, r9
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	6022      	str	r2, [r4, #0]
 80064e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7ff fecd 	bl	8006284 <__cvt>
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ee:	2b47      	cmp	r3, #71	; 0x47
 80064f0:	4680      	mov	r8, r0
 80064f2:	d108      	bne.n	8006506 <_printf_float+0x142>
 80064f4:	1cc8      	adds	r0, r1, #3
 80064f6:	db02      	blt.n	80064fe <_printf_float+0x13a>
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	4299      	cmp	r1, r3
 80064fc:	dd41      	ble.n	8006582 <_printf_float+0x1be>
 80064fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006502:	fa5f fb8b 	uxtb.w	fp, fp
 8006506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800650a:	d820      	bhi.n	800654e <_printf_float+0x18a>
 800650c:	3901      	subs	r1, #1
 800650e:	465a      	mov	r2, fp
 8006510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006514:	9109      	str	r1, [sp, #36]	; 0x24
 8006516:	f7ff ff17 	bl	8006348 <__exponent>
 800651a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800651c:	1813      	adds	r3, r2, r0
 800651e:	2a01      	cmp	r2, #1
 8006520:	4681      	mov	r9, r0
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	dc02      	bgt.n	800652c <_printf_float+0x168>
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	07d2      	lsls	r2, r2, #31
 800652a:	d501      	bpl.n	8006530 <_printf_float+0x16c>
 800652c:	3301      	adds	r3, #1
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006534:	2b00      	cmp	r3, #0
 8006536:	d09c      	beq.n	8006472 <_printf_float+0xae>
 8006538:	232d      	movs	r3, #45	; 0x2d
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653e:	e798      	b.n	8006472 <_printf_float+0xae>
 8006540:	9a06      	ldr	r2, [sp, #24]
 8006542:	2a47      	cmp	r2, #71	; 0x47
 8006544:	d1be      	bne.n	80064c4 <_printf_float+0x100>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1bc      	bne.n	80064c4 <_printf_float+0x100>
 800654a:	2301      	movs	r3, #1
 800654c:	e7b9      	b.n	80064c2 <_printf_float+0xfe>
 800654e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006552:	d118      	bne.n	8006586 <_printf_float+0x1c2>
 8006554:	2900      	cmp	r1, #0
 8006556:	6863      	ldr	r3, [r4, #4]
 8006558:	dd0b      	ble.n	8006572 <_printf_float+0x1ae>
 800655a:	6121      	str	r1, [r4, #16]
 800655c:	b913      	cbnz	r3, 8006564 <_printf_float+0x1a0>
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	07d0      	lsls	r0, r2, #31
 8006562:	d502      	bpl.n	800656a <_printf_float+0x1a6>
 8006564:	3301      	adds	r3, #1
 8006566:	440b      	add	r3, r1
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	65a1      	str	r1, [r4, #88]	; 0x58
 800656c:	f04f 0900 	mov.w	r9, #0
 8006570:	e7de      	b.n	8006530 <_printf_float+0x16c>
 8006572:	b913      	cbnz	r3, 800657a <_printf_float+0x1b6>
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	07d2      	lsls	r2, r2, #31
 8006578:	d501      	bpl.n	800657e <_printf_float+0x1ba>
 800657a:	3302      	adds	r3, #2
 800657c:	e7f4      	b.n	8006568 <_printf_float+0x1a4>
 800657e:	2301      	movs	r3, #1
 8006580:	e7f2      	b.n	8006568 <_printf_float+0x1a4>
 8006582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006588:	4299      	cmp	r1, r3
 800658a:	db05      	blt.n	8006598 <_printf_float+0x1d4>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	6121      	str	r1, [r4, #16]
 8006590:	07d8      	lsls	r0, r3, #31
 8006592:	d5ea      	bpl.n	800656a <_printf_float+0x1a6>
 8006594:	1c4b      	adds	r3, r1, #1
 8006596:	e7e7      	b.n	8006568 <_printf_float+0x1a4>
 8006598:	2900      	cmp	r1, #0
 800659a:	bfd4      	ite	le
 800659c:	f1c1 0202 	rsble	r2, r1, #2
 80065a0:	2201      	movgt	r2, #1
 80065a2:	4413      	add	r3, r2
 80065a4:	e7e0      	b.n	8006568 <_printf_float+0x1a4>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	055a      	lsls	r2, r3, #21
 80065aa:	d407      	bmi.n	80065bc <_printf_float+0x1f8>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	4642      	mov	r2, r8
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	d12c      	bne.n	8006614 <_printf_float+0x250>
 80065ba:	e764      	b.n	8006486 <_printf_float+0xc2>
 80065bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065c0:	f240 80e0 	bls.w	8006784 <_printf_float+0x3c0>
 80065c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	f7fa fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d034      	beq.n	800663e <_printf_float+0x27a>
 80065d4:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <_printf_float+0x2f0>)
 80065d6:	2301      	movs	r3, #1
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	f43f af51 	beq.w	8006486 <_printf_float+0xc2>
 80065e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e8:	429a      	cmp	r2, r3
 80065ea:	db02      	blt.n	80065f2 <_printf_float+0x22e>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07d8      	lsls	r0, r3, #31
 80065f0:	d510      	bpl.n	8006614 <_printf_float+0x250>
 80065f2:	ee18 3a10 	vmov	r3, s16
 80065f6:	4652      	mov	r2, sl
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	f43f af41 	beq.w	8006486 <_printf_float+0xc2>
 8006604:	f04f 0800 	mov.w	r8, #0
 8006608:	f104 091a 	add.w	r9, r4, #26
 800660c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	4543      	cmp	r3, r8
 8006612:	dc09      	bgt.n	8006628 <_printf_float+0x264>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	079b      	lsls	r3, r3, #30
 8006618:	f100 8105 	bmi.w	8006826 <_printf_float+0x462>
 800661c:	68e0      	ldr	r0, [r4, #12]
 800661e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006620:	4298      	cmp	r0, r3
 8006622:	bfb8      	it	lt
 8006624:	4618      	movlt	r0, r3
 8006626:	e730      	b.n	800648a <_printf_float+0xc6>
 8006628:	2301      	movs	r3, #1
 800662a:	464a      	mov	r2, r9
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f af27 	beq.w	8006486 <_printf_float+0xc2>
 8006638:	f108 0801 	add.w	r8, r8, #1
 800663c:	e7e6      	b.n	800660c <_printf_float+0x248>
 800663e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	dc39      	bgt.n	80066b8 <_printf_float+0x2f4>
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <_printf_float+0x2f0>)
 8006646:	2301      	movs	r3, #1
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af19 	beq.w	8006486 <_printf_float+0xc2>
 8006654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006658:	4313      	orrs	r3, r2
 800665a:	d102      	bne.n	8006662 <_printf_float+0x29e>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d5d8      	bpl.n	8006614 <_printf_float+0x250>
 8006662:	ee18 3a10 	vmov	r3, s16
 8006666:	4652      	mov	r2, sl
 8006668:	4631      	mov	r1, r6
 800666a:	4628      	mov	r0, r5
 800666c:	47b8      	blx	r7
 800666e:	3001      	adds	r0, #1
 8006670:	f43f af09 	beq.w	8006486 <_printf_float+0xc2>
 8006674:	f04f 0900 	mov.w	r9, #0
 8006678:	f104 0a1a 	add.w	sl, r4, #26
 800667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667e:	425b      	negs	r3, r3
 8006680:	454b      	cmp	r3, r9
 8006682:	dc01      	bgt.n	8006688 <_printf_float+0x2c4>
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	e792      	b.n	80065ae <_printf_float+0x1ea>
 8006688:	2301      	movs	r3, #1
 800668a:	4652      	mov	r2, sl
 800668c:	4631      	mov	r1, r6
 800668e:	4628      	mov	r0, r5
 8006690:	47b8      	blx	r7
 8006692:	3001      	adds	r0, #1
 8006694:	f43f aef7 	beq.w	8006486 <_printf_float+0xc2>
 8006698:	f109 0901 	add.w	r9, r9, #1
 800669c:	e7ee      	b.n	800667c <_printf_float+0x2b8>
 800669e:	bf00      	nop
 80066a0:	7fefffff 	.word	0x7fefffff
 80066a4:	0800a384 	.word	0x0800a384
 80066a8:	0800a388 	.word	0x0800a388
 80066ac:	0800a390 	.word	0x0800a390
 80066b0:	0800a38c 	.word	0x0800a38c
 80066b4:	0800a394 	.word	0x0800a394
 80066b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066bc:	429a      	cmp	r2, r3
 80066be:	bfa8      	it	ge
 80066c0:	461a      	movge	r2, r3
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	4691      	mov	r9, r2
 80066c6:	dc37      	bgt.n	8006738 <_printf_float+0x374>
 80066c8:	f04f 0b00 	mov.w	fp, #0
 80066cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066d0:	f104 021a 	add.w	r2, r4, #26
 80066d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	eba3 0309 	sub.w	r3, r3, r9
 80066dc:	455b      	cmp	r3, fp
 80066de:	dc33      	bgt.n	8006748 <_printf_float+0x384>
 80066e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e4:	429a      	cmp	r2, r3
 80066e6:	db3b      	blt.n	8006760 <_printf_float+0x39c>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	07da      	lsls	r2, r3, #31
 80066ec:	d438      	bmi.n	8006760 <_printf_float+0x39c>
 80066ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f0:	9a05      	ldr	r2, [sp, #20]
 80066f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f4:	1a9a      	subs	r2, r3, r2
 80066f6:	eba3 0901 	sub.w	r9, r3, r1
 80066fa:	4591      	cmp	r9, r2
 80066fc:	bfa8      	it	ge
 80066fe:	4691      	movge	r9, r2
 8006700:	f1b9 0f00 	cmp.w	r9, #0
 8006704:	dc35      	bgt.n	8006772 <_printf_float+0x3ae>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800670e:	f104 0a1a 	add.w	sl, r4, #26
 8006712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	eba3 0309 	sub.w	r3, r3, r9
 800671c:	4543      	cmp	r3, r8
 800671e:	f77f af79 	ble.w	8006614 <_printf_float+0x250>
 8006722:	2301      	movs	r3, #1
 8006724:	4652      	mov	r2, sl
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	f43f aeaa 	beq.w	8006486 <_printf_float+0xc2>
 8006732:	f108 0801 	add.w	r8, r8, #1
 8006736:	e7ec      	b.n	8006712 <_printf_float+0x34e>
 8006738:	4613      	mov	r3, r2
 800673a:	4631      	mov	r1, r6
 800673c:	4642      	mov	r2, r8
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	d1c0      	bne.n	80066c8 <_printf_float+0x304>
 8006746:	e69e      	b.n	8006486 <_printf_float+0xc2>
 8006748:	2301      	movs	r3, #1
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	9205      	str	r2, [sp, #20]
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f ae97 	beq.w	8006486 <_printf_float+0xc2>
 8006758:	9a05      	ldr	r2, [sp, #20]
 800675a:	f10b 0b01 	add.w	fp, fp, #1
 800675e:	e7b9      	b.n	80066d4 <_printf_float+0x310>
 8006760:	ee18 3a10 	vmov	r3, s16
 8006764:	4652      	mov	r2, sl
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	d1be      	bne.n	80066ee <_printf_float+0x32a>
 8006770:	e689      	b.n	8006486 <_printf_float+0xc2>
 8006772:	9a05      	ldr	r2, [sp, #20]
 8006774:	464b      	mov	r3, r9
 8006776:	4442      	add	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d1c1      	bne.n	8006706 <_printf_float+0x342>
 8006782:	e680      	b.n	8006486 <_printf_float+0xc2>
 8006784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006786:	2a01      	cmp	r2, #1
 8006788:	dc01      	bgt.n	800678e <_printf_float+0x3ca>
 800678a:	07db      	lsls	r3, r3, #31
 800678c:	d538      	bpl.n	8006800 <_printf_float+0x43c>
 800678e:	2301      	movs	r3, #1
 8006790:	4642      	mov	r2, r8
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f ae74 	beq.w	8006486 <_printf_float+0xc2>
 800679e:	ee18 3a10 	vmov	r3, s16
 80067a2:	4652      	mov	r2, sl
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f ae6b 	beq.w	8006486 <_printf_float+0xc2>
 80067b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	f7fa f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80067bc:	b9d8      	cbnz	r0, 80067f6 <_printf_float+0x432>
 80067be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c0:	f108 0201 	add.w	r2, r8, #1
 80067c4:	3b01      	subs	r3, #1
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d10e      	bne.n	80067ee <_printf_float+0x42a>
 80067d0:	e659      	b.n	8006486 <_printf_float+0xc2>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4652      	mov	r2, sl
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae52 	beq.w	8006486 <_printf_float+0xc2>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	4543      	cmp	r3, r8
 80067ec:	dcf1      	bgt.n	80067d2 <_printf_float+0x40e>
 80067ee:	464b      	mov	r3, r9
 80067f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067f4:	e6dc      	b.n	80065b0 <_printf_float+0x1ec>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0a1a 	add.w	sl, r4, #26
 80067fe:	e7f2      	b.n	80067e6 <_printf_float+0x422>
 8006800:	2301      	movs	r3, #1
 8006802:	4642      	mov	r2, r8
 8006804:	e7df      	b.n	80067c6 <_printf_float+0x402>
 8006806:	2301      	movs	r3, #1
 8006808:	464a      	mov	r2, r9
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae38 	beq.w	8006486 <_printf_float+0xc2>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	4543      	cmp	r3, r8
 8006822:	dcf0      	bgt.n	8006806 <_printf_float+0x442>
 8006824:	e6fa      	b.n	800661c <_printf_float+0x258>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0919 	add.w	r9, r4, #25
 800682e:	e7f4      	b.n	800681a <_printf_float+0x456>

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	4699      	mov	r9, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b10a      	cbz	r2, 8006856 <_printf_common+0x26>
 8006852:	3301      	adds	r3, #1
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	6833      	ldrmi	r3, [r6, #0]
 800685e:	3302      	addmi	r3, #2
 8006860:	6033      	strmi	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	f015 0506 	ands.w	r5, r5, #6
 8006868:	d106      	bne.n	8006878 <_printf_common+0x48>
 800686a:	f104 0a19 	add.w	sl, r4, #25
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	6832      	ldr	r2, [r6, #0]
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dc26      	bgt.n	80068c6 <_printf_common+0x96>
 8006878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800687c:	1e13      	subs	r3, r2, #0
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	bf18      	it	ne
 8006882:	2301      	movne	r3, #1
 8006884:	0692      	lsls	r2, r2, #26
 8006886:	d42b      	bmi.n	80068e0 <_printf_common+0xb0>
 8006888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800688c:	4649      	mov	r1, r9
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	3001      	adds	r0, #1
 8006894:	d01e      	beq.n	80068d4 <_printf_common+0xa4>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	68e5      	ldr	r5, [r4, #12]
 800689a:	6832      	ldr	r2, [r6, #0]
 800689c:	f003 0306 	and.w	r3, r3, #6
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	bf08      	it	eq
 80068a4:	1aad      	subeq	r5, r5, r2
 80068a6:	68a3      	ldr	r3, [r4, #8]
 80068a8:	6922      	ldr	r2, [r4, #16]
 80068aa:	bf0c      	ite	eq
 80068ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b0:	2500      	movne	r5, #0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bfc4      	itt	gt
 80068b6:	1a9b      	subgt	r3, r3, r2
 80068b8:	18ed      	addgt	r5, r5, r3
 80068ba:	2600      	movs	r6, #0
 80068bc:	341a      	adds	r4, #26
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d11a      	bne.n	80068f8 <_printf_common+0xc8>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e008      	b.n	80068d8 <_printf_common+0xa8>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4649      	mov	r1, r9
 80068cc:	4638      	mov	r0, r7
 80068ce:	47c0      	blx	r8
 80068d0:	3001      	adds	r0, #1
 80068d2:	d103      	bne.n	80068dc <_printf_common+0xac>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	3501      	adds	r5, #1
 80068de:	e7c6      	b.n	800686e <_printf_common+0x3e>
 80068e0:	18e1      	adds	r1, r4, r3
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	2030      	movs	r0, #48	; 0x30
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ea:	4422      	add	r2, r4
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068f4:	3302      	adds	r3, #2
 80068f6:	e7c7      	b.n	8006888 <_printf_common+0x58>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4649      	mov	r1, r9
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d0e6      	beq.n	80068d4 <_printf_common+0xa4>
 8006906:	3601      	adds	r6, #1
 8006908:	e7d9      	b.n	80068be <_printf_common+0x8e>
	...

0800690c <_printf_i>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	7e0f      	ldrb	r7, [r1, #24]
 8006912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006914:	2f78      	cmp	r7, #120	; 0x78
 8006916:	4691      	mov	r9, r2
 8006918:	4680      	mov	r8, r0
 800691a:	460c      	mov	r4, r1
 800691c:	469a      	mov	sl, r3
 800691e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006922:	d807      	bhi.n	8006934 <_printf_i+0x28>
 8006924:	2f62      	cmp	r7, #98	; 0x62
 8006926:	d80a      	bhi.n	800693e <_printf_i+0x32>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f000 80d8 	beq.w	8006ade <_printf_i+0x1d2>
 800692e:	2f58      	cmp	r7, #88	; 0x58
 8006930:	f000 80a3 	beq.w	8006a7a <_printf_i+0x16e>
 8006934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800693c:	e03a      	b.n	80069b4 <_printf_i+0xa8>
 800693e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006942:	2b15      	cmp	r3, #21
 8006944:	d8f6      	bhi.n	8006934 <_printf_i+0x28>
 8006946:	a101      	add	r1, pc, #4	; (adr r1, 800694c <_printf_i+0x40>)
 8006948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069b9 	.word	0x080069b9
 8006954:	08006935 	.word	0x08006935
 8006958:	08006935 	.word	0x08006935
 800695c:	08006935 	.word	0x08006935
 8006960:	08006935 	.word	0x08006935
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006935 	.word	0x08006935
 800696c:	08006935 	.word	0x08006935
 8006970:	08006935 	.word	0x08006935
 8006974:	08006935 	.word	0x08006935
 8006978:	08006ac5 	.word	0x08006ac5
 800697c:	080069e9 	.word	0x080069e9
 8006980:	08006aa7 	.word	0x08006aa7
 8006984:	08006935 	.word	0x08006935
 8006988:	08006935 	.word	0x08006935
 800698c:	08006ae7 	.word	0x08006ae7
 8006990:	08006935 	.word	0x08006935
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006935 	.word	0x08006935
 800699c:	08006935 	.word	0x08006935
 80069a0:	08006aaf 	.word	0x08006aaf
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	602a      	str	r2, [r5, #0]
 80069ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0a3      	b.n	8006b00 <_printf_i+0x1f4>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	6829      	ldr	r1, [r5, #0]
 80069bc:	0606      	lsls	r6, r0, #24
 80069be:	f101 0304 	add.w	r3, r1, #4
 80069c2:	d50a      	bpl.n	80069da <_printf_i+0xce>
 80069c4:	680e      	ldr	r6, [r1, #0]
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	da03      	bge.n	80069d4 <_printf_i+0xc8>
 80069cc:	232d      	movs	r3, #45	; 0x2d
 80069ce:	4276      	negs	r6, r6
 80069d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d4:	485e      	ldr	r0, [pc, #376]	; (8006b50 <_printf_i+0x244>)
 80069d6:	230a      	movs	r3, #10
 80069d8:	e019      	b.n	8006a0e <_printf_i+0x102>
 80069da:	680e      	ldr	r6, [r1, #0]
 80069dc:	602b      	str	r3, [r5, #0]
 80069de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069e2:	bf18      	it	ne
 80069e4:	b236      	sxthne	r6, r6
 80069e6:	e7ef      	b.n	80069c8 <_printf_i+0xbc>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1d19      	adds	r1, r3, #4
 80069ee:	6029      	str	r1, [r5, #0]
 80069f0:	0601      	lsls	r1, r0, #24
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0xec>
 80069f4:	681e      	ldr	r6, [r3, #0]
 80069f6:	e002      	b.n	80069fe <_printf_i+0xf2>
 80069f8:	0646      	lsls	r6, r0, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0xe8>
 80069fc:	881e      	ldrh	r6, [r3, #0]
 80069fe:	4854      	ldr	r0, [pc, #336]	; (8006b50 <_printf_i+0x244>)
 8006a00:	2f6f      	cmp	r7, #111	; 0x6f
 8006a02:	bf0c      	ite	eq
 8006a04:	2308      	moveq	r3, #8
 8006a06:	230a      	movne	r3, #10
 8006a08:	2100      	movs	r1, #0
 8006a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a0e:	6865      	ldr	r5, [r4, #4]
 8006a10:	60a5      	str	r5, [r4, #8]
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	bfa2      	ittt	ge
 8006a16:	6821      	ldrge	r1, [r4, #0]
 8006a18:	f021 0104 	bicge.w	r1, r1, #4
 8006a1c:	6021      	strge	r1, [r4, #0]
 8006a1e:	b90e      	cbnz	r6, 8006a24 <_printf_i+0x118>
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	d04d      	beq.n	8006ac0 <_printf_i+0x1b4>
 8006a24:	4615      	mov	r5, r2
 8006a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a2e:	5dc7      	ldrb	r7, [r0, r7]
 8006a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a34:	4637      	mov	r7, r6
 8006a36:	42bb      	cmp	r3, r7
 8006a38:	460e      	mov	r6, r1
 8006a3a:	d9f4      	bls.n	8006a26 <_printf_i+0x11a>
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d10b      	bne.n	8006a58 <_printf_i+0x14c>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	07de      	lsls	r6, r3, #31
 8006a44:	d508      	bpl.n	8006a58 <_printf_i+0x14c>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	6861      	ldr	r1, [r4, #4]
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	bfde      	ittt	le
 8006a4e:	2330      	movle	r3, #48	; 0x30
 8006a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a58:	1b52      	subs	r2, r2, r5
 8006a5a:	6122      	str	r2, [r4, #16]
 8006a5c:	f8cd a000 	str.w	sl, [sp]
 8006a60:	464b      	mov	r3, r9
 8006a62:	aa03      	add	r2, sp, #12
 8006a64:	4621      	mov	r1, r4
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7ff fee2 	bl	8006830 <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d14c      	bne.n	8006b0a <_printf_i+0x1fe>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b004      	add	sp, #16
 8006a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7a:	4835      	ldr	r0, [pc, #212]	; (8006b50 <_printf_i+0x244>)
 8006a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a80:	6829      	ldr	r1, [r5, #0]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a88:	6029      	str	r1, [r5, #0]
 8006a8a:	061d      	lsls	r5, r3, #24
 8006a8c:	d514      	bpl.n	8006ab8 <_printf_i+0x1ac>
 8006a8e:	07df      	lsls	r7, r3, #31
 8006a90:	bf44      	itt	mi
 8006a92:	f043 0320 	orrmi.w	r3, r3, #32
 8006a96:	6023      	strmi	r3, [r4, #0]
 8006a98:	b91e      	cbnz	r6, 8006aa2 <_printf_i+0x196>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f023 0320 	bic.w	r3, r3, #32
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	e7b0      	b.n	8006a08 <_printf_i+0xfc>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	2378      	movs	r3, #120	; 0x78
 8006ab0:	4828      	ldr	r0, [pc, #160]	; (8006b54 <_printf_i+0x248>)
 8006ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ab6:	e7e3      	b.n	8006a80 <_printf_i+0x174>
 8006ab8:	0659      	lsls	r1, r3, #25
 8006aba:	bf48      	it	mi
 8006abc:	b2b6      	uxthmi	r6, r6
 8006abe:	e7e6      	b.n	8006a8e <_printf_i+0x182>
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	e7bb      	b.n	8006a3c <_printf_i+0x130>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	6826      	ldr	r6, [r4, #0]
 8006ac8:	6961      	ldr	r1, [r4, #20]
 8006aca:	1d18      	adds	r0, r3, #4
 8006acc:	6028      	str	r0, [r5, #0]
 8006ace:	0635      	lsls	r5, r6, #24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0x1cc>
 8006ad4:	6019      	str	r1, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0x1d2>
 8006ad8:	0670      	lsls	r0, r6, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0x1c8>
 8006adc:	8019      	strh	r1, [r3, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	4615      	mov	r5, r2
 8006ae4:	e7ba      	b.n	8006a5c <_printf_i+0x150>
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	602a      	str	r2, [r5, #0]
 8006aec:	681d      	ldr	r5, [r3, #0]
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	2100      	movs	r1, #0
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7f9 fb74 	bl	80001e0 <memchr>
 8006af8:	b108      	cbz	r0, 8006afe <_printf_i+0x1f2>
 8006afa:	1b40      	subs	r0, r0, r5
 8006afc:	6060      	str	r0, [r4, #4]
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	2300      	movs	r3, #0
 8006b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b08:	e7a8      	b.n	8006a5c <_printf_i+0x150>
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	47d0      	blx	sl
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0ab      	beq.n	8006a70 <_printf_i+0x164>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	079b      	lsls	r3, r3, #30
 8006b1c:	d413      	bmi.n	8006b46 <_printf_i+0x23a>
 8006b1e:	68e0      	ldr	r0, [r4, #12]
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	4298      	cmp	r0, r3
 8006b24:	bfb8      	it	lt
 8006b26:	4618      	movlt	r0, r3
 8006b28:	e7a4      	b.n	8006a74 <_printf_i+0x168>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	47d0      	blx	sl
 8006b34:	3001      	adds	r0, #1
 8006b36:	d09b      	beq.n	8006a70 <_printf_i+0x164>
 8006b38:	3501      	adds	r5, #1
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	9903      	ldr	r1, [sp, #12]
 8006b3e:	1a5b      	subs	r3, r3, r1
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dcf2      	bgt.n	8006b2a <_printf_i+0x21e>
 8006b44:	e7eb      	b.n	8006b1e <_printf_i+0x212>
 8006b46:	2500      	movs	r5, #0
 8006b48:	f104 0619 	add.w	r6, r4, #25
 8006b4c:	e7f5      	b.n	8006b3a <_printf_i+0x22e>
 8006b4e:	bf00      	nop
 8006b50:	0800a396 	.word	0x0800a396
 8006b54:	0800a3a7 	.word	0x0800a3a7

08006b58 <quorem>:
 8006b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	6903      	ldr	r3, [r0, #16]
 8006b5e:	690c      	ldr	r4, [r1, #16]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	4607      	mov	r7, r0
 8006b64:	f2c0 8081 	blt.w	8006c6a <quorem+0x112>
 8006b68:	3c01      	subs	r4, #1
 8006b6a:	f101 0814 	add.w	r8, r1, #20
 8006b6e:	f100 0514 	add.w	r5, r0, #20
 8006b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b80:	3301      	adds	r3, #1
 8006b82:	429a      	cmp	r2, r3
 8006b84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b90:	d331      	bcc.n	8006bf6 <quorem+0x9e>
 8006b92:	f04f 0e00 	mov.w	lr, #0
 8006b96:	4640      	mov	r0, r8
 8006b98:	46ac      	mov	ip, r5
 8006b9a:	46f2      	mov	sl, lr
 8006b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ba0:	b293      	uxth	r3, r2
 8006ba2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ba6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	ebaa 0303 	sub.w	r3, sl, r3
 8006bb0:	f8dc a000 	ldr.w	sl, [ip]
 8006bb4:	0c12      	lsrs	r2, r2, #16
 8006bb6:	fa13 f38a 	uxtah	r3, r3, sl
 8006bba:	fb06 e202 	mla	r2, r6, r2, lr
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	9b00      	ldr	r3, [sp, #0]
 8006bc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bd0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006bd4:	4581      	cmp	r9, r0
 8006bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bda:	f84c 3b04 	str.w	r3, [ip], #4
 8006bde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006be2:	d2db      	bcs.n	8006b9c <quorem+0x44>
 8006be4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006be8:	b92b      	cbnz	r3, 8006bf6 <quorem+0x9e>
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	d32e      	bcc.n	8006c52 <quorem+0xfa>
 8006bf4:	613c      	str	r4, [r7, #16]
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f001 f8c4 	bl	8007d84 <__mcmp>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	db24      	blt.n	8006c4a <quorem+0xf2>
 8006c00:	3601      	adds	r6, #1
 8006c02:	4628      	mov	r0, r5
 8006c04:	f04f 0c00 	mov.w	ip, #0
 8006c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8006c10:	b293      	uxth	r3, r2
 8006c12:	ebac 0303 	sub.w	r3, ip, r3
 8006c16:	0c12      	lsrs	r2, r2, #16
 8006c18:	fa13 f38e 	uxtah	r3, r3, lr
 8006c1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c2a:	45c1      	cmp	r9, r8
 8006c2c:	f840 3b04 	str.w	r3, [r0], #4
 8006c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c34:	d2e8      	bcs.n	8006c08 <quorem+0xb0>
 8006c36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c3e:	b922      	cbnz	r2, 8006c4a <quorem+0xf2>
 8006c40:	3b04      	subs	r3, #4
 8006c42:	429d      	cmp	r5, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	d30a      	bcc.n	8006c5e <quorem+0x106>
 8006c48:	613c      	str	r4, [r7, #16]
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	b003      	add	sp, #12
 8006c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	3b04      	subs	r3, #4
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	d1cc      	bne.n	8006bf4 <quorem+0x9c>
 8006c5a:	3c01      	subs	r4, #1
 8006c5c:	e7c7      	b.n	8006bee <quorem+0x96>
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	3b04      	subs	r3, #4
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d1f0      	bne.n	8006c48 <quorem+0xf0>
 8006c66:	3c01      	subs	r4, #1
 8006c68:	e7eb      	b.n	8006c42 <quorem+0xea>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e7ee      	b.n	8006c4c <quorem+0xf4>
	...

08006c70 <_dtoa_r>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	ed2d 8b04 	vpush	{d8-d9}
 8006c78:	ec57 6b10 	vmov	r6, r7, d0
 8006c7c:	b093      	sub	sp, #76	; 0x4c
 8006c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c84:	9106      	str	r1, [sp, #24]
 8006c86:	ee10 aa10 	vmov	sl, s0
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c90:	46bb      	mov	fp, r7
 8006c92:	b975      	cbnz	r5, 8006cb2 <_dtoa_r+0x42>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f000 fddd 	bl	8007854 <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c9e:	b920      	cbnz	r0, 8006caa <_dtoa_r+0x3a>
 8006ca0:	4ba7      	ldr	r3, [pc, #668]	; (8006f40 <_dtoa_r+0x2d0>)
 8006ca2:	21ea      	movs	r1, #234	; 0xea
 8006ca4:	48a7      	ldr	r0, [pc, #668]	; (8006f44 <_dtoa_r+0x2d4>)
 8006ca6:	f001 fa75 	bl	8008194 <__assert_func>
 8006caa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cae:	6005      	str	r5, [r0, #0]
 8006cb0:	60c5      	str	r5, [r0, #12]
 8006cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb4:	6819      	ldr	r1, [r3, #0]
 8006cb6:	b151      	cbz	r1, 8006cce <_dtoa_r+0x5e>
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	604a      	str	r2, [r1, #4]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4093      	lsls	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fe1c 	bl	8007900 <_Bfree>
 8006cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	1e3b      	subs	r3, r7, #0
 8006cd0:	bfaa      	itet	ge
 8006cd2:	2300      	movge	r3, #0
 8006cd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006cd8:	f8c8 3000 	strge.w	r3, [r8]
 8006cdc:	4b9a      	ldr	r3, [pc, #616]	; (8006f48 <_dtoa_r+0x2d8>)
 8006cde:	bfbc      	itt	lt
 8006ce0:	2201      	movlt	r2, #1
 8006ce2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ce6:	ea33 030b 	bics.w	r3, r3, fp
 8006cea:	d11b      	bne.n	8006d24 <_dtoa_r+0xb4>
 8006cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cee:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cf8:	4333      	orrs	r3, r6
 8006cfa:	f000 8592 	beq.w	8007822 <_dtoa_r+0xbb2>
 8006cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d00:	b963      	cbnz	r3, 8006d1c <_dtoa_r+0xac>
 8006d02:	4b92      	ldr	r3, [pc, #584]	; (8006f4c <_dtoa_r+0x2dc>)
 8006d04:	e022      	b.n	8006d4c <_dtoa_r+0xdc>
 8006d06:	4b92      	ldr	r3, [pc, #584]	; (8006f50 <_dtoa_r+0x2e0>)
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	9801      	ldr	r0, [sp, #4]
 8006d12:	b013      	add	sp, #76	; 0x4c
 8006d14:	ecbd 8b04 	vpop	{d8-d9}
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	4b8b      	ldr	r3, [pc, #556]	; (8006f4c <_dtoa_r+0x2dc>)
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	3303      	adds	r3, #3
 8006d22:	e7f3      	b.n	8006d0c <_dtoa_r+0x9c>
 8006d24:	2200      	movs	r2, #0
 8006d26:	2300      	movs	r3, #0
 8006d28:	4650      	mov	r0, sl
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	f7f9 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d30:	ec4b ab19 	vmov	d9, sl, fp
 8006d34:	4680      	mov	r8, r0
 8006d36:	b158      	cbz	r0, 8006d50 <_dtoa_r+0xe0>
 8006d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 856b 	beq.w	800781c <_dtoa_r+0xbac>
 8006d46:	4883      	ldr	r0, [pc, #524]	; (8006f54 <_dtoa_r+0x2e4>)
 8006d48:	6018      	str	r0, [r3, #0]
 8006d4a:	1e43      	subs	r3, r0, #1
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	e7df      	b.n	8006d10 <_dtoa_r+0xa0>
 8006d50:	ec4b ab10 	vmov	d0, sl, fp
 8006d54:	aa10      	add	r2, sp, #64	; 0x40
 8006d56:	a911      	add	r1, sp, #68	; 0x44
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f001 f8b9 	bl	8007ed0 <__d2b>
 8006d5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006d62:	ee08 0a10 	vmov	s16, r0
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	f000 8084 	beq.w	8006e74 <_dtoa_r+0x204>
 8006d6c:	ee19 3a90 	vmov	r3, s19
 8006d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006d78:	4656      	mov	r6, sl
 8006d7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006d86:	4b74      	ldr	r3, [pc, #464]	; (8006f58 <_dtoa_r+0x2e8>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fa7b 	bl	8000288 <__aeabi_dsub>
 8006d92:	a365      	add	r3, pc, #404	; (adr r3, 8006f28 <_dtoa_r+0x2b8>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 fc2e 	bl	80005f8 <__aeabi_dmul>
 8006d9c:	a364      	add	r3, pc, #400	; (adr r3, 8006f30 <_dtoa_r+0x2c0>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fa73 	bl	800028c <__adddf3>
 8006da6:	4606      	mov	r6, r0
 8006da8:	4628      	mov	r0, r5
 8006daa:	460f      	mov	r7, r1
 8006dac:	f7f9 fbba 	bl	8000524 <__aeabi_i2d>
 8006db0:	a361      	add	r3, pc, #388	; (adr r3, 8006f38 <_dtoa_r+0x2c8>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 fc1f 	bl	80005f8 <__aeabi_dmul>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fa63 	bl	800028c <__adddf3>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	f7f9 fec5 	bl	8000b58 <__aeabi_d2iz>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	9000      	str	r0, [sp, #0]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe80 	bl	8000adc <__aeabi_dcmplt>
 8006ddc:	b150      	cbz	r0, 8006df4 <_dtoa_r+0x184>
 8006dde:	9800      	ldr	r0, [sp, #0]
 8006de0:	f7f9 fba0 	bl	8000524 <__aeabi_i2d>
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	f7f9 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dec:	b910      	cbnz	r0, 8006df4 <_dtoa_r+0x184>
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	9b00      	ldr	r3, [sp, #0]
 8006df6:	2b16      	cmp	r3, #22
 8006df8:	d85a      	bhi.n	8006eb0 <_dtoa_r+0x240>
 8006dfa:	9a00      	ldr	r2, [sp, #0]
 8006dfc:	4b57      	ldr	r3, [pc, #348]	; (8006f5c <_dtoa_r+0x2ec>)
 8006dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	ec51 0b19 	vmov	r0, r1, d9
 8006e0a:	f7f9 fe67 	bl	8000adc <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d050      	beq.n	8006eb4 <_dtoa_r+0x244>
 8006e12:	9b00      	ldr	r3, [sp, #0]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e1e:	1b5d      	subs	r5, r3, r5
 8006e20:	1e6b      	subs	r3, r5, #1
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	bf45      	ittet	mi
 8006e26:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e2a:	9304      	strmi	r3, [sp, #16]
 8006e2c:	2300      	movpl	r3, #0
 8006e2e:	2300      	movmi	r3, #0
 8006e30:	bf4c      	ite	mi
 8006e32:	9305      	strmi	r3, [sp, #20]
 8006e34:	9304      	strpl	r3, [sp, #16]
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	db3d      	blt.n	8006eb8 <_dtoa_r+0x248>
 8006e3c:	9b05      	ldr	r3, [sp, #20]
 8006e3e:	9a00      	ldr	r2, [sp, #0]
 8006e40:	920a      	str	r2, [sp, #40]	; 0x28
 8006e42:	4413      	add	r3, r2
 8006e44:	9305      	str	r3, [sp, #20]
 8006e46:	2300      	movs	r3, #0
 8006e48:	9307      	str	r3, [sp, #28]
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	2b09      	cmp	r3, #9
 8006e4e:	f200 8089 	bhi.w	8006f64 <_dtoa_r+0x2f4>
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	bfc4      	itt	gt
 8006e56:	3b04      	subgt	r3, #4
 8006e58:	9306      	strgt	r3, [sp, #24]
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	f1a3 0302 	sub.w	r3, r3, #2
 8006e60:	bfcc      	ite	gt
 8006e62:	2500      	movgt	r5, #0
 8006e64:	2501      	movle	r5, #1
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	f200 8087 	bhi.w	8006f7a <_dtoa_r+0x30a>
 8006e6c:	e8df f003 	tbb	[pc, r3]
 8006e70:	59383a2d 	.word	0x59383a2d
 8006e74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006e78:	441d      	add	r5, r3
 8006e7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	bfc1      	itttt	gt
 8006e82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006e8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006e8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e92:	bfda      	itte	le
 8006e94:	f1c3 0320 	rsble	r3, r3, #32
 8006e98:	fa06 f003 	lslle.w	r0, r6, r3
 8006e9c:	4318      	orrgt	r0, r3
 8006e9e:	f7f9 fb31 	bl	8000504 <__aeabi_ui2d>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006eaa:	3d01      	subs	r5, #1
 8006eac:	930e      	str	r3, [sp, #56]	; 0x38
 8006eae:	e76a      	b.n	8006d86 <_dtoa_r+0x116>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e7b2      	b.n	8006e1a <_dtoa_r+0x1aa>
 8006eb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006eb6:	e7b1      	b.n	8006e1c <_dtoa_r+0x1ac>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	9a00      	ldr	r2, [sp, #0]
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	4253      	negs	r3, r2
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec8:	e7bf      	b.n	8006e4a <_dtoa_r+0x1da>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9308      	str	r3, [sp, #32]
 8006ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dc55      	bgt.n	8006f80 <_dtoa_r+0x310>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006eda:	461a      	mov	r2, r3
 8006edc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ede:	e00c      	b.n	8006efa <_dtoa_r+0x28a>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e7f3      	b.n	8006ecc <_dtoa_r+0x25c>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee8:	9308      	str	r3, [sp, #32]
 8006eea:	9b00      	ldr	r3, [sp, #0]
 8006eec:	4413      	add	r3, r2
 8006eee:	9302      	str	r3, [sp, #8]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	9303      	str	r3, [sp, #12]
 8006ef6:	bfb8      	it	lt
 8006ef8:	2301      	movlt	r3, #1
 8006efa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006efc:	2200      	movs	r2, #0
 8006efe:	6042      	str	r2, [r0, #4]
 8006f00:	2204      	movs	r2, #4
 8006f02:	f102 0614 	add.w	r6, r2, #20
 8006f06:	429e      	cmp	r6, r3
 8006f08:	6841      	ldr	r1, [r0, #4]
 8006f0a:	d93d      	bls.n	8006f88 <_dtoa_r+0x318>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fcb7 	bl	8007880 <_Balloc>
 8006f12:	9001      	str	r0, [sp, #4]
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d13b      	bne.n	8006f90 <_dtoa_r+0x320>
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <_dtoa_r+0x2f0>)
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f20:	e6c0      	b.n	8006ca4 <_dtoa_r+0x34>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e7df      	b.n	8006ee6 <_dtoa_r+0x276>
 8006f26:	bf00      	nop
 8006f28:	636f4361 	.word	0x636f4361
 8006f2c:	3fd287a7 	.word	0x3fd287a7
 8006f30:	8b60c8b3 	.word	0x8b60c8b3
 8006f34:	3fc68a28 	.word	0x3fc68a28
 8006f38:	509f79fb 	.word	0x509f79fb
 8006f3c:	3fd34413 	.word	0x3fd34413
 8006f40:	0800a3c5 	.word	0x0800a3c5
 8006f44:	0800a3dc 	.word	0x0800a3dc
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	0800a3c1 	.word	0x0800a3c1
 8006f50:	0800a3b8 	.word	0x0800a3b8
 8006f54:	0800a395 	.word	0x0800a395
 8006f58:	3ff80000 	.word	0x3ff80000
 8006f5c:	0800a4d0 	.word	0x0800a4d0
 8006f60:	0800a437 	.word	0x0800a437
 8006f64:	2501      	movs	r5, #1
 8006f66:	2300      	movs	r3, #0
 8006f68:	9306      	str	r3, [sp, #24]
 8006f6a:	9508      	str	r5, [sp, #32]
 8006f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2312      	movs	r3, #18
 8006f78:	e7b0      	b.n	8006edc <_dtoa_r+0x26c>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	9308      	str	r3, [sp, #32]
 8006f7e:	e7f5      	b.n	8006f6c <_dtoa_r+0x2fc>
 8006f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f86:	e7b8      	b.n	8006efa <_dtoa_r+0x28a>
 8006f88:	3101      	adds	r1, #1
 8006f8a:	6041      	str	r1, [r0, #4]
 8006f8c:	0052      	lsls	r2, r2, #1
 8006f8e:	e7b8      	b.n	8006f02 <_dtoa_r+0x292>
 8006f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f92:	9a01      	ldr	r2, [sp, #4]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	2b0e      	cmp	r3, #14
 8006f9a:	f200 809d 	bhi.w	80070d8 <_dtoa_r+0x468>
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	f000 809a 	beq.w	80070d8 <_dtoa_r+0x468>
 8006fa4:	9b00      	ldr	r3, [sp, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dd32      	ble.n	8007010 <_dtoa_r+0x3a0>
 8006faa:	4ab7      	ldr	r2, [pc, #732]	; (8007288 <_dtoa_r+0x618>)
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fb8:	9b00      	ldr	r3, [sp, #0]
 8006fba:	05d8      	lsls	r0, r3, #23
 8006fbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006fc0:	d516      	bpl.n	8006ff0 <_dtoa_r+0x380>
 8006fc2:	4bb2      	ldr	r3, [pc, #712]	; (800728c <_dtoa_r+0x61c>)
 8006fc4:	ec51 0b19 	vmov	r0, r1, d9
 8006fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fcc:	f7f9 fc3e 	bl	800084c <__aeabi_ddiv>
 8006fd0:	f007 070f 	and.w	r7, r7, #15
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	468b      	mov	fp, r1
 8006fd8:	2503      	movs	r5, #3
 8006fda:	4eac      	ldr	r6, [pc, #688]	; (800728c <_dtoa_r+0x61c>)
 8006fdc:	b957      	cbnz	r7, 8006ff4 <_dtoa_r+0x384>
 8006fde:	4642      	mov	r2, r8
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	f7f9 fc31 	bl	800084c <__aeabi_ddiv>
 8006fea:	4682      	mov	sl, r0
 8006fec:	468b      	mov	fp, r1
 8006fee:	e028      	b.n	8007042 <_dtoa_r+0x3d2>
 8006ff0:	2502      	movs	r5, #2
 8006ff2:	e7f2      	b.n	8006fda <_dtoa_r+0x36a>
 8006ff4:	07f9      	lsls	r1, r7, #31
 8006ff6:	d508      	bpl.n	800700a <_dtoa_r+0x39a>
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007000:	f7f9 fafa 	bl	80005f8 <__aeabi_dmul>
 8007004:	3501      	adds	r5, #1
 8007006:	4680      	mov	r8, r0
 8007008:	4689      	mov	r9, r1
 800700a:	107f      	asrs	r7, r7, #1
 800700c:	3608      	adds	r6, #8
 800700e:	e7e5      	b.n	8006fdc <_dtoa_r+0x36c>
 8007010:	f000 809b 	beq.w	800714a <_dtoa_r+0x4da>
 8007014:	9b00      	ldr	r3, [sp, #0]
 8007016:	4f9d      	ldr	r7, [pc, #628]	; (800728c <_dtoa_r+0x61c>)
 8007018:	425e      	negs	r6, r3
 800701a:	4b9b      	ldr	r3, [pc, #620]	; (8007288 <_dtoa_r+0x618>)
 800701c:	f006 020f 	and.w	r2, r6, #15
 8007020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	ec51 0b19 	vmov	r0, r1, d9
 800702c:	f7f9 fae4 	bl	80005f8 <__aeabi_dmul>
 8007030:	1136      	asrs	r6, r6, #4
 8007032:	4682      	mov	sl, r0
 8007034:	468b      	mov	fp, r1
 8007036:	2300      	movs	r3, #0
 8007038:	2502      	movs	r5, #2
 800703a:	2e00      	cmp	r6, #0
 800703c:	d17a      	bne.n	8007134 <_dtoa_r+0x4c4>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d3      	bne.n	8006fea <_dtoa_r+0x37a>
 8007042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8082 	beq.w	800714e <_dtoa_r+0x4de>
 800704a:	4b91      	ldr	r3, [pc, #580]	; (8007290 <_dtoa_r+0x620>)
 800704c:	2200      	movs	r2, #0
 800704e:	4650      	mov	r0, sl
 8007050:	4659      	mov	r1, fp
 8007052:	f7f9 fd43 	bl	8000adc <__aeabi_dcmplt>
 8007056:	2800      	cmp	r0, #0
 8007058:	d079      	beq.n	800714e <_dtoa_r+0x4de>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d076      	beq.n	800714e <_dtoa_r+0x4de>
 8007060:	9b02      	ldr	r3, [sp, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dd36      	ble.n	80070d4 <_dtoa_r+0x464>
 8007066:	9b00      	ldr	r3, [sp, #0]
 8007068:	4650      	mov	r0, sl
 800706a:	4659      	mov	r1, fp
 800706c:	1e5f      	subs	r7, r3, #1
 800706e:	2200      	movs	r2, #0
 8007070:	4b88      	ldr	r3, [pc, #544]	; (8007294 <_dtoa_r+0x624>)
 8007072:	f7f9 fac1 	bl	80005f8 <__aeabi_dmul>
 8007076:	9e02      	ldr	r6, [sp, #8]
 8007078:	4682      	mov	sl, r0
 800707a:	468b      	mov	fp, r1
 800707c:	3501      	adds	r5, #1
 800707e:	4628      	mov	r0, r5
 8007080:	f7f9 fa50 	bl	8000524 <__aeabi_i2d>
 8007084:	4652      	mov	r2, sl
 8007086:	465b      	mov	r3, fp
 8007088:	f7f9 fab6 	bl	80005f8 <__aeabi_dmul>
 800708c:	4b82      	ldr	r3, [pc, #520]	; (8007298 <_dtoa_r+0x628>)
 800708e:	2200      	movs	r2, #0
 8007090:	f7f9 f8fc 	bl	800028c <__adddf3>
 8007094:	46d0      	mov	r8, sl
 8007096:	46d9      	mov	r9, fp
 8007098:	4682      	mov	sl, r0
 800709a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800709e:	2e00      	cmp	r6, #0
 80070a0:	d158      	bne.n	8007154 <_dtoa_r+0x4e4>
 80070a2:	4b7e      	ldr	r3, [pc, #504]	; (800729c <_dtoa_r+0x62c>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	4640      	mov	r0, r8
 80070a8:	4649      	mov	r1, r9
 80070aa:	f7f9 f8ed 	bl	8000288 <__aeabi_dsub>
 80070ae:	4652      	mov	r2, sl
 80070b0:	465b      	mov	r3, fp
 80070b2:	4680      	mov	r8, r0
 80070b4:	4689      	mov	r9, r1
 80070b6:	f7f9 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f040 8295 	bne.w	80075ea <_dtoa_r+0x97a>
 80070c0:	4652      	mov	r2, sl
 80070c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80070c6:	4640      	mov	r0, r8
 80070c8:	4649      	mov	r1, r9
 80070ca:	f7f9 fd07 	bl	8000adc <__aeabi_dcmplt>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f040 8289 	bne.w	80075e6 <_dtoa_r+0x976>
 80070d4:	ec5b ab19 	vmov	sl, fp, d9
 80070d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f2c0 8148 	blt.w	8007370 <_dtoa_r+0x700>
 80070e0:	9a00      	ldr	r2, [sp, #0]
 80070e2:	2a0e      	cmp	r2, #14
 80070e4:	f300 8144 	bgt.w	8007370 <_dtoa_r+0x700>
 80070e8:	4b67      	ldr	r3, [pc, #412]	; (8007288 <_dtoa_r+0x618>)
 80070ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f280 80d5 	bge.w	80072a4 <_dtoa_r+0x634>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f300 80d1 	bgt.w	80072a4 <_dtoa_r+0x634>
 8007102:	f040 826f 	bne.w	80075e4 <_dtoa_r+0x974>
 8007106:	4b65      	ldr	r3, [pc, #404]	; (800729c <_dtoa_r+0x62c>)
 8007108:	2200      	movs	r2, #0
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fa73 	bl	80005f8 <__aeabi_dmul>
 8007112:	4652      	mov	r2, sl
 8007114:	465b      	mov	r3, fp
 8007116:	f7f9 fcf5 	bl	8000b04 <__aeabi_dcmpge>
 800711a:	9e03      	ldr	r6, [sp, #12]
 800711c:	4637      	mov	r7, r6
 800711e:	2800      	cmp	r0, #0
 8007120:	f040 8245 	bne.w	80075ae <_dtoa_r+0x93e>
 8007124:	9d01      	ldr	r5, [sp, #4]
 8007126:	2331      	movs	r3, #49	; 0x31
 8007128:	f805 3b01 	strb.w	r3, [r5], #1
 800712c:	9b00      	ldr	r3, [sp, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	e240      	b.n	80075b6 <_dtoa_r+0x946>
 8007134:	07f2      	lsls	r2, r6, #31
 8007136:	d505      	bpl.n	8007144 <_dtoa_r+0x4d4>
 8007138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800713c:	f7f9 fa5c 	bl	80005f8 <__aeabi_dmul>
 8007140:	3501      	adds	r5, #1
 8007142:	2301      	movs	r3, #1
 8007144:	1076      	asrs	r6, r6, #1
 8007146:	3708      	adds	r7, #8
 8007148:	e777      	b.n	800703a <_dtoa_r+0x3ca>
 800714a:	2502      	movs	r5, #2
 800714c:	e779      	b.n	8007042 <_dtoa_r+0x3d2>
 800714e:	9f00      	ldr	r7, [sp, #0]
 8007150:	9e03      	ldr	r6, [sp, #12]
 8007152:	e794      	b.n	800707e <_dtoa_r+0x40e>
 8007154:	9901      	ldr	r1, [sp, #4]
 8007156:	4b4c      	ldr	r3, [pc, #304]	; (8007288 <_dtoa_r+0x618>)
 8007158:	4431      	add	r1, r6
 800715a:	910d      	str	r1, [sp, #52]	; 0x34
 800715c:	9908      	ldr	r1, [sp, #32]
 800715e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007166:	2900      	cmp	r1, #0
 8007168:	d043      	beq.n	80071f2 <_dtoa_r+0x582>
 800716a:	494d      	ldr	r1, [pc, #308]	; (80072a0 <_dtoa_r+0x630>)
 800716c:	2000      	movs	r0, #0
 800716e:	f7f9 fb6d 	bl	800084c <__aeabi_ddiv>
 8007172:	4652      	mov	r2, sl
 8007174:	465b      	mov	r3, fp
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	9d01      	ldr	r5, [sp, #4]
 800717c:	4682      	mov	sl, r0
 800717e:	468b      	mov	fp, r1
 8007180:	4649      	mov	r1, r9
 8007182:	4640      	mov	r0, r8
 8007184:	f7f9 fce8 	bl	8000b58 <__aeabi_d2iz>
 8007188:	4606      	mov	r6, r0
 800718a:	f7f9 f9cb 	bl	8000524 <__aeabi_i2d>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	f7f9 f877 	bl	8000288 <__aeabi_dsub>
 800719a:	3630      	adds	r6, #48	; 0x30
 800719c:	f805 6b01 	strb.w	r6, [r5], #1
 80071a0:	4652      	mov	r2, sl
 80071a2:	465b      	mov	r3, fp
 80071a4:	4680      	mov	r8, r0
 80071a6:	4689      	mov	r9, r1
 80071a8:	f7f9 fc98 	bl	8000adc <__aeabi_dcmplt>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d163      	bne.n	8007278 <_dtoa_r+0x608>
 80071b0:	4642      	mov	r2, r8
 80071b2:	464b      	mov	r3, r9
 80071b4:	4936      	ldr	r1, [pc, #216]	; (8007290 <_dtoa_r+0x620>)
 80071b6:	2000      	movs	r0, #0
 80071b8:	f7f9 f866 	bl	8000288 <__aeabi_dsub>
 80071bc:	4652      	mov	r2, sl
 80071be:	465b      	mov	r3, fp
 80071c0:	f7f9 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f040 80b5 	bne.w	8007334 <_dtoa_r+0x6c4>
 80071ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071cc:	429d      	cmp	r5, r3
 80071ce:	d081      	beq.n	80070d4 <_dtoa_r+0x464>
 80071d0:	4b30      	ldr	r3, [pc, #192]	; (8007294 <_dtoa_r+0x624>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	4650      	mov	r0, sl
 80071d6:	4659      	mov	r1, fp
 80071d8:	f7f9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80071dc:	4b2d      	ldr	r3, [pc, #180]	; (8007294 <_dtoa_r+0x624>)
 80071de:	4682      	mov	sl, r0
 80071e0:	468b      	mov	fp, r1
 80071e2:	4640      	mov	r0, r8
 80071e4:	4649      	mov	r1, r9
 80071e6:	2200      	movs	r2, #0
 80071e8:	f7f9 fa06 	bl	80005f8 <__aeabi_dmul>
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	e7c6      	b.n	8007180 <_dtoa_r+0x510>
 80071f2:	4650      	mov	r0, sl
 80071f4:	4659      	mov	r1, fp
 80071f6:	f7f9 f9ff 	bl	80005f8 <__aeabi_dmul>
 80071fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fc:	9d01      	ldr	r5, [sp, #4]
 80071fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007200:	4682      	mov	sl, r0
 8007202:	468b      	mov	fp, r1
 8007204:	4649      	mov	r1, r9
 8007206:	4640      	mov	r0, r8
 8007208:	f7f9 fca6 	bl	8000b58 <__aeabi_d2iz>
 800720c:	4606      	mov	r6, r0
 800720e:	f7f9 f989 	bl	8000524 <__aeabi_i2d>
 8007212:	3630      	adds	r6, #48	; 0x30
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4640      	mov	r0, r8
 800721a:	4649      	mov	r1, r9
 800721c:	f7f9 f834 	bl	8000288 <__aeabi_dsub>
 8007220:	f805 6b01 	strb.w	r6, [r5], #1
 8007224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007226:	429d      	cmp	r5, r3
 8007228:	4680      	mov	r8, r0
 800722a:	4689      	mov	r9, r1
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	d124      	bne.n	800727c <_dtoa_r+0x60c>
 8007232:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <_dtoa_r+0x630>)
 8007234:	4650      	mov	r0, sl
 8007236:	4659      	mov	r1, fp
 8007238:	f7f9 f828 	bl	800028c <__adddf3>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4640      	mov	r0, r8
 8007242:	4649      	mov	r1, r9
 8007244:	f7f9 fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8007248:	2800      	cmp	r0, #0
 800724a:	d173      	bne.n	8007334 <_dtoa_r+0x6c4>
 800724c:	4652      	mov	r2, sl
 800724e:	465b      	mov	r3, fp
 8007250:	4913      	ldr	r1, [pc, #76]	; (80072a0 <_dtoa_r+0x630>)
 8007252:	2000      	movs	r0, #0
 8007254:	f7f9 f818 	bl	8000288 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f9 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	f43f af35 	beq.w	80070d4 <_dtoa_r+0x464>
 800726a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800726c:	1e6b      	subs	r3, r5, #1
 800726e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007270:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007274:	2b30      	cmp	r3, #48	; 0x30
 8007276:	d0f8      	beq.n	800726a <_dtoa_r+0x5fa>
 8007278:	9700      	str	r7, [sp, #0]
 800727a:	e049      	b.n	8007310 <_dtoa_r+0x6a0>
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <_dtoa_r+0x624>)
 800727e:	f7f9 f9bb 	bl	80005f8 <__aeabi_dmul>
 8007282:	4680      	mov	r8, r0
 8007284:	4689      	mov	r9, r1
 8007286:	e7bd      	b.n	8007204 <_dtoa_r+0x594>
 8007288:	0800a4d0 	.word	0x0800a4d0
 800728c:	0800a4a8 	.word	0x0800a4a8
 8007290:	3ff00000 	.word	0x3ff00000
 8007294:	40240000 	.word	0x40240000
 8007298:	401c0000 	.word	0x401c0000
 800729c:	40140000 	.word	0x40140000
 80072a0:	3fe00000 	.word	0x3fe00000
 80072a4:	9d01      	ldr	r5, [sp, #4]
 80072a6:	4656      	mov	r6, sl
 80072a8:	465f      	mov	r7, fp
 80072aa:	4642      	mov	r2, r8
 80072ac:	464b      	mov	r3, r9
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	f7f9 facb 	bl	800084c <__aeabi_ddiv>
 80072b6:	f7f9 fc4f 	bl	8000b58 <__aeabi_d2iz>
 80072ba:	4682      	mov	sl, r0
 80072bc:	f7f9 f932 	bl	8000524 <__aeabi_i2d>
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	f7f9 f998 	bl	80005f8 <__aeabi_dmul>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80072d4:	f7f8 ffd8 	bl	8000288 <__aeabi_dsub>
 80072d8:	f805 6b01 	strb.w	r6, [r5], #1
 80072dc:	9e01      	ldr	r6, [sp, #4]
 80072de:	9f03      	ldr	r7, [sp, #12]
 80072e0:	1bae      	subs	r6, r5, r6
 80072e2:	42b7      	cmp	r7, r6
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	d135      	bne.n	8007356 <_dtoa_r+0x6e6>
 80072ea:	f7f8 ffcf 	bl	800028c <__adddf3>
 80072ee:	4642      	mov	r2, r8
 80072f0:	464b      	mov	r3, r9
 80072f2:	4606      	mov	r6, r0
 80072f4:	460f      	mov	r7, r1
 80072f6:	f7f9 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80072fa:	b9d0      	cbnz	r0, 8007332 <_dtoa_r+0x6c2>
 80072fc:	4642      	mov	r2, r8
 80072fe:	464b      	mov	r3, r9
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f9 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007308:	b110      	cbz	r0, 8007310 <_dtoa_r+0x6a0>
 800730a:	f01a 0f01 	tst.w	sl, #1
 800730e:	d110      	bne.n	8007332 <_dtoa_r+0x6c2>
 8007310:	4620      	mov	r0, r4
 8007312:	ee18 1a10 	vmov	r1, s16
 8007316:	f000 faf3 	bl	8007900 <_Bfree>
 800731a:	2300      	movs	r3, #0
 800731c:	9800      	ldr	r0, [sp, #0]
 800731e:	702b      	strb	r3, [r5, #0]
 8007320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007322:	3001      	adds	r0, #1
 8007324:	6018      	str	r0, [r3, #0]
 8007326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007328:	2b00      	cmp	r3, #0
 800732a:	f43f acf1 	beq.w	8006d10 <_dtoa_r+0xa0>
 800732e:	601d      	str	r5, [r3, #0]
 8007330:	e4ee      	b.n	8006d10 <_dtoa_r+0xa0>
 8007332:	9f00      	ldr	r7, [sp, #0]
 8007334:	462b      	mov	r3, r5
 8007336:	461d      	mov	r5, r3
 8007338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800733c:	2a39      	cmp	r2, #57	; 0x39
 800733e:	d106      	bne.n	800734e <_dtoa_r+0x6de>
 8007340:	9a01      	ldr	r2, [sp, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d1f7      	bne.n	8007336 <_dtoa_r+0x6c6>
 8007346:	9901      	ldr	r1, [sp, #4]
 8007348:	2230      	movs	r2, #48	; 0x30
 800734a:	3701      	adds	r7, #1
 800734c:	700a      	strb	r2, [r1, #0]
 800734e:	781a      	ldrb	r2, [r3, #0]
 8007350:	3201      	adds	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e790      	b.n	8007278 <_dtoa_r+0x608>
 8007356:	4ba6      	ldr	r3, [pc, #664]	; (80075f0 <_dtoa_r+0x980>)
 8007358:	2200      	movs	r2, #0
 800735a:	f7f9 f94d 	bl	80005f8 <__aeabi_dmul>
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4606      	mov	r6, r0
 8007364:	460f      	mov	r7, r1
 8007366:	f7f9 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800736a:	2800      	cmp	r0, #0
 800736c:	d09d      	beq.n	80072aa <_dtoa_r+0x63a>
 800736e:	e7cf      	b.n	8007310 <_dtoa_r+0x6a0>
 8007370:	9a08      	ldr	r2, [sp, #32]
 8007372:	2a00      	cmp	r2, #0
 8007374:	f000 80d7 	beq.w	8007526 <_dtoa_r+0x8b6>
 8007378:	9a06      	ldr	r2, [sp, #24]
 800737a:	2a01      	cmp	r2, #1
 800737c:	f300 80ba 	bgt.w	80074f4 <_dtoa_r+0x884>
 8007380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007382:	2a00      	cmp	r2, #0
 8007384:	f000 80b2 	beq.w	80074ec <_dtoa_r+0x87c>
 8007388:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800738c:	9e07      	ldr	r6, [sp, #28]
 800738e:	9d04      	ldr	r5, [sp, #16]
 8007390:	9a04      	ldr	r2, [sp, #16]
 8007392:	441a      	add	r2, r3
 8007394:	9204      	str	r2, [sp, #16]
 8007396:	9a05      	ldr	r2, [sp, #20]
 8007398:	2101      	movs	r1, #1
 800739a:	441a      	add	r2, r3
 800739c:	4620      	mov	r0, r4
 800739e:	9205      	str	r2, [sp, #20]
 80073a0:	f000 fb66 	bl	8007a70 <__i2b>
 80073a4:	4607      	mov	r7, r0
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	dd0c      	ble.n	80073c4 <_dtoa_r+0x754>
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd09      	ble.n	80073c4 <_dtoa_r+0x754>
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	bfa8      	it	ge
 80073b6:	462b      	movge	r3, r5
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	9204      	str	r2, [sp, #16]
 80073bc:	9a05      	ldr	r2, [sp, #20]
 80073be:	1aed      	subs	r5, r5, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	9305      	str	r3, [sp, #20]
 80073c4:	9b07      	ldr	r3, [sp, #28]
 80073c6:	b31b      	cbz	r3, 8007410 <_dtoa_r+0x7a0>
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80af 	beq.w	800752e <_dtoa_r+0x8be>
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	dd13      	ble.n	80073fc <_dtoa_r+0x78c>
 80073d4:	4639      	mov	r1, r7
 80073d6:	4632      	mov	r2, r6
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fc09 	bl	8007bf0 <__pow5mult>
 80073de:	ee18 2a10 	vmov	r2, s16
 80073e2:	4601      	mov	r1, r0
 80073e4:	4607      	mov	r7, r0
 80073e6:	4620      	mov	r0, r4
 80073e8:	f000 fb58 	bl	8007a9c <__multiply>
 80073ec:	ee18 1a10 	vmov	r1, s16
 80073f0:	4680      	mov	r8, r0
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 fa84 	bl	8007900 <_Bfree>
 80073f8:	ee08 8a10 	vmov	s16, r8
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	1b9a      	subs	r2, r3, r6
 8007400:	d006      	beq.n	8007410 <_dtoa_r+0x7a0>
 8007402:	ee18 1a10 	vmov	r1, s16
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fbf2 	bl	8007bf0 <__pow5mult>
 800740c:	ee08 0a10 	vmov	s16, r0
 8007410:	2101      	movs	r1, #1
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fb2c 	bl	8007a70 <__i2b>
 8007418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	4606      	mov	r6, r0
 800741e:	f340 8088 	ble.w	8007532 <_dtoa_r+0x8c2>
 8007422:	461a      	mov	r2, r3
 8007424:	4601      	mov	r1, r0
 8007426:	4620      	mov	r0, r4
 8007428:	f000 fbe2 	bl	8007bf0 <__pow5mult>
 800742c:	9b06      	ldr	r3, [sp, #24]
 800742e:	2b01      	cmp	r3, #1
 8007430:	4606      	mov	r6, r0
 8007432:	f340 8081 	ble.w	8007538 <_dtoa_r+0x8c8>
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	6933      	ldr	r3, [r6, #16]
 800743c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007440:	6918      	ldr	r0, [r3, #16]
 8007442:	f000 fac5 	bl	80079d0 <__hi0bits>
 8007446:	f1c0 0020 	rsb	r0, r0, #32
 800744a:	9b05      	ldr	r3, [sp, #20]
 800744c:	4418      	add	r0, r3
 800744e:	f010 001f 	ands.w	r0, r0, #31
 8007452:	f000 8092 	beq.w	800757a <_dtoa_r+0x90a>
 8007456:	f1c0 0320 	rsb	r3, r0, #32
 800745a:	2b04      	cmp	r3, #4
 800745c:	f340 808a 	ble.w	8007574 <_dtoa_r+0x904>
 8007460:	f1c0 001c 	rsb	r0, r0, #28
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	4403      	add	r3, r0
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	9b05      	ldr	r3, [sp, #20]
 800746c:	4403      	add	r3, r0
 800746e:	4405      	add	r5, r0
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	dd07      	ble.n	8007488 <_dtoa_r+0x818>
 8007478:	ee18 1a10 	vmov	r1, s16
 800747c:	461a      	mov	r2, r3
 800747e:	4620      	mov	r0, r4
 8007480:	f000 fc10 	bl	8007ca4 <__lshift>
 8007484:	ee08 0a10 	vmov	s16, r0
 8007488:	9b05      	ldr	r3, [sp, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dd05      	ble.n	800749a <_dtoa_r+0x82a>
 800748e:	4631      	mov	r1, r6
 8007490:	461a      	mov	r2, r3
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fc06 	bl	8007ca4 <__lshift>
 8007498:	4606      	mov	r6, r0
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d06e      	beq.n	800757e <_dtoa_r+0x90e>
 80074a0:	ee18 0a10 	vmov	r0, s16
 80074a4:	4631      	mov	r1, r6
 80074a6:	f000 fc6d 	bl	8007d84 <__mcmp>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	da67      	bge.n	800757e <_dtoa_r+0x90e>
 80074ae:	9b00      	ldr	r3, [sp, #0]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	ee18 1a10 	vmov	r1, s16
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	220a      	movs	r2, #10
 80074ba:	2300      	movs	r3, #0
 80074bc:	4620      	mov	r0, r4
 80074be:	f000 fa41 	bl	8007944 <__multadd>
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	ee08 0a10 	vmov	s16, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 81b1 	beq.w	8007830 <_dtoa_r+0xbc0>
 80074ce:	2300      	movs	r3, #0
 80074d0:	4639      	mov	r1, r7
 80074d2:	220a      	movs	r2, #10
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 fa35 	bl	8007944 <__multadd>
 80074da:	9b02      	ldr	r3, [sp, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	4607      	mov	r7, r0
 80074e0:	f300 808e 	bgt.w	8007600 <_dtoa_r+0x990>
 80074e4:	9b06      	ldr	r3, [sp, #24]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	dc51      	bgt.n	800758e <_dtoa_r+0x91e>
 80074ea:	e089      	b.n	8007600 <_dtoa_r+0x990>
 80074ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074f2:	e74b      	b.n	800738c <_dtoa_r+0x71c>
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	1e5e      	subs	r6, r3, #1
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	42b3      	cmp	r3, r6
 80074fc:	bfbf      	itttt	lt
 80074fe:	9b07      	ldrlt	r3, [sp, #28]
 8007500:	9607      	strlt	r6, [sp, #28]
 8007502:	1af2      	sublt	r2, r6, r3
 8007504:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007506:	bfb6      	itet	lt
 8007508:	189b      	addlt	r3, r3, r2
 800750a:	1b9e      	subge	r6, r3, r6
 800750c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	bfb8      	it	lt
 8007512:	2600      	movlt	r6, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	bfb7      	itett	lt
 8007518:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800751c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007520:	1a9d      	sublt	r5, r3, r2
 8007522:	2300      	movlt	r3, #0
 8007524:	e734      	b.n	8007390 <_dtoa_r+0x720>
 8007526:	9e07      	ldr	r6, [sp, #28]
 8007528:	9d04      	ldr	r5, [sp, #16]
 800752a:	9f08      	ldr	r7, [sp, #32]
 800752c:	e73b      	b.n	80073a6 <_dtoa_r+0x736>
 800752e:	9a07      	ldr	r2, [sp, #28]
 8007530:	e767      	b.n	8007402 <_dtoa_r+0x792>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	2b01      	cmp	r3, #1
 8007536:	dc18      	bgt.n	800756a <_dtoa_r+0x8fa>
 8007538:	f1ba 0f00 	cmp.w	sl, #0
 800753c:	d115      	bne.n	800756a <_dtoa_r+0x8fa>
 800753e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007542:	b993      	cbnz	r3, 800756a <_dtoa_r+0x8fa>
 8007544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007548:	0d1b      	lsrs	r3, r3, #20
 800754a:	051b      	lsls	r3, r3, #20
 800754c:	b183      	cbz	r3, 8007570 <_dtoa_r+0x900>
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	9b05      	ldr	r3, [sp, #20]
 8007556:	3301      	adds	r3, #1
 8007558:	9305      	str	r3, [sp, #20]
 800755a:	f04f 0801 	mov.w	r8, #1
 800755e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007560:	2b00      	cmp	r3, #0
 8007562:	f47f af6a 	bne.w	800743a <_dtoa_r+0x7ca>
 8007566:	2001      	movs	r0, #1
 8007568:	e76f      	b.n	800744a <_dtoa_r+0x7da>
 800756a:	f04f 0800 	mov.w	r8, #0
 800756e:	e7f6      	b.n	800755e <_dtoa_r+0x8ee>
 8007570:	4698      	mov	r8, r3
 8007572:	e7f4      	b.n	800755e <_dtoa_r+0x8ee>
 8007574:	f43f af7d 	beq.w	8007472 <_dtoa_r+0x802>
 8007578:	4618      	mov	r0, r3
 800757a:	301c      	adds	r0, #28
 800757c:	e772      	b.n	8007464 <_dtoa_r+0x7f4>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dc37      	bgt.n	80075f4 <_dtoa_r+0x984>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	2b02      	cmp	r3, #2
 8007588:	dd34      	ble.n	80075f4 <_dtoa_r+0x984>
 800758a:	9b03      	ldr	r3, [sp, #12]
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	9b02      	ldr	r3, [sp, #8]
 8007590:	b96b      	cbnz	r3, 80075ae <_dtoa_r+0x93e>
 8007592:	4631      	mov	r1, r6
 8007594:	2205      	movs	r2, #5
 8007596:	4620      	mov	r0, r4
 8007598:	f000 f9d4 	bl	8007944 <__multadd>
 800759c:	4601      	mov	r1, r0
 800759e:	4606      	mov	r6, r0
 80075a0:	ee18 0a10 	vmov	r0, s16
 80075a4:	f000 fbee 	bl	8007d84 <__mcmp>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	f73f adbb 	bgt.w	8007124 <_dtoa_r+0x4b4>
 80075ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b0:	9d01      	ldr	r5, [sp, #4]
 80075b2:	43db      	mvns	r3, r3
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	f04f 0800 	mov.w	r8, #0
 80075ba:	4631      	mov	r1, r6
 80075bc:	4620      	mov	r0, r4
 80075be:	f000 f99f 	bl	8007900 <_Bfree>
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	f43f aea4 	beq.w	8007310 <_dtoa_r+0x6a0>
 80075c8:	f1b8 0f00 	cmp.w	r8, #0
 80075cc:	d005      	beq.n	80075da <_dtoa_r+0x96a>
 80075ce:	45b8      	cmp	r8, r7
 80075d0:	d003      	beq.n	80075da <_dtoa_r+0x96a>
 80075d2:	4641      	mov	r1, r8
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 f993 	bl	8007900 <_Bfree>
 80075da:	4639      	mov	r1, r7
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 f98f 	bl	8007900 <_Bfree>
 80075e2:	e695      	b.n	8007310 <_dtoa_r+0x6a0>
 80075e4:	2600      	movs	r6, #0
 80075e6:	4637      	mov	r7, r6
 80075e8:	e7e1      	b.n	80075ae <_dtoa_r+0x93e>
 80075ea:	9700      	str	r7, [sp, #0]
 80075ec:	4637      	mov	r7, r6
 80075ee:	e599      	b.n	8007124 <_dtoa_r+0x4b4>
 80075f0:	40240000 	.word	0x40240000
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80ca 	beq.w	8007790 <_dtoa_r+0xb20>
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	9302      	str	r3, [sp, #8]
 8007600:	2d00      	cmp	r5, #0
 8007602:	dd05      	ble.n	8007610 <_dtoa_r+0x9a0>
 8007604:	4639      	mov	r1, r7
 8007606:	462a      	mov	r2, r5
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fb4b 	bl	8007ca4 <__lshift>
 800760e:	4607      	mov	r7, r0
 8007610:	f1b8 0f00 	cmp.w	r8, #0
 8007614:	d05b      	beq.n	80076ce <_dtoa_r+0xa5e>
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f931 	bl	8007880 <_Balloc>
 800761e:	4605      	mov	r5, r0
 8007620:	b928      	cbnz	r0, 800762e <_dtoa_r+0x9be>
 8007622:	4b87      	ldr	r3, [pc, #540]	; (8007840 <_dtoa_r+0xbd0>)
 8007624:	4602      	mov	r2, r0
 8007626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800762a:	f7ff bb3b 	b.w	8006ca4 <_dtoa_r+0x34>
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	3202      	adds	r2, #2
 8007632:	0092      	lsls	r2, r2, #2
 8007634:	f107 010c 	add.w	r1, r7, #12
 8007638:	300c      	adds	r0, #12
 800763a:	f000 f913 	bl	8007864 <memcpy>
 800763e:	2201      	movs	r2, #1
 8007640:	4629      	mov	r1, r5
 8007642:	4620      	mov	r0, r4
 8007644:	f000 fb2e 	bl	8007ca4 <__lshift>
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	f103 0901 	add.w	r9, r3, #1
 800764e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007652:	4413      	add	r3, r2
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	f00a 0301 	and.w	r3, sl, #1
 800765a:	46b8      	mov	r8, r7
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	4607      	mov	r7, r0
 8007660:	4631      	mov	r1, r6
 8007662:	ee18 0a10 	vmov	r0, s16
 8007666:	f7ff fa77 	bl	8006b58 <quorem>
 800766a:	4641      	mov	r1, r8
 800766c:	9002      	str	r0, [sp, #8]
 800766e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007672:	ee18 0a10 	vmov	r0, s16
 8007676:	f000 fb85 	bl	8007d84 <__mcmp>
 800767a:	463a      	mov	r2, r7
 800767c:	9003      	str	r0, [sp, #12]
 800767e:	4631      	mov	r1, r6
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fb9b 	bl	8007dbc <__mdiff>
 8007686:	68c2      	ldr	r2, [r0, #12]
 8007688:	f109 3bff 	add.w	fp, r9, #4294967295
 800768c:	4605      	mov	r5, r0
 800768e:	bb02      	cbnz	r2, 80076d2 <_dtoa_r+0xa62>
 8007690:	4601      	mov	r1, r0
 8007692:	ee18 0a10 	vmov	r0, s16
 8007696:	f000 fb75 	bl	8007d84 <__mcmp>
 800769a:	4602      	mov	r2, r0
 800769c:	4629      	mov	r1, r5
 800769e:	4620      	mov	r0, r4
 80076a0:	9207      	str	r2, [sp, #28]
 80076a2:	f000 f92d 	bl	8007900 <_Bfree>
 80076a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80076aa:	ea43 0102 	orr.w	r1, r3, r2
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	430b      	orrs	r3, r1
 80076b2:	464d      	mov	r5, r9
 80076b4:	d10f      	bne.n	80076d6 <_dtoa_r+0xa66>
 80076b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076ba:	d02a      	beq.n	8007712 <_dtoa_r+0xaa2>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dd02      	ble.n	80076c8 <_dtoa_r+0xa58>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80076c8:	f88b a000 	strb.w	sl, [fp]
 80076cc:	e775      	b.n	80075ba <_dtoa_r+0x94a>
 80076ce:	4638      	mov	r0, r7
 80076d0:	e7ba      	b.n	8007648 <_dtoa_r+0x9d8>
 80076d2:	2201      	movs	r2, #1
 80076d4:	e7e2      	b.n	800769c <_dtoa_r+0xa2c>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	db04      	blt.n	80076e6 <_dtoa_r+0xa76>
 80076dc:	9906      	ldr	r1, [sp, #24]
 80076de:	430b      	orrs	r3, r1
 80076e0:	9904      	ldr	r1, [sp, #16]
 80076e2:	430b      	orrs	r3, r1
 80076e4:	d122      	bne.n	800772c <_dtoa_r+0xabc>
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	ddee      	ble.n	80076c8 <_dtoa_r+0xa58>
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	2201      	movs	r2, #1
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fad7 	bl	8007ca4 <__lshift>
 80076f6:	4631      	mov	r1, r6
 80076f8:	ee08 0a10 	vmov	s16, r0
 80076fc:	f000 fb42 	bl	8007d84 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	dc03      	bgt.n	800770c <_dtoa_r+0xa9c>
 8007704:	d1e0      	bne.n	80076c8 <_dtoa_r+0xa58>
 8007706:	f01a 0f01 	tst.w	sl, #1
 800770a:	d0dd      	beq.n	80076c8 <_dtoa_r+0xa58>
 800770c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007710:	d1d7      	bne.n	80076c2 <_dtoa_r+0xa52>
 8007712:	2339      	movs	r3, #57	; 0x39
 8007714:	f88b 3000 	strb.w	r3, [fp]
 8007718:	462b      	mov	r3, r5
 800771a:	461d      	mov	r5, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007722:	2a39      	cmp	r2, #57	; 0x39
 8007724:	d071      	beq.n	800780a <_dtoa_r+0xb9a>
 8007726:	3201      	adds	r2, #1
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e746      	b.n	80075ba <_dtoa_r+0x94a>
 800772c:	2a00      	cmp	r2, #0
 800772e:	dd07      	ble.n	8007740 <_dtoa_r+0xad0>
 8007730:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007734:	d0ed      	beq.n	8007712 <_dtoa_r+0xaa2>
 8007736:	f10a 0301 	add.w	r3, sl, #1
 800773a:	f88b 3000 	strb.w	r3, [fp]
 800773e:	e73c      	b.n	80075ba <_dtoa_r+0x94a>
 8007740:	9b05      	ldr	r3, [sp, #20]
 8007742:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007746:	4599      	cmp	r9, r3
 8007748:	d047      	beq.n	80077da <_dtoa_r+0xb6a>
 800774a:	ee18 1a10 	vmov	r1, s16
 800774e:	2300      	movs	r3, #0
 8007750:	220a      	movs	r2, #10
 8007752:	4620      	mov	r0, r4
 8007754:	f000 f8f6 	bl	8007944 <__multadd>
 8007758:	45b8      	cmp	r8, r7
 800775a:	ee08 0a10 	vmov	s16, r0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	f04f 020a 	mov.w	r2, #10
 8007766:	4641      	mov	r1, r8
 8007768:	4620      	mov	r0, r4
 800776a:	d106      	bne.n	800777a <_dtoa_r+0xb0a>
 800776c:	f000 f8ea 	bl	8007944 <__multadd>
 8007770:	4680      	mov	r8, r0
 8007772:	4607      	mov	r7, r0
 8007774:	f109 0901 	add.w	r9, r9, #1
 8007778:	e772      	b.n	8007660 <_dtoa_r+0x9f0>
 800777a:	f000 f8e3 	bl	8007944 <__multadd>
 800777e:	4639      	mov	r1, r7
 8007780:	4680      	mov	r8, r0
 8007782:	2300      	movs	r3, #0
 8007784:	220a      	movs	r2, #10
 8007786:	4620      	mov	r0, r4
 8007788:	f000 f8dc 	bl	8007944 <__multadd>
 800778c:	4607      	mov	r7, r0
 800778e:	e7f1      	b.n	8007774 <_dtoa_r+0xb04>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	9302      	str	r3, [sp, #8]
 8007794:	9d01      	ldr	r5, [sp, #4]
 8007796:	ee18 0a10 	vmov	r0, s16
 800779a:	4631      	mov	r1, r6
 800779c:	f7ff f9dc 	bl	8006b58 <quorem>
 80077a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	f805 ab01 	strb.w	sl, [r5], #1
 80077aa:	1aea      	subs	r2, r5, r3
 80077ac:	9b02      	ldr	r3, [sp, #8]
 80077ae:	4293      	cmp	r3, r2
 80077b0:	dd09      	ble.n	80077c6 <_dtoa_r+0xb56>
 80077b2:	ee18 1a10 	vmov	r1, s16
 80077b6:	2300      	movs	r3, #0
 80077b8:	220a      	movs	r2, #10
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f8c2 	bl	8007944 <__multadd>
 80077c0:	ee08 0a10 	vmov	s16, r0
 80077c4:	e7e7      	b.n	8007796 <_dtoa_r+0xb26>
 80077c6:	9b02      	ldr	r3, [sp, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfc8      	it	gt
 80077cc:	461d      	movgt	r5, r3
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	bfd8      	it	le
 80077d2:	2501      	movle	r5, #1
 80077d4:	441d      	add	r5, r3
 80077d6:	f04f 0800 	mov.w	r8, #0
 80077da:	ee18 1a10 	vmov	r1, s16
 80077de:	2201      	movs	r2, #1
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fa5f 	bl	8007ca4 <__lshift>
 80077e6:	4631      	mov	r1, r6
 80077e8:	ee08 0a10 	vmov	s16, r0
 80077ec:	f000 faca 	bl	8007d84 <__mcmp>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	dc91      	bgt.n	8007718 <_dtoa_r+0xaa8>
 80077f4:	d102      	bne.n	80077fc <_dtoa_r+0xb8c>
 80077f6:	f01a 0f01 	tst.w	sl, #1
 80077fa:	d18d      	bne.n	8007718 <_dtoa_r+0xaa8>
 80077fc:	462b      	mov	r3, r5
 80077fe:	461d      	mov	r5, r3
 8007800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007804:	2a30      	cmp	r2, #48	; 0x30
 8007806:	d0fa      	beq.n	80077fe <_dtoa_r+0xb8e>
 8007808:	e6d7      	b.n	80075ba <_dtoa_r+0x94a>
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d184      	bne.n	800771a <_dtoa_r+0xaaa>
 8007810:	9b00      	ldr	r3, [sp, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2331      	movs	r3, #49	; 0x31
 8007818:	7013      	strb	r3, [r2, #0]
 800781a:	e6ce      	b.n	80075ba <_dtoa_r+0x94a>
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <_dtoa_r+0xbd4>)
 800781e:	f7ff ba95 	b.w	8006d4c <_dtoa_r+0xdc>
 8007822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f aa6e 	bne.w	8006d06 <_dtoa_r+0x96>
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <_dtoa_r+0xbd8>)
 800782c:	f7ff ba8e 	b.w	8006d4c <_dtoa_r+0xdc>
 8007830:	9b02      	ldr	r3, [sp, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dcae      	bgt.n	8007794 <_dtoa_r+0xb24>
 8007836:	9b06      	ldr	r3, [sp, #24]
 8007838:	2b02      	cmp	r3, #2
 800783a:	f73f aea8 	bgt.w	800758e <_dtoa_r+0x91e>
 800783e:	e7a9      	b.n	8007794 <_dtoa_r+0xb24>
 8007840:	0800a437 	.word	0x0800a437
 8007844:	0800a394 	.word	0x0800a394
 8007848:	0800a3b8 	.word	0x0800a3b8

0800784c <_localeconv_r>:
 800784c:	4800      	ldr	r0, [pc, #0]	; (8007850 <_localeconv_r+0x4>)
 800784e:	4770      	bx	lr
 8007850:	20000160 	.word	0x20000160

08007854 <malloc>:
 8007854:	4b02      	ldr	r3, [pc, #8]	; (8007860 <malloc+0xc>)
 8007856:	4601      	mov	r1, r0
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	f000 bc17 	b.w	800808c <_malloc_r>
 800785e:	bf00      	nop
 8007860:	2000000c 	.word	0x2000000c

08007864 <memcpy>:
 8007864:	440a      	add	r2, r1
 8007866:	4291      	cmp	r1, r2
 8007868:	f100 33ff 	add.w	r3, r0, #4294967295
 800786c:	d100      	bne.n	8007870 <memcpy+0xc>
 800786e:	4770      	bx	lr
 8007870:	b510      	push	{r4, lr}
 8007872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787a:	4291      	cmp	r1, r2
 800787c:	d1f9      	bne.n	8007872 <memcpy+0xe>
 800787e:	bd10      	pop	{r4, pc}

08007880 <_Balloc>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007884:	4604      	mov	r4, r0
 8007886:	460d      	mov	r5, r1
 8007888:	b976      	cbnz	r6, 80078a8 <_Balloc+0x28>
 800788a:	2010      	movs	r0, #16
 800788c:	f7ff ffe2 	bl	8007854 <malloc>
 8007890:	4602      	mov	r2, r0
 8007892:	6260      	str	r0, [r4, #36]	; 0x24
 8007894:	b920      	cbnz	r0, 80078a0 <_Balloc+0x20>
 8007896:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <_Balloc+0x78>)
 8007898:	4818      	ldr	r0, [pc, #96]	; (80078fc <_Balloc+0x7c>)
 800789a:	2166      	movs	r1, #102	; 0x66
 800789c:	f000 fc7a 	bl	8008194 <__assert_func>
 80078a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078a4:	6006      	str	r6, [r0, #0]
 80078a6:	60c6      	str	r6, [r0, #12]
 80078a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078aa:	68f3      	ldr	r3, [r6, #12]
 80078ac:	b183      	cbz	r3, 80078d0 <_Balloc+0x50>
 80078ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078b6:	b9b8      	cbnz	r0, 80078e8 <_Balloc+0x68>
 80078b8:	2101      	movs	r1, #1
 80078ba:	fa01 f605 	lsl.w	r6, r1, r5
 80078be:	1d72      	adds	r2, r6, #5
 80078c0:	0092      	lsls	r2, r2, #2
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 fb60 	bl	8007f88 <_calloc_r>
 80078c8:	b160      	cbz	r0, 80078e4 <_Balloc+0x64>
 80078ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078ce:	e00e      	b.n	80078ee <_Balloc+0x6e>
 80078d0:	2221      	movs	r2, #33	; 0x21
 80078d2:	2104      	movs	r1, #4
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fb57 	bl	8007f88 <_calloc_r>
 80078da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078dc:	60f0      	str	r0, [r6, #12]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e4      	bne.n	80078ae <_Balloc+0x2e>
 80078e4:	2000      	movs	r0, #0
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	6802      	ldr	r2, [r0, #0]
 80078ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078ee:	2300      	movs	r3, #0
 80078f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078f4:	e7f7      	b.n	80078e6 <_Balloc+0x66>
 80078f6:	bf00      	nop
 80078f8:	0800a3c5 	.word	0x0800a3c5
 80078fc:	0800a448 	.word	0x0800a448

08007900 <_Bfree>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007904:	4605      	mov	r5, r0
 8007906:	460c      	mov	r4, r1
 8007908:	b976      	cbnz	r6, 8007928 <_Bfree+0x28>
 800790a:	2010      	movs	r0, #16
 800790c:	f7ff ffa2 	bl	8007854 <malloc>
 8007910:	4602      	mov	r2, r0
 8007912:	6268      	str	r0, [r5, #36]	; 0x24
 8007914:	b920      	cbnz	r0, 8007920 <_Bfree+0x20>
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <_Bfree+0x3c>)
 8007918:	4809      	ldr	r0, [pc, #36]	; (8007940 <_Bfree+0x40>)
 800791a:	218a      	movs	r1, #138	; 0x8a
 800791c:	f000 fc3a 	bl	8008194 <__assert_func>
 8007920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007924:	6006      	str	r6, [r0, #0]
 8007926:	60c6      	str	r6, [r0, #12]
 8007928:	b13c      	cbz	r4, 800793a <_Bfree+0x3a>
 800792a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800792c:	6862      	ldr	r2, [r4, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007934:	6021      	str	r1, [r4, #0]
 8007936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	0800a3c5 	.word	0x0800a3c5
 8007940:	0800a448 	.word	0x0800a448

08007944 <__multadd>:
 8007944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007948:	690d      	ldr	r5, [r1, #16]
 800794a:	4607      	mov	r7, r0
 800794c:	460c      	mov	r4, r1
 800794e:	461e      	mov	r6, r3
 8007950:	f101 0c14 	add.w	ip, r1, #20
 8007954:	2000      	movs	r0, #0
 8007956:	f8dc 3000 	ldr.w	r3, [ip]
 800795a:	b299      	uxth	r1, r3
 800795c:	fb02 6101 	mla	r1, r2, r1, r6
 8007960:	0c1e      	lsrs	r6, r3, #16
 8007962:	0c0b      	lsrs	r3, r1, #16
 8007964:	fb02 3306 	mla	r3, r2, r6, r3
 8007968:	b289      	uxth	r1, r1
 800796a:	3001      	adds	r0, #1
 800796c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007970:	4285      	cmp	r5, r0
 8007972:	f84c 1b04 	str.w	r1, [ip], #4
 8007976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800797a:	dcec      	bgt.n	8007956 <__multadd+0x12>
 800797c:	b30e      	cbz	r6, 80079c2 <__multadd+0x7e>
 800797e:	68a3      	ldr	r3, [r4, #8]
 8007980:	42ab      	cmp	r3, r5
 8007982:	dc19      	bgt.n	80079b8 <__multadd+0x74>
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	4638      	mov	r0, r7
 8007988:	3101      	adds	r1, #1
 800798a:	f7ff ff79 	bl	8007880 <_Balloc>
 800798e:	4680      	mov	r8, r0
 8007990:	b928      	cbnz	r0, 800799e <__multadd+0x5a>
 8007992:	4602      	mov	r2, r0
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <__multadd+0x84>)
 8007996:	480d      	ldr	r0, [pc, #52]	; (80079cc <__multadd+0x88>)
 8007998:	21b5      	movs	r1, #181	; 0xb5
 800799a:	f000 fbfb 	bl	8008194 <__assert_func>
 800799e:	6922      	ldr	r2, [r4, #16]
 80079a0:	3202      	adds	r2, #2
 80079a2:	f104 010c 	add.w	r1, r4, #12
 80079a6:	0092      	lsls	r2, r2, #2
 80079a8:	300c      	adds	r0, #12
 80079aa:	f7ff ff5b 	bl	8007864 <memcpy>
 80079ae:	4621      	mov	r1, r4
 80079b0:	4638      	mov	r0, r7
 80079b2:	f7ff ffa5 	bl	8007900 <_Bfree>
 80079b6:	4644      	mov	r4, r8
 80079b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079bc:	3501      	adds	r5, #1
 80079be:	615e      	str	r6, [r3, #20]
 80079c0:	6125      	str	r5, [r4, #16]
 80079c2:	4620      	mov	r0, r4
 80079c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c8:	0800a437 	.word	0x0800a437
 80079cc:	0800a448 	.word	0x0800a448

080079d0 <__hi0bits>:
 80079d0:	0c03      	lsrs	r3, r0, #16
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	b9d3      	cbnz	r3, 8007a0c <__hi0bits+0x3c>
 80079d6:	0400      	lsls	r0, r0, #16
 80079d8:	2310      	movs	r3, #16
 80079da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079de:	bf04      	itt	eq
 80079e0:	0200      	lsleq	r0, r0, #8
 80079e2:	3308      	addeq	r3, #8
 80079e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079e8:	bf04      	itt	eq
 80079ea:	0100      	lsleq	r0, r0, #4
 80079ec:	3304      	addeq	r3, #4
 80079ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079f2:	bf04      	itt	eq
 80079f4:	0080      	lsleq	r0, r0, #2
 80079f6:	3302      	addeq	r3, #2
 80079f8:	2800      	cmp	r0, #0
 80079fa:	db05      	blt.n	8007a08 <__hi0bits+0x38>
 80079fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a00:	f103 0301 	add.w	r3, r3, #1
 8007a04:	bf08      	it	eq
 8007a06:	2320      	moveq	r3, #32
 8007a08:	4618      	mov	r0, r3
 8007a0a:	4770      	bx	lr
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e7e4      	b.n	80079da <__hi0bits+0xa>

08007a10 <__lo0bits>:
 8007a10:	6803      	ldr	r3, [r0, #0]
 8007a12:	f013 0207 	ands.w	r2, r3, #7
 8007a16:	4601      	mov	r1, r0
 8007a18:	d00b      	beq.n	8007a32 <__lo0bits+0x22>
 8007a1a:	07da      	lsls	r2, r3, #31
 8007a1c:	d423      	bmi.n	8007a66 <__lo0bits+0x56>
 8007a1e:	0798      	lsls	r0, r3, #30
 8007a20:	bf49      	itett	mi
 8007a22:	085b      	lsrmi	r3, r3, #1
 8007a24:	089b      	lsrpl	r3, r3, #2
 8007a26:	2001      	movmi	r0, #1
 8007a28:	600b      	strmi	r3, [r1, #0]
 8007a2a:	bf5c      	itt	pl
 8007a2c:	600b      	strpl	r3, [r1, #0]
 8007a2e:	2002      	movpl	r0, #2
 8007a30:	4770      	bx	lr
 8007a32:	b298      	uxth	r0, r3
 8007a34:	b9a8      	cbnz	r0, 8007a62 <__lo0bits+0x52>
 8007a36:	0c1b      	lsrs	r3, r3, #16
 8007a38:	2010      	movs	r0, #16
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	b90a      	cbnz	r2, 8007a42 <__lo0bits+0x32>
 8007a3e:	3008      	adds	r0, #8
 8007a40:	0a1b      	lsrs	r3, r3, #8
 8007a42:	071a      	lsls	r2, r3, #28
 8007a44:	bf04      	itt	eq
 8007a46:	091b      	lsreq	r3, r3, #4
 8007a48:	3004      	addeq	r0, #4
 8007a4a:	079a      	lsls	r2, r3, #30
 8007a4c:	bf04      	itt	eq
 8007a4e:	089b      	lsreq	r3, r3, #2
 8007a50:	3002      	addeq	r0, #2
 8007a52:	07da      	lsls	r2, r3, #31
 8007a54:	d403      	bmi.n	8007a5e <__lo0bits+0x4e>
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	f100 0001 	add.w	r0, r0, #1
 8007a5c:	d005      	beq.n	8007a6a <__lo0bits+0x5a>
 8007a5e:	600b      	str	r3, [r1, #0]
 8007a60:	4770      	bx	lr
 8007a62:	4610      	mov	r0, r2
 8007a64:	e7e9      	b.n	8007a3a <__lo0bits+0x2a>
 8007a66:	2000      	movs	r0, #0
 8007a68:	4770      	bx	lr
 8007a6a:	2020      	movs	r0, #32
 8007a6c:	4770      	bx	lr
	...

08007a70 <__i2b>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	460c      	mov	r4, r1
 8007a74:	2101      	movs	r1, #1
 8007a76:	f7ff ff03 	bl	8007880 <_Balloc>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	b928      	cbnz	r0, 8007a8a <__i2b+0x1a>
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <__i2b+0x24>)
 8007a80:	4805      	ldr	r0, [pc, #20]	; (8007a98 <__i2b+0x28>)
 8007a82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a86:	f000 fb85 	bl	8008194 <__assert_func>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	6144      	str	r4, [r0, #20]
 8007a8e:	6103      	str	r3, [r0, #16]
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	bf00      	nop
 8007a94:	0800a437 	.word	0x0800a437
 8007a98:	0800a448 	.word	0x0800a448

08007a9c <__multiply>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	4691      	mov	r9, r2
 8007aa2:	690a      	ldr	r2, [r1, #16]
 8007aa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	bfb8      	it	lt
 8007aac:	460b      	movlt	r3, r1
 8007aae:	460c      	mov	r4, r1
 8007ab0:	bfbc      	itt	lt
 8007ab2:	464c      	movlt	r4, r9
 8007ab4:	4699      	movlt	r9, r3
 8007ab6:	6927      	ldr	r7, [r4, #16]
 8007ab8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007abc:	68a3      	ldr	r3, [r4, #8]
 8007abe:	6861      	ldr	r1, [r4, #4]
 8007ac0:	eb07 060a 	add.w	r6, r7, sl
 8007ac4:	42b3      	cmp	r3, r6
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	bfb8      	it	lt
 8007aca:	3101      	addlt	r1, #1
 8007acc:	f7ff fed8 	bl	8007880 <_Balloc>
 8007ad0:	b930      	cbnz	r0, 8007ae0 <__multiply+0x44>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b44      	ldr	r3, [pc, #272]	; (8007be8 <__multiply+0x14c>)
 8007ad6:	4845      	ldr	r0, [pc, #276]	; (8007bec <__multiply+0x150>)
 8007ad8:	f240 115d 	movw	r1, #349	; 0x15d
 8007adc:	f000 fb5a 	bl	8008194 <__assert_func>
 8007ae0:	f100 0514 	add.w	r5, r0, #20
 8007ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ae8:	462b      	mov	r3, r5
 8007aea:	2200      	movs	r2, #0
 8007aec:	4543      	cmp	r3, r8
 8007aee:	d321      	bcc.n	8007b34 <__multiply+0x98>
 8007af0:	f104 0314 	add.w	r3, r4, #20
 8007af4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007af8:	f109 0314 	add.w	r3, r9, #20
 8007afc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	1b3a      	subs	r2, r7, r4
 8007b04:	3a15      	subs	r2, #21
 8007b06:	f022 0203 	bic.w	r2, r2, #3
 8007b0a:	3204      	adds	r2, #4
 8007b0c:	f104 0115 	add.w	r1, r4, #21
 8007b10:	428f      	cmp	r7, r1
 8007b12:	bf38      	it	cc
 8007b14:	2204      	movcc	r2, #4
 8007b16:	9201      	str	r2, [sp, #4]
 8007b18:	9a02      	ldr	r2, [sp, #8]
 8007b1a:	9303      	str	r3, [sp, #12]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d80c      	bhi.n	8007b3a <__multiply+0x9e>
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	dd03      	ble.n	8007b2c <__multiply+0x90>
 8007b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d05a      	beq.n	8007be2 <__multiply+0x146>
 8007b2c:	6106      	str	r6, [r0, #16]
 8007b2e:	b005      	add	sp, #20
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b34:	f843 2b04 	str.w	r2, [r3], #4
 8007b38:	e7d8      	b.n	8007aec <__multiply+0x50>
 8007b3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b3e:	f1ba 0f00 	cmp.w	sl, #0
 8007b42:	d024      	beq.n	8007b8e <__multiply+0xf2>
 8007b44:	f104 0e14 	add.w	lr, r4, #20
 8007b48:	46a9      	mov	r9, r5
 8007b4a:	f04f 0c00 	mov.w	ip, #0
 8007b4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b52:	f8d9 1000 	ldr.w	r1, [r9]
 8007b56:	fa1f fb82 	uxth.w	fp, r2
 8007b5a:	b289      	uxth	r1, r1
 8007b5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b64:	f8d9 2000 	ldr.w	r2, [r9]
 8007b68:	4461      	add	r1, ip
 8007b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b76:	b289      	uxth	r1, r1
 8007b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b7c:	4577      	cmp	r7, lr
 8007b7e:	f849 1b04 	str.w	r1, [r9], #4
 8007b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b86:	d8e2      	bhi.n	8007b4e <__multiply+0xb2>
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	f845 c002 	str.w	ip, [r5, r2]
 8007b8e:	9a03      	ldr	r2, [sp, #12]
 8007b90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b94:	3304      	adds	r3, #4
 8007b96:	f1b9 0f00 	cmp.w	r9, #0
 8007b9a:	d020      	beq.n	8007bde <__multiply+0x142>
 8007b9c:	6829      	ldr	r1, [r5, #0]
 8007b9e:	f104 0c14 	add.w	ip, r4, #20
 8007ba2:	46ae      	mov	lr, r5
 8007ba4:	f04f 0a00 	mov.w	sl, #0
 8007ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8007bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bb0:	fb09 220b 	mla	r2, r9, fp, r2
 8007bb4:	4492      	add	sl, r2
 8007bb6:	b289      	uxth	r1, r1
 8007bb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8007bc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007bc4:	f8be 1000 	ldrh.w	r1, [lr]
 8007bc8:	0c12      	lsrs	r2, r2, #16
 8007bca:	fb09 1102 	mla	r1, r9, r2, r1
 8007bce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007bd2:	4567      	cmp	r7, ip
 8007bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bd8:	d8e6      	bhi.n	8007ba8 <__multiply+0x10c>
 8007bda:	9a01      	ldr	r2, [sp, #4]
 8007bdc:	50a9      	str	r1, [r5, r2]
 8007bde:	3504      	adds	r5, #4
 8007be0:	e79a      	b.n	8007b18 <__multiply+0x7c>
 8007be2:	3e01      	subs	r6, #1
 8007be4:	e79c      	b.n	8007b20 <__multiply+0x84>
 8007be6:	bf00      	nop
 8007be8:	0800a437 	.word	0x0800a437
 8007bec:	0800a448 	.word	0x0800a448

08007bf0 <__pow5mult>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	f012 0203 	ands.w	r2, r2, #3
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	d007      	beq.n	8007c10 <__pow5mult+0x20>
 8007c00:	4c25      	ldr	r4, [pc, #148]	; (8007c98 <__pow5mult+0xa8>)
 8007c02:	3a01      	subs	r2, #1
 8007c04:	2300      	movs	r3, #0
 8007c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c0a:	f7ff fe9b 	bl	8007944 <__multadd>
 8007c0e:	4607      	mov	r7, r0
 8007c10:	10ad      	asrs	r5, r5, #2
 8007c12:	d03d      	beq.n	8007c90 <__pow5mult+0xa0>
 8007c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c16:	b97c      	cbnz	r4, 8007c38 <__pow5mult+0x48>
 8007c18:	2010      	movs	r0, #16
 8007c1a:	f7ff fe1b 	bl	8007854 <malloc>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6270      	str	r0, [r6, #36]	; 0x24
 8007c22:	b928      	cbnz	r0, 8007c30 <__pow5mult+0x40>
 8007c24:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <__pow5mult+0xac>)
 8007c26:	481e      	ldr	r0, [pc, #120]	; (8007ca0 <__pow5mult+0xb0>)
 8007c28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c2c:	f000 fab2 	bl	8008194 <__assert_func>
 8007c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c34:	6004      	str	r4, [r0, #0]
 8007c36:	60c4      	str	r4, [r0, #12]
 8007c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c40:	b94c      	cbnz	r4, 8007c56 <__pow5mult+0x66>
 8007c42:	f240 2171 	movw	r1, #625	; 0x271
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ff12 	bl	8007a70 <__i2b>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c52:	4604      	mov	r4, r0
 8007c54:	6003      	str	r3, [r0, #0]
 8007c56:	f04f 0900 	mov.w	r9, #0
 8007c5a:	07eb      	lsls	r3, r5, #31
 8007c5c:	d50a      	bpl.n	8007c74 <__pow5mult+0x84>
 8007c5e:	4639      	mov	r1, r7
 8007c60:	4622      	mov	r2, r4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff ff1a 	bl	8007a9c <__multiply>
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff fe47 	bl	8007900 <_Bfree>
 8007c72:	4647      	mov	r7, r8
 8007c74:	106d      	asrs	r5, r5, #1
 8007c76:	d00b      	beq.n	8007c90 <__pow5mult+0xa0>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	b938      	cbnz	r0, 8007c8c <__pow5mult+0x9c>
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7ff ff0b 	bl	8007a9c <__multiply>
 8007c86:	6020      	str	r0, [r4, #0]
 8007c88:	f8c0 9000 	str.w	r9, [r0]
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	e7e4      	b.n	8007c5a <__pow5mult+0x6a>
 8007c90:	4638      	mov	r0, r7
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	bf00      	nop
 8007c98:	0800a598 	.word	0x0800a598
 8007c9c:	0800a3c5 	.word	0x0800a3c5
 8007ca0:	0800a448 	.word	0x0800a448

08007ca4 <__lshift>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	6849      	ldr	r1, [r1, #4]
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4691      	mov	r9, r2
 8007cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cbc:	f108 0601 	add.w	r6, r8, #1
 8007cc0:	42b3      	cmp	r3, r6
 8007cc2:	db0b      	blt.n	8007cdc <__lshift+0x38>
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff fddb 	bl	8007880 <_Balloc>
 8007cca:	4605      	mov	r5, r0
 8007ccc:	b948      	cbnz	r0, 8007ce2 <__lshift+0x3e>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b2a      	ldr	r3, [pc, #168]	; (8007d7c <__lshift+0xd8>)
 8007cd2:	482b      	ldr	r0, [pc, #172]	; (8007d80 <__lshift+0xdc>)
 8007cd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cd8:	f000 fa5c 	bl	8008194 <__assert_func>
 8007cdc:	3101      	adds	r1, #1
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	e7ee      	b.n	8007cc0 <__lshift+0x1c>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f100 0114 	add.w	r1, r0, #20
 8007ce8:	f100 0210 	add.w	r2, r0, #16
 8007cec:	4618      	mov	r0, r3
 8007cee:	4553      	cmp	r3, sl
 8007cf0:	db37      	blt.n	8007d62 <__lshift+0xbe>
 8007cf2:	6920      	ldr	r0, [r4, #16]
 8007cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cf8:	f104 0314 	add.w	r3, r4, #20
 8007cfc:	f019 091f 	ands.w	r9, r9, #31
 8007d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d08:	d02f      	beq.n	8007d6a <__lshift+0xc6>
 8007d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d0e:	468a      	mov	sl, r1
 8007d10:	f04f 0c00 	mov.w	ip, #0
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	fa02 f209 	lsl.w	r2, r2, r9
 8007d1a:	ea42 020c 	orr.w	r2, r2, ip
 8007d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8007d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d26:	4298      	cmp	r0, r3
 8007d28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d2c:	d8f2      	bhi.n	8007d14 <__lshift+0x70>
 8007d2e:	1b03      	subs	r3, r0, r4
 8007d30:	3b15      	subs	r3, #21
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	3304      	adds	r3, #4
 8007d38:	f104 0215 	add.w	r2, r4, #21
 8007d3c:	4290      	cmp	r0, r2
 8007d3e:	bf38      	it	cc
 8007d40:	2304      	movcc	r3, #4
 8007d42:	f841 c003 	str.w	ip, [r1, r3]
 8007d46:	f1bc 0f00 	cmp.w	ip, #0
 8007d4a:	d001      	beq.n	8007d50 <__lshift+0xac>
 8007d4c:	f108 0602 	add.w	r6, r8, #2
 8007d50:	3e01      	subs	r6, #1
 8007d52:	4638      	mov	r0, r7
 8007d54:	612e      	str	r6, [r5, #16]
 8007d56:	4621      	mov	r1, r4
 8007d58:	f7ff fdd2 	bl	8007900 <_Bfree>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d66:	3301      	adds	r3, #1
 8007d68:	e7c1      	b.n	8007cee <__lshift+0x4a>
 8007d6a:	3904      	subs	r1, #4
 8007d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d74:	4298      	cmp	r0, r3
 8007d76:	d8f9      	bhi.n	8007d6c <__lshift+0xc8>
 8007d78:	e7ea      	b.n	8007d50 <__lshift+0xac>
 8007d7a:	bf00      	nop
 8007d7c:	0800a437 	.word	0x0800a437
 8007d80:	0800a448 	.word	0x0800a448

08007d84 <__mcmp>:
 8007d84:	b530      	push	{r4, r5, lr}
 8007d86:	6902      	ldr	r2, [r0, #16]
 8007d88:	690c      	ldr	r4, [r1, #16]
 8007d8a:	1b12      	subs	r2, r2, r4
 8007d8c:	d10e      	bne.n	8007dac <__mcmp+0x28>
 8007d8e:	f100 0314 	add.w	r3, r0, #20
 8007d92:	3114      	adds	r1, #20
 8007d94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007da0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007da4:	42a5      	cmp	r5, r4
 8007da6:	d003      	beq.n	8007db0 <__mcmp+0x2c>
 8007da8:	d305      	bcc.n	8007db6 <__mcmp+0x32>
 8007daa:	2201      	movs	r2, #1
 8007dac:	4610      	mov	r0, r2
 8007dae:	bd30      	pop	{r4, r5, pc}
 8007db0:	4283      	cmp	r3, r0
 8007db2:	d3f3      	bcc.n	8007d9c <__mcmp+0x18>
 8007db4:	e7fa      	b.n	8007dac <__mcmp+0x28>
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dba:	e7f7      	b.n	8007dac <__mcmp+0x28>

08007dbc <__mdiff>:
 8007dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4690      	mov	r8, r2
 8007dca:	f7ff ffdb 	bl	8007d84 <__mcmp>
 8007dce:	1e05      	subs	r5, r0, #0
 8007dd0:	d110      	bne.n	8007df4 <__mdiff+0x38>
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff fd53 	bl	8007880 <_Balloc>
 8007dda:	b930      	cbnz	r0, 8007dea <__mdiff+0x2e>
 8007ddc:	4b3a      	ldr	r3, [pc, #232]	; (8007ec8 <__mdiff+0x10c>)
 8007dde:	4602      	mov	r2, r0
 8007de0:	f240 2132 	movw	r1, #562	; 0x232
 8007de4:	4839      	ldr	r0, [pc, #228]	; (8007ecc <__mdiff+0x110>)
 8007de6:	f000 f9d5 	bl	8008194 <__assert_func>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	bfa4      	itt	ge
 8007df6:	4643      	movge	r3, r8
 8007df8:	46a0      	movge	r8, r4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e00:	bfa6      	itte	ge
 8007e02:	461c      	movge	r4, r3
 8007e04:	2500      	movge	r5, #0
 8007e06:	2501      	movlt	r5, #1
 8007e08:	f7ff fd3a 	bl	8007880 <_Balloc>
 8007e0c:	b920      	cbnz	r0, 8007e18 <__mdiff+0x5c>
 8007e0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ec8 <__mdiff+0x10c>)
 8007e10:	4602      	mov	r2, r0
 8007e12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e16:	e7e5      	b.n	8007de4 <__mdiff+0x28>
 8007e18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e1c:	6926      	ldr	r6, [r4, #16]
 8007e1e:	60c5      	str	r5, [r0, #12]
 8007e20:	f104 0914 	add.w	r9, r4, #20
 8007e24:	f108 0514 	add.w	r5, r8, #20
 8007e28:	f100 0e14 	add.w	lr, r0, #20
 8007e2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e34:	f108 0210 	add.w	r2, r8, #16
 8007e38:	46f2      	mov	sl, lr
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e44:	fa1f f883 	uxth.w	r8, r3
 8007e48:	fa11 f18b 	uxtah	r1, r1, fp
 8007e4c:	0c1b      	lsrs	r3, r3, #16
 8007e4e:	eba1 0808 	sub.w	r8, r1, r8
 8007e52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e5a:	fa1f f888 	uxth.w	r8, r8
 8007e5e:	1419      	asrs	r1, r3, #16
 8007e60:	454e      	cmp	r6, r9
 8007e62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e66:	f84a 3b04 	str.w	r3, [sl], #4
 8007e6a:	d8e7      	bhi.n	8007e3c <__mdiff+0x80>
 8007e6c:	1b33      	subs	r3, r6, r4
 8007e6e:	3b15      	subs	r3, #21
 8007e70:	f023 0303 	bic.w	r3, r3, #3
 8007e74:	3304      	adds	r3, #4
 8007e76:	3415      	adds	r4, #21
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	bf38      	it	cc
 8007e7c:	2304      	movcc	r3, #4
 8007e7e:	441d      	add	r5, r3
 8007e80:	4473      	add	r3, lr
 8007e82:	469e      	mov	lr, r3
 8007e84:	462e      	mov	r6, r5
 8007e86:	4566      	cmp	r6, ip
 8007e88:	d30e      	bcc.n	8007ea8 <__mdiff+0xec>
 8007e8a:	f10c 0203 	add.w	r2, ip, #3
 8007e8e:	1b52      	subs	r2, r2, r5
 8007e90:	f022 0203 	bic.w	r2, r2, #3
 8007e94:	3d03      	subs	r5, #3
 8007e96:	45ac      	cmp	ip, r5
 8007e98:	bf38      	it	cc
 8007e9a:	2200      	movcc	r2, #0
 8007e9c:	441a      	add	r2, r3
 8007e9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ea2:	b17b      	cbz	r3, 8007ec4 <__mdiff+0x108>
 8007ea4:	6107      	str	r7, [r0, #16]
 8007ea6:	e7a3      	b.n	8007df0 <__mdiff+0x34>
 8007ea8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007eac:	fa11 f288 	uxtah	r2, r1, r8
 8007eb0:	1414      	asrs	r4, r2, #16
 8007eb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007eb6:	b292      	uxth	r2, r2
 8007eb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ebc:	f84e 2b04 	str.w	r2, [lr], #4
 8007ec0:	1421      	asrs	r1, r4, #16
 8007ec2:	e7e0      	b.n	8007e86 <__mdiff+0xca>
 8007ec4:	3f01      	subs	r7, #1
 8007ec6:	e7ea      	b.n	8007e9e <__mdiff+0xe2>
 8007ec8:	0800a437 	.word	0x0800a437
 8007ecc:	0800a448 	.word	0x0800a448

08007ed0 <__d2b>:
 8007ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ed4:	4689      	mov	r9, r1
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	ec57 6b10 	vmov	r6, r7, d0
 8007edc:	4690      	mov	r8, r2
 8007ede:	f7ff fccf 	bl	8007880 <_Balloc>
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	b930      	cbnz	r0, 8007ef4 <__d2b+0x24>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <__d2b+0xb0>)
 8007eea:	4826      	ldr	r0, [pc, #152]	; (8007f84 <__d2b+0xb4>)
 8007eec:	f240 310a 	movw	r1, #778	; 0x30a
 8007ef0:	f000 f950 	bl	8008194 <__assert_func>
 8007ef4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007efc:	bb35      	cbnz	r5, 8007f4c <__d2b+0x7c>
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	d028      	beq.n	8007f56 <__d2b+0x86>
 8007f04:	4668      	mov	r0, sp
 8007f06:	9600      	str	r6, [sp, #0]
 8007f08:	f7ff fd82 	bl	8007a10 <__lo0bits>
 8007f0c:	9900      	ldr	r1, [sp, #0]
 8007f0e:	b300      	cbz	r0, 8007f52 <__d2b+0x82>
 8007f10:	9a01      	ldr	r2, [sp, #4]
 8007f12:	f1c0 0320 	rsb	r3, r0, #32
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	40c2      	lsrs	r2, r0
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	9201      	str	r2, [sp, #4]
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	61a3      	str	r3, [r4, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bf14      	ite	ne
 8007f2a:	2202      	movne	r2, #2
 8007f2c:	2201      	moveq	r2, #1
 8007f2e:	6122      	str	r2, [r4, #16]
 8007f30:	b1d5      	cbz	r5, 8007f68 <__d2b+0x98>
 8007f32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f36:	4405      	add	r5, r0
 8007f38:	f8c9 5000 	str.w	r5, [r9]
 8007f3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f40:	f8c8 0000 	str.w	r0, [r8]
 8007f44:	4620      	mov	r0, r4
 8007f46:	b003      	add	sp, #12
 8007f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f50:	e7d5      	b.n	8007efe <__d2b+0x2e>
 8007f52:	6161      	str	r1, [r4, #20]
 8007f54:	e7e5      	b.n	8007f22 <__d2b+0x52>
 8007f56:	a801      	add	r0, sp, #4
 8007f58:	f7ff fd5a 	bl	8007a10 <__lo0bits>
 8007f5c:	9b01      	ldr	r3, [sp, #4]
 8007f5e:	6163      	str	r3, [r4, #20]
 8007f60:	2201      	movs	r2, #1
 8007f62:	6122      	str	r2, [r4, #16]
 8007f64:	3020      	adds	r0, #32
 8007f66:	e7e3      	b.n	8007f30 <__d2b+0x60>
 8007f68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f70:	f8c9 0000 	str.w	r0, [r9]
 8007f74:	6918      	ldr	r0, [r3, #16]
 8007f76:	f7ff fd2b 	bl	80079d0 <__hi0bits>
 8007f7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f7e:	e7df      	b.n	8007f40 <__d2b+0x70>
 8007f80:	0800a437 	.word	0x0800a437
 8007f84:	0800a448 	.word	0x0800a448

08007f88 <_calloc_r>:
 8007f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f8a:	fba1 2402 	umull	r2, r4, r1, r2
 8007f8e:	b94c      	cbnz	r4, 8007fa4 <_calloc_r+0x1c>
 8007f90:	4611      	mov	r1, r2
 8007f92:	9201      	str	r2, [sp, #4]
 8007f94:	f000 f87a 	bl	800808c <_malloc_r>
 8007f98:	9a01      	ldr	r2, [sp, #4]
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	b930      	cbnz	r0, 8007fac <_calloc_r+0x24>
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	b003      	add	sp, #12
 8007fa2:	bd30      	pop	{r4, r5, pc}
 8007fa4:	220c      	movs	r2, #12
 8007fa6:	6002      	str	r2, [r0, #0]
 8007fa8:	2500      	movs	r5, #0
 8007faa:	e7f8      	b.n	8007f9e <_calloc_r+0x16>
 8007fac:	4621      	mov	r1, r4
 8007fae:	f7fe f961 	bl	8006274 <memset>
 8007fb2:	e7f4      	b.n	8007f9e <_calloc_r+0x16>

08007fb4 <_free_r>:
 8007fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	d044      	beq.n	8008044 <_free_r+0x90>
 8007fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fbe:	9001      	str	r0, [sp, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fc6:	bfb8      	it	lt
 8007fc8:	18e4      	addlt	r4, r4, r3
 8007fca:	f000 f925 	bl	8008218 <__malloc_lock>
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <_free_r+0x94>)
 8007fd0:	9801      	ldr	r0, [sp, #4]
 8007fd2:	6813      	ldr	r3, [r2, #0]
 8007fd4:	b933      	cbnz	r3, 8007fe4 <_free_r+0x30>
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	6014      	str	r4, [r2, #0]
 8007fda:	b003      	add	sp, #12
 8007fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe0:	f000 b920 	b.w	8008224 <__malloc_unlock>
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	d908      	bls.n	8007ffa <_free_r+0x46>
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	1961      	adds	r1, r4, r5
 8007fec:	428b      	cmp	r3, r1
 8007fee:	bf01      	itttt	eq
 8007ff0:	6819      	ldreq	r1, [r3, #0]
 8007ff2:	685b      	ldreq	r3, [r3, #4]
 8007ff4:	1949      	addeq	r1, r1, r5
 8007ff6:	6021      	streq	r1, [r4, #0]
 8007ff8:	e7ed      	b.n	8007fd6 <_free_r+0x22>
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b10b      	cbz	r3, 8008004 <_free_r+0x50>
 8008000:	42a3      	cmp	r3, r4
 8008002:	d9fa      	bls.n	8007ffa <_free_r+0x46>
 8008004:	6811      	ldr	r1, [r2, #0]
 8008006:	1855      	adds	r5, r2, r1
 8008008:	42a5      	cmp	r5, r4
 800800a:	d10b      	bne.n	8008024 <_free_r+0x70>
 800800c:	6824      	ldr	r4, [r4, #0]
 800800e:	4421      	add	r1, r4
 8008010:	1854      	adds	r4, r2, r1
 8008012:	42a3      	cmp	r3, r4
 8008014:	6011      	str	r1, [r2, #0]
 8008016:	d1e0      	bne.n	8007fda <_free_r+0x26>
 8008018:	681c      	ldr	r4, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	6053      	str	r3, [r2, #4]
 800801e:	4421      	add	r1, r4
 8008020:	6011      	str	r1, [r2, #0]
 8008022:	e7da      	b.n	8007fda <_free_r+0x26>
 8008024:	d902      	bls.n	800802c <_free_r+0x78>
 8008026:	230c      	movs	r3, #12
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	e7d6      	b.n	8007fda <_free_r+0x26>
 800802c:	6825      	ldr	r5, [r4, #0]
 800802e:	1961      	adds	r1, r4, r5
 8008030:	428b      	cmp	r3, r1
 8008032:	bf04      	itt	eq
 8008034:	6819      	ldreq	r1, [r3, #0]
 8008036:	685b      	ldreq	r3, [r3, #4]
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	bf04      	itt	eq
 800803c:	1949      	addeq	r1, r1, r5
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	6054      	str	r4, [r2, #4]
 8008042:	e7ca      	b.n	8007fda <_free_r+0x26>
 8008044:	b003      	add	sp, #12
 8008046:	bd30      	pop	{r4, r5, pc}
 8008048:	2000038c 	.word	0x2000038c

0800804c <sbrk_aligned>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4e0e      	ldr	r6, [pc, #56]	; (8008088 <sbrk_aligned+0x3c>)
 8008050:	460c      	mov	r4, r1
 8008052:	6831      	ldr	r1, [r6, #0]
 8008054:	4605      	mov	r5, r0
 8008056:	b911      	cbnz	r1, 800805e <sbrk_aligned+0x12>
 8008058:	f000 f88c 	bl	8008174 <_sbrk_r>
 800805c:	6030      	str	r0, [r6, #0]
 800805e:	4621      	mov	r1, r4
 8008060:	4628      	mov	r0, r5
 8008062:	f000 f887 	bl	8008174 <_sbrk_r>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d00a      	beq.n	8008080 <sbrk_aligned+0x34>
 800806a:	1cc4      	adds	r4, r0, #3
 800806c:	f024 0403 	bic.w	r4, r4, #3
 8008070:	42a0      	cmp	r0, r4
 8008072:	d007      	beq.n	8008084 <sbrk_aligned+0x38>
 8008074:	1a21      	subs	r1, r4, r0
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f87c 	bl	8008174 <_sbrk_r>
 800807c:	3001      	adds	r0, #1
 800807e:	d101      	bne.n	8008084 <sbrk_aligned+0x38>
 8008080:	f04f 34ff 	mov.w	r4, #4294967295
 8008084:	4620      	mov	r0, r4
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	20000390 	.word	0x20000390

0800808c <_malloc_r>:
 800808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008090:	1ccd      	adds	r5, r1, #3
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	2d00      	cmp	r5, #0
 80080a0:	4607      	mov	r7, r0
 80080a2:	db01      	blt.n	80080a8 <_malloc_r+0x1c>
 80080a4:	42a9      	cmp	r1, r5
 80080a6:	d905      	bls.n	80080b4 <_malloc_r+0x28>
 80080a8:	230c      	movs	r3, #12
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	2600      	movs	r6, #0
 80080ae:	4630      	mov	r0, r6
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	4e2e      	ldr	r6, [pc, #184]	; (8008170 <_malloc_r+0xe4>)
 80080b6:	f000 f8af 	bl	8008218 <__malloc_lock>
 80080ba:	6833      	ldr	r3, [r6, #0]
 80080bc:	461c      	mov	r4, r3
 80080be:	bb34      	cbnz	r4, 800810e <_malloc_r+0x82>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4638      	mov	r0, r7
 80080c4:	f7ff ffc2 	bl	800804c <sbrk_aligned>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	4604      	mov	r4, r0
 80080cc:	d14d      	bne.n	800816a <_malloc_r+0xde>
 80080ce:	6834      	ldr	r4, [r6, #0]
 80080d0:	4626      	mov	r6, r4
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	d140      	bne.n	8008158 <_malloc_r+0xcc>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	4631      	mov	r1, r6
 80080da:	4638      	mov	r0, r7
 80080dc:	eb04 0803 	add.w	r8, r4, r3
 80080e0:	f000 f848 	bl	8008174 <_sbrk_r>
 80080e4:	4580      	cmp	r8, r0
 80080e6:	d13a      	bne.n	800815e <_malloc_r+0xd2>
 80080e8:	6821      	ldr	r1, [r4, #0]
 80080ea:	3503      	adds	r5, #3
 80080ec:	1a6d      	subs	r5, r5, r1
 80080ee:	f025 0503 	bic.w	r5, r5, #3
 80080f2:	3508      	adds	r5, #8
 80080f4:	2d0c      	cmp	r5, #12
 80080f6:	bf38      	it	cc
 80080f8:	250c      	movcc	r5, #12
 80080fa:	4629      	mov	r1, r5
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ffa5 	bl	800804c <sbrk_aligned>
 8008102:	3001      	adds	r0, #1
 8008104:	d02b      	beq.n	800815e <_malloc_r+0xd2>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	442b      	add	r3, r5
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	e00e      	b.n	800812c <_malloc_r+0xa0>
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	1b52      	subs	r2, r2, r5
 8008112:	d41e      	bmi.n	8008152 <_malloc_r+0xc6>
 8008114:	2a0b      	cmp	r2, #11
 8008116:	d916      	bls.n	8008146 <_malloc_r+0xba>
 8008118:	1961      	adds	r1, r4, r5
 800811a:	42a3      	cmp	r3, r4
 800811c:	6025      	str	r5, [r4, #0]
 800811e:	bf18      	it	ne
 8008120:	6059      	strne	r1, [r3, #4]
 8008122:	6863      	ldr	r3, [r4, #4]
 8008124:	bf08      	it	eq
 8008126:	6031      	streq	r1, [r6, #0]
 8008128:	5162      	str	r2, [r4, r5]
 800812a:	604b      	str	r3, [r1, #4]
 800812c:	4638      	mov	r0, r7
 800812e:	f104 060b 	add.w	r6, r4, #11
 8008132:	f000 f877 	bl	8008224 <__malloc_unlock>
 8008136:	f026 0607 	bic.w	r6, r6, #7
 800813a:	1d23      	adds	r3, r4, #4
 800813c:	1af2      	subs	r2, r6, r3
 800813e:	d0b6      	beq.n	80080ae <_malloc_r+0x22>
 8008140:	1b9b      	subs	r3, r3, r6
 8008142:	50a3      	str	r3, [r4, r2]
 8008144:	e7b3      	b.n	80080ae <_malloc_r+0x22>
 8008146:	6862      	ldr	r2, [r4, #4]
 8008148:	42a3      	cmp	r3, r4
 800814a:	bf0c      	ite	eq
 800814c:	6032      	streq	r2, [r6, #0]
 800814e:	605a      	strne	r2, [r3, #4]
 8008150:	e7ec      	b.n	800812c <_malloc_r+0xa0>
 8008152:	4623      	mov	r3, r4
 8008154:	6864      	ldr	r4, [r4, #4]
 8008156:	e7b2      	b.n	80080be <_malloc_r+0x32>
 8008158:	4634      	mov	r4, r6
 800815a:	6876      	ldr	r6, [r6, #4]
 800815c:	e7b9      	b.n	80080d2 <_malloc_r+0x46>
 800815e:	230c      	movs	r3, #12
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	4638      	mov	r0, r7
 8008164:	f000 f85e 	bl	8008224 <__malloc_unlock>
 8008168:	e7a1      	b.n	80080ae <_malloc_r+0x22>
 800816a:	6025      	str	r5, [r4, #0]
 800816c:	e7de      	b.n	800812c <_malloc_r+0xa0>
 800816e:	bf00      	nop
 8008170:	2000038c 	.word	0x2000038c

08008174 <_sbrk_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d06      	ldr	r5, [pc, #24]	; (8008190 <_sbrk_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f9 fb9c 	bl	80018bc <_sbrk>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_sbrk_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_sbrk_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000394 	.word	0x20000394

08008194 <__assert_func>:
 8008194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008196:	4614      	mov	r4, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <__assert_func+0x2c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4605      	mov	r5, r0
 80081a0:	68d8      	ldr	r0, [r3, #12]
 80081a2:	b14c      	cbz	r4, 80081b8 <__assert_func+0x24>
 80081a4:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <__assert_func+0x30>)
 80081a6:	9100      	str	r1, [sp, #0]
 80081a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081ac:	4906      	ldr	r1, [pc, #24]	; (80081c8 <__assert_func+0x34>)
 80081ae:	462b      	mov	r3, r5
 80081b0:	f000 f80e 	bl	80081d0 <fiprintf>
 80081b4:	f000 fa64 	bl	8008680 <abort>
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__assert_func+0x38>)
 80081ba:	461c      	mov	r4, r3
 80081bc:	e7f3      	b.n	80081a6 <__assert_func+0x12>
 80081be:	bf00      	nop
 80081c0:	2000000c 	.word	0x2000000c
 80081c4:	0800a5a4 	.word	0x0800a5a4
 80081c8:	0800a5b1 	.word	0x0800a5b1
 80081cc:	0800a5df 	.word	0x0800a5df

080081d0 <fiprintf>:
 80081d0:	b40e      	push	{r1, r2, r3}
 80081d2:	b503      	push	{r0, r1, lr}
 80081d4:	4601      	mov	r1, r0
 80081d6:	ab03      	add	r3, sp, #12
 80081d8:	4805      	ldr	r0, [pc, #20]	; (80081f0 <fiprintf+0x20>)
 80081da:	f853 2b04 	ldr.w	r2, [r3], #4
 80081de:	6800      	ldr	r0, [r0, #0]
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	f000 f84f 	bl	8008284 <_vfiprintf_r>
 80081e6:	b002      	add	sp, #8
 80081e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081ec:	b003      	add	sp, #12
 80081ee:	4770      	bx	lr
 80081f0:	2000000c 	.word	0x2000000c

080081f4 <__ascii_mbtowc>:
 80081f4:	b082      	sub	sp, #8
 80081f6:	b901      	cbnz	r1, 80081fa <__ascii_mbtowc+0x6>
 80081f8:	a901      	add	r1, sp, #4
 80081fa:	b142      	cbz	r2, 800820e <__ascii_mbtowc+0x1a>
 80081fc:	b14b      	cbz	r3, 8008212 <__ascii_mbtowc+0x1e>
 80081fe:	7813      	ldrb	r3, [r2, #0]
 8008200:	600b      	str	r3, [r1, #0]
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	1e10      	subs	r0, r2, #0
 8008206:	bf18      	it	ne
 8008208:	2001      	movne	r0, #1
 800820a:	b002      	add	sp, #8
 800820c:	4770      	bx	lr
 800820e:	4610      	mov	r0, r2
 8008210:	e7fb      	b.n	800820a <__ascii_mbtowc+0x16>
 8008212:	f06f 0001 	mvn.w	r0, #1
 8008216:	e7f8      	b.n	800820a <__ascii_mbtowc+0x16>

08008218 <__malloc_lock>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__malloc_lock+0x8>)
 800821a:	f000 bbf1 	b.w	8008a00 <__retarget_lock_acquire_recursive>
 800821e:	bf00      	nop
 8008220:	20000398 	.word	0x20000398

08008224 <__malloc_unlock>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__malloc_unlock+0x8>)
 8008226:	f000 bbec 	b.w	8008a02 <__retarget_lock_release_recursive>
 800822a:	bf00      	nop
 800822c:	20000398 	.word	0x20000398

08008230 <__sfputc_r>:
 8008230:	6893      	ldr	r3, [r2, #8]
 8008232:	3b01      	subs	r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	b410      	push	{r4}
 8008238:	6093      	str	r3, [r2, #8]
 800823a:	da08      	bge.n	800824e <__sfputc_r+0x1e>
 800823c:	6994      	ldr	r4, [r2, #24]
 800823e:	42a3      	cmp	r3, r4
 8008240:	db01      	blt.n	8008246 <__sfputc_r+0x16>
 8008242:	290a      	cmp	r1, #10
 8008244:	d103      	bne.n	800824e <__sfputc_r+0x1e>
 8008246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800824a:	f000 b94b 	b.w	80084e4 <__swbuf_r>
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	1c58      	adds	r0, r3, #1
 8008252:	6010      	str	r0, [r2, #0]
 8008254:	7019      	strb	r1, [r3, #0]
 8008256:	4608      	mov	r0, r1
 8008258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800825c:	4770      	bx	lr

0800825e <__sfputs_r>:
 800825e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008260:	4606      	mov	r6, r0
 8008262:	460f      	mov	r7, r1
 8008264:	4614      	mov	r4, r2
 8008266:	18d5      	adds	r5, r2, r3
 8008268:	42ac      	cmp	r4, r5
 800826a:	d101      	bne.n	8008270 <__sfputs_r+0x12>
 800826c:	2000      	movs	r0, #0
 800826e:	e007      	b.n	8008280 <__sfputs_r+0x22>
 8008270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008274:	463a      	mov	r2, r7
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ffda 	bl	8008230 <__sfputc_r>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d1f3      	bne.n	8008268 <__sfputs_r+0xa>
 8008280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008284 <_vfiprintf_r>:
 8008284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008288:	460d      	mov	r5, r1
 800828a:	b09d      	sub	sp, #116	; 0x74
 800828c:	4614      	mov	r4, r2
 800828e:	4698      	mov	r8, r3
 8008290:	4606      	mov	r6, r0
 8008292:	b118      	cbz	r0, 800829c <_vfiprintf_r+0x18>
 8008294:	6983      	ldr	r3, [r0, #24]
 8008296:	b90b      	cbnz	r3, 800829c <_vfiprintf_r+0x18>
 8008298:	f000 fb14 	bl	80088c4 <__sinit>
 800829c:	4b89      	ldr	r3, [pc, #548]	; (80084c4 <_vfiprintf_r+0x240>)
 800829e:	429d      	cmp	r5, r3
 80082a0:	d11b      	bne.n	80082da <_vfiprintf_r+0x56>
 80082a2:	6875      	ldr	r5, [r6, #4]
 80082a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a6:	07d9      	lsls	r1, r3, #31
 80082a8:	d405      	bmi.n	80082b6 <_vfiprintf_r+0x32>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	059a      	lsls	r2, r3, #22
 80082ae:	d402      	bmi.n	80082b6 <_vfiprintf_r+0x32>
 80082b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b2:	f000 fba5 	bl	8008a00 <__retarget_lock_acquire_recursive>
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	071b      	lsls	r3, r3, #28
 80082ba:	d501      	bpl.n	80082c0 <_vfiprintf_r+0x3c>
 80082bc:	692b      	ldr	r3, [r5, #16]
 80082be:	b9eb      	cbnz	r3, 80082fc <_vfiprintf_r+0x78>
 80082c0:	4629      	mov	r1, r5
 80082c2:	4630      	mov	r0, r6
 80082c4:	f000 f96e 	bl	80085a4 <__swsetup_r>
 80082c8:	b1c0      	cbz	r0, 80082fc <_vfiprintf_r+0x78>
 80082ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082cc:	07dc      	lsls	r4, r3, #31
 80082ce:	d50e      	bpl.n	80082ee <_vfiprintf_r+0x6a>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	b01d      	add	sp, #116	; 0x74
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	4b7b      	ldr	r3, [pc, #492]	; (80084c8 <_vfiprintf_r+0x244>)
 80082dc:	429d      	cmp	r5, r3
 80082de:	d101      	bne.n	80082e4 <_vfiprintf_r+0x60>
 80082e0:	68b5      	ldr	r5, [r6, #8]
 80082e2:	e7df      	b.n	80082a4 <_vfiprintf_r+0x20>
 80082e4:	4b79      	ldr	r3, [pc, #484]	; (80084cc <_vfiprintf_r+0x248>)
 80082e6:	429d      	cmp	r5, r3
 80082e8:	bf08      	it	eq
 80082ea:	68f5      	ldreq	r5, [r6, #12]
 80082ec:	e7da      	b.n	80082a4 <_vfiprintf_r+0x20>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	0598      	lsls	r0, r3, #22
 80082f2:	d4ed      	bmi.n	80082d0 <_vfiprintf_r+0x4c>
 80082f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f6:	f000 fb84 	bl	8008a02 <__retarget_lock_release_recursive>
 80082fa:	e7e9      	b.n	80082d0 <_vfiprintf_r+0x4c>
 80082fc:	2300      	movs	r3, #0
 80082fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008300:	2320      	movs	r3, #32
 8008302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008306:	f8cd 800c 	str.w	r8, [sp, #12]
 800830a:	2330      	movs	r3, #48	; 0x30
 800830c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084d0 <_vfiprintf_r+0x24c>
 8008310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008314:	f04f 0901 	mov.w	r9, #1
 8008318:	4623      	mov	r3, r4
 800831a:	469a      	mov	sl, r3
 800831c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008320:	b10a      	cbz	r2, 8008326 <_vfiprintf_r+0xa2>
 8008322:	2a25      	cmp	r2, #37	; 0x25
 8008324:	d1f9      	bne.n	800831a <_vfiprintf_r+0x96>
 8008326:	ebba 0b04 	subs.w	fp, sl, r4
 800832a:	d00b      	beq.n	8008344 <_vfiprintf_r+0xc0>
 800832c:	465b      	mov	r3, fp
 800832e:	4622      	mov	r2, r4
 8008330:	4629      	mov	r1, r5
 8008332:	4630      	mov	r0, r6
 8008334:	f7ff ff93 	bl	800825e <__sfputs_r>
 8008338:	3001      	adds	r0, #1
 800833a:	f000 80aa 	beq.w	8008492 <_vfiprintf_r+0x20e>
 800833e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008340:	445a      	add	r2, fp
 8008342:	9209      	str	r2, [sp, #36]	; 0x24
 8008344:	f89a 3000 	ldrb.w	r3, [sl]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 80a2 	beq.w	8008492 <_vfiprintf_r+0x20e>
 800834e:	2300      	movs	r3, #0
 8008350:	f04f 32ff 	mov.w	r2, #4294967295
 8008354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008358:	f10a 0a01 	add.w	sl, sl, #1
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	9307      	str	r3, [sp, #28]
 8008360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008364:	931a      	str	r3, [sp, #104]	; 0x68
 8008366:	4654      	mov	r4, sl
 8008368:	2205      	movs	r2, #5
 800836a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836e:	4858      	ldr	r0, [pc, #352]	; (80084d0 <_vfiprintf_r+0x24c>)
 8008370:	f7f7 ff36 	bl	80001e0 <memchr>
 8008374:	9a04      	ldr	r2, [sp, #16]
 8008376:	b9d8      	cbnz	r0, 80083b0 <_vfiprintf_r+0x12c>
 8008378:	06d1      	lsls	r1, r2, #27
 800837a:	bf44      	itt	mi
 800837c:	2320      	movmi	r3, #32
 800837e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008382:	0713      	lsls	r3, r2, #28
 8008384:	bf44      	itt	mi
 8008386:	232b      	movmi	r3, #43	; 0x2b
 8008388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800838c:	f89a 3000 	ldrb.w	r3, [sl]
 8008390:	2b2a      	cmp	r3, #42	; 0x2a
 8008392:	d015      	beq.n	80083c0 <_vfiprintf_r+0x13c>
 8008394:	9a07      	ldr	r2, [sp, #28]
 8008396:	4654      	mov	r4, sl
 8008398:	2000      	movs	r0, #0
 800839a:	f04f 0c0a 	mov.w	ip, #10
 800839e:	4621      	mov	r1, r4
 80083a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a4:	3b30      	subs	r3, #48	; 0x30
 80083a6:	2b09      	cmp	r3, #9
 80083a8:	d94e      	bls.n	8008448 <_vfiprintf_r+0x1c4>
 80083aa:	b1b0      	cbz	r0, 80083da <_vfiprintf_r+0x156>
 80083ac:	9207      	str	r2, [sp, #28]
 80083ae:	e014      	b.n	80083da <_vfiprintf_r+0x156>
 80083b0:	eba0 0308 	sub.w	r3, r0, r8
 80083b4:	fa09 f303 	lsl.w	r3, r9, r3
 80083b8:	4313      	orrs	r3, r2
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	46a2      	mov	sl, r4
 80083be:	e7d2      	b.n	8008366 <_vfiprintf_r+0xe2>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	1d19      	adds	r1, r3, #4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	9103      	str	r1, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bfbb      	ittet	lt
 80083cc:	425b      	neglt	r3, r3
 80083ce:	f042 0202 	orrlt.w	r2, r2, #2
 80083d2:	9307      	strge	r3, [sp, #28]
 80083d4:	9307      	strlt	r3, [sp, #28]
 80083d6:	bfb8      	it	lt
 80083d8:	9204      	strlt	r2, [sp, #16]
 80083da:	7823      	ldrb	r3, [r4, #0]
 80083dc:	2b2e      	cmp	r3, #46	; 0x2e
 80083de:	d10c      	bne.n	80083fa <_vfiprintf_r+0x176>
 80083e0:	7863      	ldrb	r3, [r4, #1]
 80083e2:	2b2a      	cmp	r3, #42	; 0x2a
 80083e4:	d135      	bne.n	8008452 <_vfiprintf_r+0x1ce>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	1d1a      	adds	r2, r3, #4
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	9203      	str	r2, [sp, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bfb8      	it	lt
 80083f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083f6:	3402      	adds	r4, #2
 80083f8:	9305      	str	r3, [sp, #20]
 80083fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084e0 <_vfiprintf_r+0x25c>
 80083fe:	7821      	ldrb	r1, [r4, #0]
 8008400:	2203      	movs	r2, #3
 8008402:	4650      	mov	r0, sl
 8008404:	f7f7 feec 	bl	80001e0 <memchr>
 8008408:	b140      	cbz	r0, 800841c <_vfiprintf_r+0x198>
 800840a:	2340      	movs	r3, #64	; 0x40
 800840c:	eba0 000a 	sub.w	r0, r0, sl
 8008410:	fa03 f000 	lsl.w	r0, r3, r0
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	4303      	orrs	r3, r0
 8008418:	3401      	adds	r4, #1
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008420:	482c      	ldr	r0, [pc, #176]	; (80084d4 <_vfiprintf_r+0x250>)
 8008422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008426:	2206      	movs	r2, #6
 8008428:	f7f7 feda 	bl	80001e0 <memchr>
 800842c:	2800      	cmp	r0, #0
 800842e:	d03f      	beq.n	80084b0 <_vfiprintf_r+0x22c>
 8008430:	4b29      	ldr	r3, [pc, #164]	; (80084d8 <_vfiprintf_r+0x254>)
 8008432:	bb1b      	cbnz	r3, 800847c <_vfiprintf_r+0x1f8>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	3307      	adds	r3, #7
 8008438:	f023 0307 	bic.w	r3, r3, #7
 800843c:	3308      	adds	r3, #8
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008442:	443b      	add	r3, r7
 8008444:	9309      	str	r3, [sp, #36]	; 0x24
 8008446:	e767      	b.n	8008318 <_vfiprintf_r+0x94>
 8008448:	fb0c 3202 	mla	r2, ip, r2, r3
 800844c:	460c      	mov	r4, r1
 800844e:	2001      	movs	r0, #1
 8008450:	e7a5      	b.n	800839e <_vfiprintf_r+0x11a>
 8008452:	2300      	movs	r3, #0
 8008454:	3401      	adds	r4, #1
 8008456:	9305      	str	r3, [sp, #20]
 8008458:	4619      	mov	r1, r3
 800845a:	f04f 0c0a 	mov.w	ip, #10
 800845e:	4620      	mov	r0, r4
 8008460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008464:	3a30      	subs	r2, #48	; 0x30
 8008466:	2a09      	cmp	r2, #9
 8008468:	d903      	bls.n	8008472 <_vfiprintf_r+0x1ee>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0c5      	beq.n	80083fa <_vfiprintf_r+0x176>
 800846e:	9105      	str	r1, [sp, #20]
 8008470:	e7c3      	b.n	80083fa <_vfiprintf_r+0x176>
 8008472:	fb0c 2101 	mla	r1, ip, r1, r2
 8008476:	4604      	mov	r4, r0
 8008478:	2301      	movs	r3, #1
 800847a:	e7f0      	b.n	800845e <_vfiprintf_r+0x1da>
 800847c:	ab03      	add	r3, sp, #12
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	462a      	mov	r2, r5
 8008482:	4b16      	ldr	r3, [pc, #88]	; (80084dc <_vfiprintf_r+0x258>)
 8008484:	a904      	add	r1, sp, #16
 8008486:	4630      	mov	r0, r6
 8008488:	f7fd ff9c 	bl	80063c4 <_printf_float>
 800848c:	4607      	mov	r7, r0
 800848e:	1c78      	adds	r0, r7, #1
 8008490:	d1d6      	bne.n	8008440 <_vfiprintf_r+0x1bc>
 8008492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008494:	07d9      	lsls	r1, r3, #31
 8008496:	d405      	bmi.n	80084a4 <_vfiprintf_r+0x220>
 8008498:	89ab      	ldrh	r3, [r5, #12]
 800849a:	059a      	lsls	r2, r3, #22
 800849c:	d402      	bmi.n	80084a4 <_vfiprintf_r+0x220>
 800849e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a0:	f000 faaf 	bl	8008a02 <__retarget_lock_release_recursive>
 80084a4:	89ab      	ldrh	r3, [r5, #12]
 80084a6:	065b      	lsls	r3, r3, #25
 80084a8:	f53f af12 	bmi.w	80082d0 <_vfiprintf_r+0x4c>
 80084ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ae:	e711      	b.n	80082d4 <_vfiprintf_r+0x50>
 80084b0:	ab03      	add	r3, sp, #12
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	462a      	mov	r2, r5
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <_vfiprintf_r+0x258>)
 80084b8:	a904      	add	r1, sp, #16
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7fe fa26 	bl	800690c <_printf_i>
 80084c0:	e7e4      	b.n	800848c <_vfiprintf_r+0x208>
 80084c2:	bf00      	nop
 80084c4:	0800a71c 	.word	0x0800a71c
 80084c8:	0800a73c 	.word	0x0800a73c
 80084cc:	0800a6fc 	.word	0x0800a6fc
 80084d0:	0800a5ea 	.word	0x0800a5ea
 80084d4:	0800a5f4 	.word	0x0800a5f4
 80084d8:	080063c5 	.word	0x080063c5
 80084dc:	0800825f 	.word	0x0800825f
 80084e0:	0800a5f0 	.word	0x0800a5f0

080084e4 <__swbuf_r>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	460e      	mov	r6, r1
 80084e8:	4614      	mov	r4, r2
 80084ea:	4605      	mov	r5, r0
 80084ec:	b118      	cbz	r0, 80084f6 <__swbuf_r+0x12>
 80084ee:	6983      	ldr	r3, [r0, #24]
 80084f0:	b90b      	cbnz	r3, 80084f6 <__swbuf_r+0x12>
 80084f2:	f000 f9e7 	bl	80088c4 <__sinit>
 80084f6:	4b21      	ldr	r3, [pc, #132]	; (800857c <__swbuf_r+0x98>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	d12b      	bne.n	8008554 <__swbuf_r+0x70>
 80084fc:	686c      	ldr	r4, [r5, #4]
 80084fe:	69a3      	ldr	r3, [r4, #24]
 8008500:	60a3      	str	r3, [r4, #8]
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	071a      	lsls	r2, r3, #28
 8008506:	d52f      	bpl.n	8008568 <__swbuf_r+0x84>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	b36b      	cbz	r3, 8008568 <__swbuf_r+0x84>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	6820      	ldr	r0, [r4, #0]
 8008510:	1ac0      	subs	r0, r0, r3
 8008512:	6963      	ldr	r3, [r4, #20]
 8008514:	b2f6      	uxtb	r6, r6
 8008516:	4283      	cmp	r3, r0
 8008518:	4637      	mov	r7, r6
 800851a:	dc04      	bgt.n	8008526 <__swbuf_r+0x42>
 800851c:	4621      	mov	r1, r4
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f93c 	bl	800879c <_fflush_r>
 8008524:	bb30      	cbnz	r0, 8008574 <__swbuf_r+0x90>
 8008526:	68a3      	ldr	r3, [r4, #8]
 8008528:	3b01      	subs	r3, #1
 800852a:	60a3      	str	r3, [r4, #8]
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	701e      	strb	r6, [r3, #0]
 8008534:	6963      	ldr	r3, [r4, #20]
 8008536:	3001      	adds	r0, #1
 8008538:	4283      	cmp	r3, r0
 800853a:	d004      	beq.n	8008546 <__swbuf_r+0x62>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	07db      	lsls	r3, r3, #31
 8008540:	d506      	bpl.n	8008550 <__swbuf_r+0x6c>
 8008542:	2e0a      	cmp	r6, #10
 8008544:	d104      	bne.n	8008550 <__swbuf_r+0x6c>
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 f927 	bl	800879c <_fflush_r>
 800854e:	b988      	cbnz	r0, 8008574 <__swbuf_r+0x90>
 8008550:	4638      	mov	r0, r7
 8008552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <__swbuf_r+0x9c>)
 8008556:	429c      	cmp	r4, r3
 8008558:	d101      	bne.n	800855e <__swbuf_r+0x7a>
 800855a:	68ac      	ldr	r4, [r5, #8]
 800855c:	e7cf      	b.n	80084fe <__swbuf_r+0x1a>
 800855e:	4b09      	ldr	r3, [pc, #36]	; (8008584 <__swbuf_r+0xa0>)
 8008560:	429c      	cmp	r4, r3
 8008562:	bf08      	it	eq
 8008564:	68ec      	ldreq	r4, [r5, #12]
 8008566:	e7ca      	b.n	80084fe <__swbuf_r+0x1a>
 8008568:	4621      	mov	r1, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 f81a 	bl	80085a4 <__swsetup_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	d0cb      	beq.n	800850c <__swbuf_r+0x28>
 8008574:	f04f 37ff 	mov.w	r7, #4294967295
 8008578:	e7ea      	b.n	8008550 <__swbuf_r+0x6c>
 800857a:	bf00      	nop
 800857c:	0800a71c 	.word	0x0800a71c
 8008580:	0800a73c 	.word	0x0800a73c
 8008584:	0800a6fc 	.word	0x0800a6fc

08008588 <__ascii_wctomb>:
 8008588:	b149      	cbz	r1, 800859e <__ascii_wctomb+0x16>
 800858a:	2aff      	cmp	r2, #255	; 0xff
 800858c:	bf85      	ittet	hi
 800858e:	238a      	movhi	r3, #138	; 0x8a
 8008590:	6003      	strhi	r3, [r0, #0]
 8008592:	700a      	strbls	r2, [r1, #0]
 8008594:	f04f 30ff 	movhi.w	r0, #4294967295
 8008598:	bf98      	it	ls
 800859a:	2001      	movls	r0, #1
 800859c:	4770      	bx	lr
 800859e:	4608      	mov	r0, r1
 80085a0:	4770      	bx	lr
	...

080085a4 <__swsetup_r>:
 80085a4:	4b32      	ldr	r3, [pc, #200]	; (8008670 <__swsetup_r+0xcc>)
 80085a6:	b570      	push	{r4, r5, r6, lr}
 80085a8:	681d      	ldr	r5, [r3, #0]
 80085aa:	4606      	mov	r6, r0
 80085ac:	460c      	mov	r4, r1
 80085ae:	b125      	cbz	r5, 80085ba <__swsetup_r+0x16>
 80085b0:	69ab      	ldr	r3, [r5, #24]
 80085b2:	b913      	cbnz	r3, 80085ba <__swsetup_r+0x16>
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f985 	bl	80088c4 <__sinit>
 80085ba:	4b2e      	ldr	r3, [pc, #184]	; (8008674 <__swsetup_r+0xd0>)
 80085bc:	429c      	cmp	r4, r3
 80085be:	d10f      	bne.n	80085e0 <__swsetup_r+0x3c>
 80085c0:	686c      	ldr	r4, [r5, #4]
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085c8:	0719      	lsls	r1, r3, #28
 80085ca:	d42c      	bmi.n	8008626 <__swsetup_r+0x82>
 80085cc:	06dd      	lsls	r5, r3, #27
 80085ce:	d411      	bmi.n	80085f4 <__swsetup_r+0x50>
 80085d0:	2309      	movs	r3, #9
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	f04f 30ff 	mov.w	r0, #4294967295
 80085de:	e03e      	b.n	800865e <__swsetup_r+0xba>
 80085e0:	4b25      	ldr	r3, [pc, #148]	; (8008678 <__swsetup_r+0xd4>)
 80085e2:	429c      	cmp	r4, r3
 80085e4:	d101      	bne.n	80085ea <__swsetup_r+0x46>
 80085e6:	68ac      	ldr	r4, [r5, #8]
 80085e8:	e7eb      	b.n	80085c2 <__swsetup_r+0x1e>
 80085ea:	4b24      	ldr	r3, [pc, #144]	; (800867c <__swsetup_r+0xd8>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	bf08      	it	eq
 80085f0:	68ec      	ldreq	r4, [r5, #12]
 80085f2:	e7e6      	b.n	80085c2 <__swsetup_r+0x1e>
 80085f4:	0758      	lsls	r0, r3, #29
 80085f6:	d512      	bpl.n	800861e <__swsetup_r+0x7a>
 80085f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085fa:	b141      	cbz	r1, 800860e <__swsetup_r+0x6a>
 80085fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008600:	4299      	cmp	r1, r3
 8008602:	d002      	beq.n	800860a <__swsetup_r+0x66>
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff fcd5 	bl	8007fb4 <_free_r>
 800860a:	2300      	movs	r3, #0
 800860c:	6363      	str	r3, [r4, #52]	; 0x34
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	2300      	movs	r3, #0
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f043 0308 	orr.w	r3, r3, #8
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	b94b      	cbnz	r3, 800863e <__swsetup_r+0x9a>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008634:	d003      	beq.n	800863e <__swsetup_r+0x9a>
 8008636:	4621      	mov	r1, r4
 8008638:	4630      	mov	r0, r6
 800863a:	f000 fa09 	bl	8008a50 <__smakebuf_r>
 800863e:	89a0      	ldrh	r0, [r4, #12]
 8008640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008644:	f010 0301 	ands.w	r3, r0, #1
 8008648:	d00a      	beq.n	8008660 <__swsetup_r+0xbc>
 800864a:	2300      	movs	r3, #0
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	6963      	ldr	r3, [r4, #20]
 8008650:	425b      	negs	r3, r3
 8008652:	61a3      	str	r3, [r4, #24]
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	b943      	cbnz	r3, 800866a <__swsetup_r+0xc6>
 8008658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800865c:	d1ba      	bne.n	80085d4 <__swsetup_r+0x30>
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	0781      	lsls	r1, r0, #30
 8008662:	bf58      	it	pl
 8008664:	6963      	ldrpl	r3, [r4, #20]
 8008666:	60a3      	str	r3, [r4, #8]
 8008668:	e7f4      	b.n	8008654 <__swsetup_r+0xb0>
 800866a:	2000      	movs	r0, #0
 800866c:	e7f7      	b.n	800865e <__swsetup_r+0xba>
 800866e:	bf00      	nop
 8008670:	2000000c 	.word	0x2000000c
 8008674:	0800a71c 	.word	0x0800a71c
 8008678:	0800a73c 	.word	0x0800a73c
 800867c:	0800a6fc 	.word	0x0800a6fc

08008680 <abort>:
 8008680:	b508      	push	{r3, lr}
 8008682:	2006      	movs	r0, #6
 8008684:	f000 fa4c 	bl	8008b20 <raise>
 8008688:	2001      	movs	r0, #1
 800868a:	f7f9 f89f 	bl	80017cc <_exit>
	...

08008690 <__sflush_r>:
 8008690:	898a      	ldrh	r2, [r1, #12]
 8008692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008696:	4605      	mov	r5, r0
 8008698:	0710      	lsls	r0, r2, #28
 800869a:	460c      	mov	r4, r1
 800869c:	d458      	bmi.n	8008750 <__sflush_r+0xc0>
 800869e:	684b      	ldr	r3, [r1, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dc05      	bgt.n	80086b0 <__sflush_r+0x20>
 80086a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	dc02      	bgt.n	80086b0 <__sflush_r+0x20>
 80086aa:	2000      	movs	r0, #0
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	d0f9      	beq.n	80086aa <__sflush_r+0x1a>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086bc:	682f      	ldr	r7, [r5, #0]
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	d032      	beq.n	8008728 <__sflush_r+0x98>
 80086c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	075a      	lsls	r2, r3, #29
 80086c8:	d505      	bpl.n	80086d6 <__sflush_r+0x46>
 80086ca:	6863      	ldr	r3, [r4, #4]
 80086cc:	1ac0      	subs	r0, r0, r3
 80086ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086d0:	b10b      	cbz	r3, 80086d6 <__sflush_r+0x46>
 80086d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086d4:	1ac0      	subs	r0, r0, r3
 80086d6:	2300      	movs	r3, #0
 80086d8:	4602      	mov	r2, r0
 80086da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086dc:	6a21      	ldr	r1, [r4, #32]
 80086de:	4628      	mov	r0, r5
 80086e0:	47b0      	blx	r6
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	d106      	bne.n	80086f6 <__sflush_r+0x66>
 80086e8:	6829      	ldr	r1, [r5, #0]
 80086ea:	291d      	cmp	r1, #29
 80086ec:	d82c      	bhi.n	8008748 <__sflush_r+0xb8>
 80086ee:	4a2a      	ldr	r2, [pc, #168]	; (8008798 <__sflush_r+0x108>)
 80086f0:	40ca      	lsrs	r2, r1
 80086f2:	07d6      	lsls	r6, r2, #31
 80086f4:	d528      	bpl.n	8008748 <__sflush_r+0xb8>
 80086f6:	2200      	movs	r2, #0
 80086f8:	6062      	str	r2, [r4, #4]
 80086fa:	04d9      	lsls	r1, r3, #19
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	6022      	str	r2, [r4, #0]
 8008700:	d504      	bpl.n	800870c <__sflush_r+0x7c>
 8008702:	1c42      	adds	r2, r0, #1
 8008704:	d101      	bne.n	800870a <__sflush_r+0x7a>
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	b903      	cbnz	r3, 800870c <__sflush_r+0x7c>
 800870a:	6560      	str	r0, [r4, #84]	; 0x54
 800870c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800870e:	602f      	str	r7, [r5, #0]
 8008710:	2900      	cmp	r1, #0
 8008712:	d0ca      	beq.n	80086aa <__sflush_r+0x1a>
 8008714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008718:	4299      	cmp	r1, r3
 800871a:	d002      	beq.n	8008722 <__sflush_r+0x92>
 800871c:	4628      	mov	r0, r5
 800871e:	f7ff fc49 	bl	8007fb4 <_free_r>
 8008722:	2000      	movs	r0, #0
 8008724:	6360      	str	r0, [r4, #52]	; 0x34
 8008726:	e7c1      	b.n	80086ac <__sflush_r+0x1c>
 8008728:	6a21      	ldr	r1, [r4, #32]
 800872a:	2301      	movs	r3, #1
 800872c:	4628      	mov	r0, r5
 800872e:	47b0      	blx	r6
 8008730:	1c41      	adds	r1, r0, #1
 8008732:	d1c7      	bne.n	80086c4 <__sflush_r+0x34>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0c4      	beq.n	80086c4 <__sflush_r+0x34>
 800873a:	2b1d      	cmp	r3, #29
 800873c:	d001      	beq.n	8008742 <__sflush_r+0xb2>
 800873e:	2b16      	cmp	r3, #22
 8008740:	d101      	bne.n	8008746 <__sflush_r+0xb6>
 8008742:	602f      	str	r7, [r5, #0]
 8008744:	e7b1      	b.n	80086aa <__sflush_r+0x1a>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	e7ad      	b.n	80086ac <__sflush_r+0x1c>
 8008750:	690f      	ldr	r7, [r1, #16]
 8008752:	2f00      	cmp	r7, #0
 8008754:	d0a9      	beq.n	80086aa <__sflush_r+0x1a>
 8008756:	0793      	lsls	r3, r2, #30
 8008758:	680e      	ldr	r6, [r1, #0]
 800875a:	bf08      	it	eq
 800875c:	694b      	ldreq	r3, [r1, #20]
 800875e:	600f      	str	r7, [r1, #0]
 8008760:	bf18      	it	ne
 8008762:	2300      	movne	r3, #0
 8008764:	eba6 0807 	sub.w	r8, r6, r7
 8008768:	608b      	str	r3, [r1, #8]
 800876a:	f1b8 0f00 	cmp.w	r8, #0
 800876e:	dd9c      	ble.n	80086aa <__sflush_r+0x1a>
 8008770:	6a21      	ldr	r1, [r4, #32]
 8008772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008774:	4643      	mov	r3, r8
 8008776:	463a      	mov	r2, r7
 8008778:	4628      	mov	r0, r5
 800877a:	47b0      	blx	r6
 800877c:	2800      	cmp	r0, #0
 800877e:	dc06      	bgt.n	800878e <__sflush_r+0xfe>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	e78e      	b.n	80086ac <__sflush_r+0x1c>
 800878e:	4407      	add	r7, r0
 8008790:	eba8 0800 	sub.w	r8, r8, r0
 8008794:	e7e9      	b.n	800876a <__sflush_r+0xda>
 8008796:	bf00      	nop
 8008798:	20400001 	.word	0x20400001

0800879c <_fflush_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	690b      	ldr	r3, [r1, #16]
 80087a0:	4605      	mov	r5, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	b913      	cbnz	r3, 80087ac <_fflush_r+0x10>
 80087a6:	2500      	movs	r5, #0
 80087a8:	4628      	mov	r0, r5
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	b118      	cbz	r0, 80087b6 <_fflush_r+0x1a>
 80087ae:	6983      	ldr	r3, [r0, #24]
 80087b0:	b90b      	cbnz	r3, 80087b6 <_fflush_r+0x1a>
 80087b2:	f000 f887 	bl	80088c4 <__sinit>
 80087b6:	4b14      	ldr	r3, [pc, #80]	; (8008808 <_fflush_r+0x6c>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	d11b      	bne.n	80087f4 <_fflush_r+0x58>
 80087bc:	686c      	ldr	r4, [r5, #4]
 80087be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0ef      	beq.n	80087a6 <_fflush_r+0xa>
 80087c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087c8:	07d0      	lsls	r0, r2, #31
 80087ca:	d404      	bmi.n	80087d6 <_fflush_r+0x3a>
 80087cc:	0599      	lsls	r1, r3, #22
 80087ce:	d402      	bmi.n	80087d6 <_fflush_r+0x3a>
 80087d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d2:	f000 f915 	bl	8008a00 <__retarget_lock_acquire_recursive>
 80087d6:	4628      	mov	r0, r5
 80087d8:	4621      	mov	r1, r4
 80087da:	f7ff ff59 	bl	8008690 <__sflush_r>
 80087de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087e0:	07da      	lsls	r2, r3, #31
 80087e2:	4605      	mov	r5, r0
 80087e4:	d4e0      	bmi.n	80087a8 <_fflush_r+0xc>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	059b      	lsls	r3, r3, #22
 80087ea:	d4dd      	bmi.n	80087a8 <_fflush_r+0xc>
 80087ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ee:	f000 f908 	bl	8008a02 <__retarget_lock_release_recursive>
 80087f2:	e7d9      	b.n	80087a8 <_fflush_r+0xc>
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <_fflush_r+0x70>)
 80087f6:	429c      	cmp	r4, r3
 80087f8:	d101      	bne.n	80087fe <_fflush_r+0x62>
 80087fa:	68ac      	ldr	r4, [r5, #8]
 80087fc:	e7df      	b.n	80087be <_fflush_r+0x22>
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <_fflush_r+0x74>)
 8008800:	429c      	cmp	r4, r3
 8008802:	bf08      	it	eq
 8008804:	68ec      	ldreq	r4, [r5, #12]
 8008806:	e7da      	b.n	80087be <_fflush_r+0x22>
 8008808:	0800a71c 	.word	0x0800a71c
 800880c:	0800a73c 	.word	0x0800a73c
 8008810:	0800a6fc 	.word	0x0800a6fc

08008814 <std>:
 8008814:	2300      	movs	r3, #0
 8008816:	b510      	push	{r4, lr}
 8008818:	4604      	mov	r4, r0
 800881a:	e9c0 3300 	strd	r3, r3, [r0]
 800881e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008822:	6083      	str	r3, [r0, #8]
 8008824:	8181      	strh	r1, [r0, #12]
 8008826:	6643      	str	r3, [r0, #100]	; 0x64
 8008828:	81c2      	strh	r2, [r0, #14]
 800882a:	6183      	str	r3, [r0, #24]
 800882c:	4619      	mov	r1, r3
 800882e:	2208      	movs	r2, #8
 8008830:	305c      	adds	r0, #92	; 0x5c
 8008832:	f7fd fd1f 	bl	8006274 <memset>
 8008836:	4b05      	ldr	r3, [pc, #20]	; (800884c <std+0x38>)
 8008838:	6263      	str	r3, [r4, #36]	; 0x24
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <std+0x3c>)
 800883c:	62a3      	str	r3, [r4, #40]	; 0x28
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <std+0x40>)
 8008840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <std+0x44>)
 8008844:	6224      	str	r4, [r4, #32]
 8008846:	6323      	str	r3, [r4, #48]	; 0x30
 8008848:	bd10      	pop	{r4, pc}
 800884a:	bf00      	nop
 800884c:	08008b59 	.word	0x08008b59
 8008850:	08008b7b 	.word	0x08008b7b
 8008854:	08008bb3 	.word	0x08008bb3
 8008858:	08008bd7 	.word	0x08008bd7

0800885c <_cleanup_r>:
 800885c:	4901      	ldr	r1, [pc, #4]	; (8008864 <_cleanup_r+0x8>)
 800885e:	f000 b8af 	b.w	80089c0 <_fwalk_reent>
 8008862:	bf00      	nop
 8008864:	0800879d 	.word	0x0800879d

08008868 <__sfmoreglue>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	2268      	movs	r2, #104	; 0x68
 800886c:	1e4d      	subs	r5, r1, #1
 800886e:	4355      	muls	r5, r2
 8008870:	460e      	mov	r6, r1
 8008872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008876:	f7ff fc09 	bl	800808c <_malloc_r>
 800887a:	4604      	mov	r4, r0
 800887c:	b140      	cbz	r0, 8008890 <__sfmoreglue+0x28>
 800887e:	2100      	movs	r1, #0
 8008880:	e9c0 1600 	strd	r1, r6, [r0]
 8008884:	300c      	adds	r0, #12
 8008886:	60a0      	str	r0, [r4, #8]
 8008888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800888c:	f7fd fcf2 	bl	8006274 <memset>
 8008890:	4620      	mov	r0, r4
 8008892:	bd70      	pop	{r4, r5, r6, pc}

08008894 <__sfp_lock_acquire>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sfp_lock_acquire+0x8>)
 8008896:	f000 b8b3 	b.w	8008a00 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000399 	.word	0x20000399

080088a0 <__sfp_lock_release>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__sfp_lock_release+0x8>)
 80088a2:	f000 b8ae 	b.w	8008a02 <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000399 	.word	0x20000399

080088ac <__sinit_lock_acquire>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__sinit_lock_acquire+0x8>)
 80088ae:	f000 b8a7 	b.w	8008a00 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	2000039a 	.word	0x2000039a

080088b8 <__sinit_lock_release>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__sinit_lock_release+0x8>)
 80088ba:	f000 b8a2 	b.w	8008a02 <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	2000039a 	.word	0x2000039a

080088c4 <__sinit>:
 80088c4:	b510      	push	{r4, lr}
 80088c6:	4604      	mov	r4, r0
 80088c8:	f7ff fff0 	bl	80088ac <__sinit_lock_acquire>
 80088cc:	69a3      	ldr	r3, [r4, #24]
 80088ce:	b11b      	cbz	r3, 80088d8 <__sinit+0x14>
 80088d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d4:	f7ff bff0 	b.w	80088b8 <__sinit_lock_release>
 80088d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088dc:	6523      	str	r3, [r4, #80]	; 0x50
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <__sinit+0x68>)
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <__sinit+0x6c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	bf04      	itt	eq
 80088ea:	2301      	moveq	r3, #1
 80088ec:	61a3      	streq	r3, [r4, #24]
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 f820 	bl	8008934 <__sfp>
 80088f4:	6060      	str	r0, [r4, #4]
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 f81c 	bl	8008934 <__sfp>
 80088fc:	60a0      	str	r0, [r4, #8]
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 f818 	bl	8008934 <__sfp>
 8008904:	2200      	movs	r2, #0
 8008906:	60e0      	str	r0, [r4, #12]
 8008908:	2104      	movs	r1, #4
 800890a:	6860      	ldr	r0, [r4, #4]
 800890c:	f7ff ff82 	bl	8008814 <std>
 8008910:	68a0      	ldr	r0, [r4, #8]
 8008912:	2201      	movs	r2, #1
 8008914:	2109      	movs	r1, #9
 8008916:	f7ff ff7d 	bl	8008814 <std>
 800891a:	68e0      	ldr	r0, [r4, #12]
 800891c:	2202      	movs	r2, #2
 800891e:	2112      	movs	r1, #18
 8008920:	f7ff ff78 	bl	8008814 <std>
 8008924:	2301      	movs	r3, #1
 8008926:	61a3      	str	r3, [r4, #24]
 8008928:	e7d2      	b.n	80088d0 <__sinit+0xc>
 800892a:	bf00      	nop
 800892c:	0800a380 	.word	0x0800a380
 8008930:	0800885d 	.word	0x0800885d

08008934 <__sfp>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	4607      	mov	r7, r0
 8008938:	f7ff ffac 	bl	8008894 <__sfp_lock_acquire>
 800893c:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <__sfp+0x84>)
 800893e:	681e      	ldr	r6, [r3, #0]
 8008940:	69b3      	ldr	r3, [r6, #24]
 8008942:	b913      	cbnz	r3, 800894a <__sfp+0x16>
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff ffbd 	bl	80088c4 <__sinit>
 800894a:	3648      	adds	r6, #72	; 0x48
 800894c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008950:	3b01      	subs	r3, #1
 8008952:	d503      	bpl.n	800895c <__sfp+0x28>
 8008954:	6833      	ldr	r3, [r6, #0]
 8008956:	b30b      	cbz	r3, 800899c <__sfp+0x68>
 8008958:	6836      	ldr	r6, [r6, #0]
 800895a:	e7f7      	b.n	800894c <__sfp+0x18>
 800895c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008960:	b9d5      	cbnz	r5, 8008998 <__sfp+0x64>
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <__sfp+0x88>)
 8008964:	60e3      	str	r3, [r4, #12]
 8008966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800896a:	6665      	str	r5, [r4, #100]	; 0x64
 800896c:	f000 f847 	bl	80089fe <__retarget_lock_init_recursive>
 8008970:	f7ff ff96 	bl	80088a0 <__sfp_lock_release>
 8008974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800897c:	6025      	str	r5, [r4, #0]
 800897e:	61a5      	str	r5, [r4, #24]
 8008980:	2208      	movs	r2, #8
 8008982:	4629      	mov	r1, r5
 8008984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008988:	f7fd fc74 	bl	8006274 <memset>
 800898c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008994:	4620      	mov	r0, r4
 8008996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008998:	3468      	adds	r4, #104	; 0x68
 800899a:	e7d9      	b.n	8008950 <__sfp+0x1c>
 800899c:	2104      	movs	r1, #4
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ff62 	bl	8008868 <__sfmoreglue>
 80089a4:	4604      	mov	r4, r0
 80089a6:	6030      	str	r0, [r6, #0]
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d1d5      	bne.n	8008958 <__sfp+0x24>
 80089ac:	f7ff ff78 	bl	80088a0 <__sfp_lock_release>
 80089b0:	230c      	movs	r3, #12
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	e7ee      	b.n	8008994 <__sfp+0x60>
 80089b6:	bf00      	nop
 80089b8:	0800a380 	.word	0x0800a380
 80089bc:	ffff0001 	.word	0xffff0001

080089c0 <_fwalk_reent>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	4606      	mov	r6, r0
 80089c6:	4688      	mov	r8, r1
 80089c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089cc:	2700      	movs	r7, #0
 80089ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089d2:	f1b9 0901 	subs.w	r9, r9, #1
 80089d6:	d505      	bpl.n	80089e4 <_fwalk_reent+0x24>
 80089d8:	6824      	ldr	r4, [r4, #0]
 80089da:	2c00      	cmp	r4, #0
 80089dc:	d1f7      	bne.n	80089ce <_fwalk_reent+0xe>
 80089de:	4638      	mov	r0, r7
 80089e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e4:	89ab      	ldrh	r3, [r5, #12]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d907      	bls.n	80089fa <_fwalk_reent+0x3a>
 80089ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089ee:	3301      	adds	r3, #1
 80089f0:	d003      	beq.n	80089fa <_fwalk_reent+0x3a>
 80089f2:	4629      	mov	r1, r5
 80089f4:	4630      	mov	r0, r6
 80089f6:	47c0      	blx	r8
 80089f8:	4307      	orrs	r7, r0
 80089fa:	3568      	adds	r5, #104	; 0x68
 80089fc:	e7e9      	b.n	80089d2 <_fwalk_reent+0x12>

080089fe <__retarget_lock_init_recursive>:
 80089fe:	4770      	bx	lr

08008a00 <__retarget_lock_acquire_recursive>:
 8008a00:	4770      	bx	lr

08008a02 <__retarget_lock_release_recursive>:
 8008a02:	4770      	bx	lr

08008a04 <__swhatbuf_r>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	460e      	mov	r6, r1
 8008a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	b096      	sub	sp, #88	; 0x58
 8008a10:	4614      	mov	r4, r2
 8008a12:	461d      	mov	r5, r3
 8008a14:	da08      	bge.n	8008a28 <__swhatbuf_r+0x24>
 8008a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	061a      	lsls	r2, r3, #24
 8008a20:	d410      	bmi.n	8008a44 <__swhatbuf_r+0x40>
 8008a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a26:	e00e      	b.n	8008a46 <__swhatbuf_r+0x42>
 8008a28:	466a      	mov	r2, sp
 8008a2a:	f000 f8fb 	bl	8008c24 <_fstat_r>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	dbf1      	blt.n	8008a16 <__swhatbuf_r+0x12>
 8008a32:	9a01      	ldr	r2, [sp, #4]
 8008a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a3c:	425a      	negs	r2, r3
 8008a3e:	415a      	adcs	r2, r3
 8008a40:	602a      	str	r2, [r5, #0]
 8008a42:	e7ee      	b.n	8008a22 <__swhatbuf_r+0x1e>
 8008a44:	2340      	movs	r3, #64	; 0x40
 8008a46:	2000      	movs	r0, #0
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	b016      	add	sp, #88	; 0x58
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a50 <__smakebuf_r>:
 8008a50:	898b      	ldrh	r3, [r1, #12]
 8008a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a54:	079d      	lsls	r5, r3, #30
 8008a56:	4606      	mov	r6, r0
 8008a58:	460c      	mov	r4, r1
 8008a5a:	d507      	bpl.n	8008a6c <__smakebuf_r+0x1c>
 8008a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	2301      	movs	r3, #1
 8008a66:	6163      	str	r3, [r4, #20]
 8008a68:	b002      	add	sp, #8
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	ab01      	add	r3, sp, #4
 8008a6e:	466a      	mov	r2, sp
 8008a70:	f7ff ffc8 	bl	8008a04 <__swhatbuf_r>
 8008a74:	9900      	ldr	r1, [sp, #0]
 8008a76:	4605      	mov	r5, r0
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff fb07 	bl	800808c <_malloc_r>
 8008a7e:	b948      	cbnz	r0, 8008a94 <__smakebuf_r+0x44>
 8008a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a84:	059a      	lsls	r2, r3, #22
 8008a86:	d4ef      	bmi.n	8008a68 <__smakebuf_r+0x18>
 8008a88:	f023 0303 	bic.w	r3, r3, #3
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	e7e3      	b.n	8008a5c <__smakebuf_r+0xc>
 8008a94:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <__smakebuf_r+0x7c>)
 8008a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	6020      	str	r0, [r4, #0]
 8008a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	9b00      	ldr	r3, [sp, #0]
 8008aa4:	6163      	str	r3, [r4, #20]
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	6120      	str	r0, [r4, #16]
 8008aaa:	b15b      	cbz	r3, 8008ac4 <__smakebuf_r+0x74>
 8008aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 f8c9 	bl	8008c48 <_isatty_r>
 8008ab6:	b128      	cbz	r0, 8008ac4 <__smakebuf_r+0x74>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	89a0      	ldrh	r0, [r4, #12]
 8008ac6:	4305      	orrs	r5, r0
 8008ac8:	81a5      	strh	r5, [r4, #12]
 8008aca:	e7cd      	b.n	8008a68 <__smakebuf_r+0x18>
 8008acc:	0800885d 	.word	0x0800885d

08008ad0 <_raise_r>:
 8008ad0:	291f      	cmp	r1, #31
 8008ad2:	b538      	push	{r3, r4, r5, lr}
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	d904      	bls.n	8008ae4 <_raise_r+0x14>
 8008ada:	2316      	movs	r3, #22
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ae6:	b112      	cbz	r2, 8008aee <_raise_r+0x1e>
 8008ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008aec:	b94b      	cbnz	r3, 8008b02 <_raise_r+0x32>
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 f830 	bl	8008b54 <_getpid_r>
 8008af4:	462a      	mov	r2, r5
 8008af6:	4601      	mov	r1, r0
 8008af8:	4620      	mov	r0, r4
 8008afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afe:	f000 b817 	b.w	8008b30 <_kill_r>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d00a      	beq.n	8008b1c <_raise_r+0x4c>
 8008b06:	1c59      	adds	r1, r3, #1
 8008b08:	d103      	bne.n	8008b12 <_raise_r+0x42>
 8008b0a:	2316      	movs	r3, #22
 8008b0c:	6003      	str	r3, [r0, #0]
 8008b0e:	2001      	movs	r0, #1
 8008b10:	e7e7      	b.n	8008ae2 <_raise_r+0x12>
 8008b12:	2400      	movs	r4, #0
 8008b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b18:	4628      	mov	r0, r5
 8008b1a:	4798      	blx	r3
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	e7e0      	b.n	8008ae2 <_raise_r+0x12>

08008b20 <raise>:
 8008b20:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <raise+0xc>)
 8008b22:	4601      	mov	r1, r0
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f7ff bfd3 	b.w	8008ad0 <_raise_r>
 8008b2a:	bf00      	nop
 8008b2c:	2000000c 	.word	0x2000000c

08008b30 <_kill_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d07      	ldr	r5, [pc, #28]	; (8008b50 <_kill_r+0x20>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	f7f8 fe35 	bl	80017ac <_kill>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	d102      	bne.n	8008b4c <_kill_r+0x1c>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b103      	cbz	r3, 8008b4c <_kill_r+0x1c>
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000394 	.word	0x20000394

08008b54 <_getpid_r>:
 8008b54:	f7f8 be22 	b.w	800179c <_getpid>

08008b58 <__sread>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	f000 f894 	bl	8008c8c <_read_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	bfab      	itete	ge
 8008b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b6c:	181b      	addge	r3, r3, r0
 8008b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b72:	bfac      	ite	ge
 8008b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b76:	81a3      	strhlt	r3, [r4, #12]
 8008b78:	bd10      	pop	{r4, pc}

08008b7a <__swrite>:
 8008b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	461f      	mov	r7, r3
 8008b80:	898b      	ldrh	r3, [r1, #12]
 8008b82:	05db      	lsls	r3, r3, #23
 8008b84:	4605      	mov	r5, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	4616      	mov	r6, r2
 8008b8a:	d505      	bpl.n	8008b98 <__swrite+0x1e>
 8008b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b90:	2302      	movs	r3, #2
 8008b92:	2200      	movs	r2, #0
 8008b94:	f000 f868 	bl	8008c68 <_lseek_r>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	4628      	mov	r0, r5
 8008baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	f000 b817 	b.w	8008be0 <_write_r>

08008bb2 <__sseek>:
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bba:	f000 f855 	bl	8008c68 <_lseek_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	bf15      	itete	ne
 8008bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bce:	81a3      	strheq	r3, [r4, #12]
 8008bd0:	bf18      	it	ne
 8008bd2:	81a3      	strhne	r3, [r4, #12]
 8008bd4:	bd10      	pop	{r4, pc}

08008bd6 <__sclose>:
 8008bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bda:	f000 b813 	b.w	8008c04 <_close_r>
	...

08008be0 <_write_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	; (8008c00 <_write_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 fe13 	bl	800181a <_write>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_write_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_write_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20000394 	.word	0x20000394

08008c04 <_close_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d06      	ldr	r5, [pc, #24]	; (8008c20 <_close_r+0x1c>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7f8 fe1f 	bl	8001852 <_close>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_close_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_close_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20000394 	.word	0x20000394

08008c24 <_fstat_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_fstat_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fe1a 	bl	800186a <_fstat>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_fstat_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_fstat_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	20000394 	.word	0x20000394

08008c48 <_isatty_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	; (8008c64 <_isatty_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fe19 	bl	800188a <_isatty>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_isatty_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_isatty_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000394 	.word	0x20000394

08008c68 <_lseek_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d07      	ldr	r5, [pc, #28]	; (8008c88 <_lseek_r+0x20>)
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4611      	mov	r1, r2
 8008c72:	2200      	movs	r2, #0
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f7f8 fe12 	bl	80018a0 <_lseek>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_lseek_r+0x1e>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_lseek_r+0x1e>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20000394 	.word	0x20000394

08008c8c <_read_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	; (8008cac <_read_r+0x20>)
 8008c90:	4604      	mov	r4, r0
 8008c92:	4608      	mov	r0, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f7f8 fda0 	bl	80017e0 <_read>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_read_r+0x1e>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_read_r+0x1e>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20000394 	.word	0x20000394

08008cb0 <_init>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	bf00      	nop
 8008cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb6:	bc08      	pop	{r3}
 8008cb8:	469e      	mov	lr, r3
 8008cba:	4770      	bx	lr

08008cbc <_fini>:
 8008cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbe:	bf00      	nop
 8008cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc2:	bc08      	pop	{r3}
 8008cc4:	469e      	mov	lr, r3
 8008cc6:	4770      	bx	lr
